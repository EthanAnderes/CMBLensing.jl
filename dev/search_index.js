var documenterSearchIndex = {"docs":
[{"location":"01_lense_a_map/#Lensing-a-flat-sky-map-1","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"using CMBLensing, PyPlot","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"First we load a simulated unlensed field, f, and lensing potential, phi,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"@unpack f,ϕ = load_sim(\n    θpix  = 2,       # size of the pixels in arcmin\n    Nside = 256,     # number of pixels per side in the map\n    T     = Float32, # Float32 or Float64 (former is ~twice as fast)\n    pol   = :I       # :I for Intensity, :P for polarization, or :IP for both\n);","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"We can lense the map with LenseFlow,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"f̃ = LenseFlow(ϕ) * f;","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"And flip between lensed and unlensed maps,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"animate([f,f̃], fps=1)","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"<video width=\"560\" height=\"400\" controls autoplay loop>\n  <source type=\"video/mp4\" src=\"data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAADV0W1kYXQAAAKtBgX//6ncRem9\n5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTU1IHIyOTE3IDBhODRkOTggLSBILjI2NC9NUEVHLTQg\nQVZDIGNvZGVjIC0gQ29weWxlZnQgMjAwMy0yMDE4IC0gaHR0cDovL3d3dy52aWRlb2xhbi5vcmcv\neDI2NC5odG1sIC0gb3B0aW9uczogY2FiYWM9MSByZWY9MyBkZWJsb2NrPTE6MDowIGFuYWx5c2U9\nMHgzOjB4MTEzIG1lPWhleCBzdWJtZT03IHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVm\nPTEgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0xIDh4OGRjdD0xIGNxbT0wIGRlYWR6\nb25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PS0yIHRocmVhZHM9MyBsb29r\nYWhlYWRfdGhyZWFkcz0xIHNsaWNlZF90aHJlYWRzPTAgbnI9MCBkZWNpbWF0ZT0xIGludGVybGFj\nZWQ9MCBibHVyYXlfY29tcGF0PTAgY29uc3RyYWluZWRfaW50cmE9MCBiZnJhbWVzPTMgYl9weXJh\nbWlkPTIgYl9hZGFwdD0xIGJfYmlhcz0wIGRpcmVjdD0xIHdlaWdodGI9MSBvcGVuX2dvcD0wIHdl\naWdodHA9MiBrZXlpbnQ9MjUwIGtleWludF9taW49MSBzY2VuZWN1dD00MCBpbnRyYV9yZWZyZXNo\nPTAgcmNfbG9va2FoZWFkPTQwIHJjPWNyZiBtYnRyZWU9MSBjcmY9MjMuMCBxY29tcD0wLjYwIHFw\nbWluPTAgcXBtYXg9NjkgcXBzdGVwPTQgaXBfcmF0aW89MS40MCBhcT0xOjEuMDAAgAAArwBliIQA\nFv/+99M/zLLr9zm146j3op4mX0N1JQGblsULV/4LfN5gDoCl7NAbMnYLwPpJWvjpDTb0sIAABIYg\nuixDDyrUrgUohCIV4ipZiLRTpMAABNULFeaNFb2gy0rf+EO0WxShP1cZLNMs37kRTb/nQRXSNkIb\nvlDek4XRHsILEMXM+mpYpBNwIozk4hRTjFth4m/RN7IIDYcuEnJAHPgJl00/yHBe/cpa4+R0lxS/\n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\nLjEwMA==\n\">\n  Your browser does not support the video tag.\n</video>","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"The difference between lensed and unlensed,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"plot(f-f̃);","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"(Image: png)","category":"page"},{"location":"01_lense_a_map/#Loading-your-own-data-1","page":"Lensing a flat-sky map","title":"Loading your own data","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"CMBLensing flat-sky Field objects like f or ϕ  are just thin wrappers around arrays. You can get the underlying data arrays for I(mathbfx), Q(mathbfx), and U(mathbfx) with f[:Ix], f[:Qx], and f[:Ux] respectively, or the Fourier coefficients, I(mathbfl), Q(mathbfl), and U(mathbfl) with f[:Il], f[:Ql], and f[:Ul],","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"mapdata = f[:Ix]","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"256×256 Array{Float32,2}:\n   25.8173     19.2993      6.41404   …   -47.165    -11.4522      16.713\n   34.8354     19.4973     -1.80892       -50.1495   -11.8517      22.9185\n   34.2367     21.7635      4.60864       -56.613    -15.2302      20.1665\n   34.5332     29.6827     17.8587        -51.4088   -11.3183      20.598\n   36.4233     36.8536     27.9833        -35.4364     0.741379    25.0622\n   34.2225     39.9823     33.0422    …   -29.8763    -0.762718    21.8523\n   28.6324     37.5585     32.0725        -34.7134   -15.1357       8.98067\n   13.2728     28.038      26.6529        -38.7537   -29.6998     -10.2429\n  -11.2286     10.9392     18.2104        -51.6117   -52.2878     -37.4076\n  -39.2225    -14.2713      0.632904      -73.2668   -79.7281     -66.5412\n  -62.5868    -45.3188    -29.7238    …   -86.7054   -93.9454     -82.4856\n  -82.3833    -78.3303    -66.0555        -78.8718   -87.0898     -86.0098\n  -98.2049   -105.204     -98.969         -52.444    -65.743      -81.344\n    ⋮                                 ⋱                             ⋮\n -145.492    -131.572    -114.621        -124.53    -127.822     -141.97\n -145.176    -139.505    -130.835     …  -116.088   -117.246     -134.831\n -139.291    -140.197    -139.302        -109.078   -108.686     -125.072\n -128.768    -136.651    -142.609        -103.041   -102.481     -113.651\n -120.914    -134.997    -143.946         -98.0206   -96.8297    -106.729\n -118.925    -136.835    -144.144         -98.271    -94.8396    -102.377\n -115.372    -135.473    -139.763     …  -100.353    -90.9933     -95.7874\n  -97.203    -114.348    -114.117         -96.6372   -78.8816     -79.6977\n  -67.7365    -73.4285    -63.3159        -86.1041   -60.9228     -57.3645\n  -40.2193    -34.9851    -18.5027        -72.7253   -42.2062     -34.4393\n  -17.2238    -11.4866      2.83224       -60.7165   -27.2521     -14.1848\n    5.36874     8.14996    10.7505    …   -51.6952   -17.1915       2.71884","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"If you have your own map data in an array you'd like to load into a CMBLensing Field object, you can construct it as follows:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"FlatMap(mapdata, θpix=3)","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"65536-element FlatMap{256×256 map, 3′ pixels, fourier∂, Array{Float32,2}}:\n   25.81733\n   34.83542\n   34.236725\n   34.53321\n   36.4233\n   34.222473\n   28.632378\n   13.272816\n  -11.228561\n  -39.222466\n  -62.58681\n  -82.3833\n  -98.20491\n    ⋮\n -141.9703\n -134.83061\n -125.07156\n -113.65134\n -106.72942\n -102.37689\n  -95.7874\n  -79.69767\n  -57.364548\n  -34.439274\n  -14.184832\n    2.7188377","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"For more info on Field objects, see Field Basics.","category":"page"},{"location":"01_lense_a_map/#Inverse-lensing-1","page":"Lensing a flat-sky map","title":"Inverse lensing","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"You can inverse lense a map with the \\ operator (which does A \\ b ≡ inv(A) * b):","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"LenseFlow(ϕ) \\ f;","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"Note that this is true inverse lensing, rather than lensing by the negative deflection (which is often called \"anti-lensing\"). This means that lensing then inverse lensing a map should get us back the original map. Lets check that this is the case:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"Ns = [7 10 20]\nplot([f - (LenseFlow(ϕ,N) \\ (LenseFlow(ϕ,N) * f)) for N in Ns],\n    title=[\"ODE steps = $N\" for N in Ns]);","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"(Image: png)","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"A cool feature of LenseFlow is that inverse lensing is trivially done by running the LenseFlow ODE in reverse. Note that as we crank up the number of ODE steps above, we recover the original map to higher and higher precision.","category":"page"},{"location":"01_lense_a_map/#Other-lensing-algorithms-1","page":"Lensing a flat-sky map","title":"Other lensing algorithms","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"We can also lense via:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"PowerLens: the standard Taylor series expansion to any order:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":" f(x+nabla x) approx f(x) + (nabla f)(nabla phi) + frac12 (nabla nabla f) (nabla phi)^2 +  ","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"TayLens (Næss&Louis 2013): like PowerLens, but first a nearest-pixel permute step, then a Taylor expansion around the now-smaller residual displacement","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"plot([(PowerLens(ϕ,2)*f - f̃) (Taylens(ϕ,2)*f - f̃)], \n    title=[\"PowerLens - LenseFlow\" \"TayLens - LenseFlow\"]);","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"(Image: png)","category":"page"},{"location":"01_lense_a_map/#Benchmarking-1","page":"Lensing a flat-sky map","title":"Benchmarking","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"LenseFlow is highly optimized code since it appears on the inner-most loop of our analysis algorithms. To benchmark LenseFlow, note that there is first a precomputation step, which caches some data in preparation for applying it to a field of a given type. This was done automatically when evaluating LenseFlow(ϕ) * f but we can benchmark it separately since in many cases this only needs to be done once for a given phi, e.g. when Wiener filtering at fixed phi,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"using BenchmarkTools","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"@benchmark cache(LenseFlow(ϕ),f)","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"BenchmarkTools.Trial: \n  memory estimate:  61.11 MiB\n  allocs estimate:  2297\n  --------------\n  minimum time:     18.912 ms (0.00% GC)\n  median time:      22.888 ms (15.61% GC)\n  mean time:        21.938 ms (10.40% GC)\n  maximum time:     26.810 ms (13.38% GC)\n  --------------\n  samples:          228\n  evals/sample:     1","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"Once cached, it's very fast and memory non-intensive to repeatedly apply the operator:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"@benchmark Lϕ * f setup=(Lϕ=cache(LenseFlow(ϕ),f))","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat-sky map","title":"Lensing a flat-sky map","text":"BenchmarkTools.Trial: \n  memory estimate:  2.02 MiB\n  allocs estimate:  449\n  --------------\n  minimum time:     14.147 ms (0.00% GC)\n  median time:      14.583 ms (0.00% GC)\n  mean time:        14.726 ms (0.20% GC)\n  maximum time:     18.309 ms (21.70% GC)\n  --------------\n  samples:          136\n  evals/sample:     1","category":"page"},{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [CMBLensing]\nOrder   = [:function, :type, :macro, :constant]","category":"page"},{"location":"api/#CMBLensing.MAP_joint-Tuple{DataSet}","page":"API","title":"CMBLensing.MAP_joint","text":"MAP_joint(ds::DataSet; kwargs...)\n\nCompute the maximum a posteriori (i.e. \"MAP\") estimate of the joint posterior, mathcalP(fphithetad), or compute a quasi-sample. \n\nKeyword arguments:\n\nϕstart — Starting point of the maximizer (default: phi=0)\nNϕ — Noise to use in the approximate hessian matrix. Can also give   Nϕ=:qe to use the EB quadratic estimate noise (default: :qe)\nquasi_sample — true to iterate quasi-samples, or an integer to compute   a specific quasi-sample.\nnsteps — The number of iterations for the maximizer\nNcg — Maximum number of conjugate gradient steps during the f update\ncgtol — Conjugrate gradient tolerance (will stop at cgtol or Ncg,   whichever is first)\nαtol — Absolute tolerance on alpha in the linesearch in the phi   quasi-Newton-Rhapson step, x^prime = x - alpha H^-1 g\nαmax — Maximum value for alpha in the linesearch\nprogress — whether to show progress bar\n\nReturns a tuple (f, ϕ, tr) where f is the best-fit (or quasi-sample) field, ϕ is the lensing potential, and tr contains info about the run. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.MAP_marg-Tuple{Any}","page":"API","title":"CMBLensing.MAP_marg","text":"MAP_marg(ds; kwargs...)\n\nCompute the maximum a posteriori (i.e. \"MAP\") estimate of the marginal posterior, mathcalP(phithetad).\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.argmaxf_lnP-Tuple{Field,DataSet}","page":"API","title":"CMBLensing.argmaxf_lnP","text":"argmaxf_lnP(ϕ,                ds::DataSet; kwargs...)\nargmaxf_lnP(ϕ, θ::NamedTuple, ds::DataSet; kwargs...)\nargmaxf_lnP(Lϕ,               ds::DataSet; kwargs...)\n\nComputes either the Wiener filter at fixed phi, or a sample from this slice along the posterior.\n\nKeyword arguments: \n\nwhich — :wf, :sample, or fluctuation to compute 1) the Wiener filter, i.e. the best-fit of mathcalP(fphid), 2) a sample from mathcalP(fphid), or 3) a sample minus the Wiener filter, i.e. the fluctuation on top of the mean.\nguess — starting guess for f for the conjugate gradient solver\nkwargs... — all other arguments are passed to conjugate_gradient\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.batch-Union{Tuple{F}, Tuple{D′}, Tuple{∂m}, Tuple{θ}, Tuple{N}, Tuple{F,Int64}} where F<:(Union{FlatFourier{Flat{N,θ,∂m,D′},T,M}, FlatMap{Flat{N,θ,∂m,D′},T,M}} where M where T) where D′ where ∂m where θ where N","page":"API","title":"CMBLensing.batch","text":"batch(f::FlatField, D::Int)\n\nConstruct a batch-length-D FlatField from an unbatched FlatField which will broadcast as if it were D copies of f (without actually making D copies of the data in f)\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.batch-Union{Tuple{Vararg{F,N} where N}, Tuple{F}, Tuple{∂m}, Tuple{θ}, Tuple{N}} where F<:(Union{FlatFourier{#s133,T,M}, FlatMap{#s133,T,M}} where M where T where #s133<:(Flat{N,θ,∂m,D} where D)) where ∂m where θ where N","page":"API","title":"CMBLensing.batch","text":"batch(fs::FlatField...)\nbatch(fs::Vector{<:FlatField})\nbatch(fs::TUple{<:FlatField})\n\nTurn a length-N array of FlatField's into a single batch-length-N FlatField. For the inverse operation, see unbatch. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.batchindex-Union{Tuple{F}, Tuple{P}, Tuple{∂mode}, Tuple{θ}, Tuple{N}, Tuple{F,Any}} where F<:(Union{FlatFourier{P,T,M}, FlatMap{P,T,M}} where M where T) where P<:(Flat{N,θ,∂mode,D} where D) where ∂mode where θ where N","page":"API","title":"CMBLensing.batchindex","text":"batchindex(f::FlatField, I)\n\nGet the Ith indexed batch (I can be a slice). \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.batchsize-Union{Tuple{Union{FieldTuple{CMBLensing.BasisTuple{Tuple{Fourier,EBFourier}},NamedTuple{(:I, :P),Tuple{FlatFourier{#s95,T,M},FieldTuple{EBFourier,NamedTuple{(:E, :B),Tuple{FlatFourier{#s95,T,M},FlatFourier{#s95,T,M}}},Complex{T}}}},Complex{T}}, FieldTuple{CMBLensing.BasisTuple{Tuple{Fourier,QUFourier}},NamedTuple{(:I, :P),Tuple{FlatFourier{#s95,T,M},FieldTuple{QUFourier,NamedTuple{(:Q, :U),Tuple{FlatFourier{#s95,T,M},FlatFourier{#s95,T,M}}},Complex{T}}}},Complex{T}}, FieldTuple{CMBLensing.BasisTuple{Tuple{Map,EBMap}},NamedTuple{(:I, :P),Tuple{FlatMap{#s95,T,M},FieldTuple{EBMap,NamedTuple{(:E, :B),Tuple{FlatMap{#s95,T,M},FlatMap{#s95,T,M}}},T}}},T}, FieldTuple{CMBLensing.BasisTuple{Tuple{Map,QUMap}},NamedTuple{(:I, :P),Tuple{FlatMap{#s95,T,M},FieldTuple{QUMap,NamedTuple{(:Q, :U),Tuple{FlatMap{#s95,T,M},FlatMap{#s95,T,M}}},T}}},T}, FieldTuple{EBFourier,NamedTuple{(:E, :B),Tuple{FlatFourier{#s95,T,M},FlatFourier{#s95,T,M}}},Complex{T}}, FieldTuple{EBMap,NamedTuple{(:E, :B),Tuple{FlatMap{#s95,T,M},FlatMap{#s95,T,M}}},T}, FieldTuple{QUFourier,NamedTuple{(:Q, :U),Tuple{FlatFourier{#s95,T,M},FlatFourier{#s95,T,M}}},Complex{T}}, FieldTuple{QUMap,NamedTuple{(:Q, :U),Tuple{FlatMap{#s95,T,M},FlatMap{#s95,T,M}}},T}, FlatFourier{#s95,T,M}, FlatMap{#s95,T,M}} where M where T where #s95<:(Flat{#s94,#s93,#s92,D} where #s92 where #s93 where #s94)}, Tuple{D}} where D","page":"API","title":"CMBLensing.batchsize","text":"batchlength(f::FlatField)\n\nThe number of batches of Fields in this object.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.cpu-Tuple{Any}","page":"API","title":"CMBLensing.cpu","text":"cpu(xs)\n\nRecursively move an object to CPU memory (i.e. the opposite of cu)\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.gradhess-Tuple{Any}","page":"API","title":"CMBLensing.gradhess","text":"gradhess(f)\n\nCompute the gradient g^i = nabla^i f, and the hessian, H_j^i = nabla_j nabla^i f.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.lnP-Tuple{Any,Any,Any,DataSet}","page":"API","title":"CMBLensing.lnP","text":"lnP(t, fₜ, ϕₜ,                ds::DataSet)\nlnP(t, fₜ, ϕₜ, θ::NamedTuple, ds::DataSet)\n\nCompute the log posterior probability in the joint parameterization as a function of the field, f_t, the lensing potential, phi_t, and possibly some cosmological parameters, theta. The subscript t can refer to either a \"time\", e.g. passing t=0 corresponds to the unlensed parametrization and t=1 to the lensed one, or can be :mix correpsonding to the mixed parametrization. In all cases, the arguments fₜ and ϕₜ should then be f and phi in that particular parametrization.\n\nIf any parameters theta are provided, we also include the determinant terms for covariances which depend on theta. In the mixed parametrization, we also include any Jacobian determinant terms that depend on theta. \n\nThe argument ds should be a DataSet and stores the masks, data, etc... needed to construct the posterior. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.load_camb_Cℓs-Tuple{}","page":"API","title":"CMBLensing.load_camb_Cℓs","text":"load_camb_Cℓs(;path_prefix, custom_tensor_params=nothing, \n    unlensed_scalar_postfix, unlensed_tensor_postfix, lensed_scalar_postfix, lenspotential_postfix)\n\nLoad some Cℓs from CAMB files. \n\npath_prefix specifies the prefix for the files, which are then expected to have the normal CAMB postfixes: \"scalCls.dat\", \"tensCls.dat\", \"lensedCls.dat\", \"lenspotentialCls.dat\", unless otherwise specified via the other keyword arguments. custom_tensor_params can be used to call CAMB directly for the unlensedtensors, rather than reading them from a file (since alot of times this file doesn't get saved). The value should be a Dict/NamedTuple which will be passed to a call to camb, e.g. `customtensor_params=(r=0,)` for zero tensors. \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.load_chains-Tuple{Any}","page":"API","title":"CMBLensing.load_chains","text":"load_chains(filename; burnin=0, thin=1, join=false)\n\nLoad a single chain or multiple parallel chains which were written to a file by sample_joint. \n\nKeyword arguments: \n\nburnin — Remove this many samples from the start of each chain.\nthin — If thin is an integer, thin the chain by this factor. If thin == :hasmaps, return only samples which have maps saved. If thin is a Function, filter the chain by this function (e.g. thin=haskey(:g) on Julia 1.5+)\nunbatch — If true, unbatch the chains if they are batched. \njoin — If true, concatenate all the chains together.\nskip_missing_chunks — Skip missing chunks in the chain instead of terminating the chain there. \n\nThe object returned by this function is a Chain or Chains object, which simply wraps an Array of Dicts or an Array of Array of Dicts, respectively (each sample is a Dict). The wrapper object has some extra indexing properties for convenience: \n\nIt can be indexed as if it were a single multidimensional object, e.g. chains[1,:,:accept] would return the :accept key of all samples in the first chain.\nLeading colons can be dropped, i.e. chains[:,:,:accept] is the same as chains[:accept]. \nIf some samples are missing a particular key, missing is returned for those samples insted of an error.\nThe recursion goes arbitrarily deep into the objects it finds. E.g., since sampled parameters are stored in a NamedTuple like (Aϕ=1.3,) in the θ key of each sample Dict, you can do chain[:θ,:Aϕ] to get all Aϕ samples as a vector. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.load_sim-Tuple{}","page":"API","title":"CMBLensing.load_sim","text":"load_sim\n\nCreate a BaseDataSet object with some simulated data, returing the DataSet and simulated truths. E.g.\n\n@unpack f,ϕ,ds = load_sim(;\n    θpix  = 2,\n    Nside = 128,\n    pol   = :I,\n    T     = Float32\n);\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.mean_std_and_errors-Tuple{Any}","page":"API","title":"CMBLensing.mean_std_and_errors","text":"mean_std_and_errors(samples; N_bootstrap=10000)\n\nGet the mean and standard deviation of a set of correlated samples from a chain where the error on the mean and standard deviation is estimated with bootstrap resampling using the calculated \"effective sample size\" of the chain.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.mix-Tuple{Any,Any,DataSet}","page":"API","title":"CMBLensing.mix","text":"mix(f, ϕ,                ds::DataSet)\nmix(f, ϕ, θ::NamedTuple, ds::DataSet)\n\nCompute the mixed (f°, ϕ°) from the unlensed field f and lensing potential ϕ, given the definition of the mixing matrices in ds evaluated at parameters θ (or at fiducial values if no θ provided).\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.noiseCℓs-Tuple{}","page":"API","title":"CMBLensing.noiseCℓs","text":"noiseCℓs(;μKarcminT, beamFWHM=0, ℓmax=8000, ℓknee=100, αknee=3)\n\nCompute the (:TT,:EE,:BB,:TE) noise power spectra given white noise + 1/f. Polarization noise is scaled by sqrt2 relative to μKarcminT. beamFWHM is in arcmin.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.pixwin-Tuple{Any,Any}","page":"API","title":"CMBLensing.pixwin","text":"pixwin(θpix, ℓ)\n\nReturns the pixel window function for square flat-sky pixels of width θpix (in arcmin) evaluated at some ℓs. This is the scaling of k-modes, the scaling of the power spectrum will be pixwin^2. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.quadratic_estimate-Union{Tuple{F2}, Tuple{F1}, Tuple{Tuple{DataSet,DataSet},Any}} where F2 where F1","page":"API","title":"CMBLensing.quadratic_estimate","text":"quadratic_estimate(ds::DataSet, which; wiener_filtered=true)\nquadratic_estimate((ds1::DataSet,ds2::DataSet), which; wiener_filtered=true)\n\nCompute quadratic estimate of ϕ given data.\n\nThe ds or (ds1,ds2) tuple contain the DataSet object(s) which houses the data and covariances used in the estimate. Note that only the Fourier-diagonal approximations for the beam, mask, and noise,, i.e. ds.B̂, ds.M̂, and ds.Cn̂, are accounted for. To account full operators (if they are not actually Fourier-diagonal), you should compute the impact using Monte Carlo.\n\nIf a tuple is passed in, the result will come from correlating the data from ds1 with that from ds2, which can be useful for debugging / isolating various noise terms. \n\nAn optional keyword argument AL can be passed in in case the QE normalization was already computed, in which case it won't be recomputed during the calculation.\n\nReturns a NamedTuple (ϕqe, AL, Nϕ) where ϕqe is the (possibly Wiener filtered, depending on wiener_filtered option) quadratic estimate, AL is the normalization (which is already applied to ϕqe, it does not need to be applied again), and Nϕ is the analytic N0 noise bias (Nϕ==AL if using unlensed weights, currently only Nϕ==AL is always returned, no matter the weights)\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.resimulate!-Tuple{DataSet}","page":"API","title":"CMBLensing.resimulate!","text":"resimulate!(ds::DataSet; [f, ϕ, n])\n\nReplace the data in this DataSet in-place with a simulation, potentially given a fixed f, ϕ, or n, if any are provided. \n\nReturns a named tuple of (ds, f, ϕ, n, f̃)\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.resimulate-Tuple{DataSet}","page":"API","title":"CMBLensing.resimulate","text":"resimulate(ds::DataSet; [f, ϕ, n])\n\nMake a new DataSet with the data replaced by a simulation, potentially given a fixed f, ϕ, or n, if any are provided. \n\nReturns a named tuple of (ds, f, ϕ, n, f̃)\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.sample_joint-Tuple{DataSet}","page":"API","title":"CMBLensing.sample_joint","text":"sample_joint(ds::DataSet; kwargs...)\n\nSample the joint posterior, mathcalP(fphithetad). \n\nKeyword arguments: \n\nnsamps_per_chain — (required) The number of samples per chain\nnchains — Run nchains chains in parallel (default: 1)\nnchunk — Do nchunk steps between parallel chain communication (default: 1)\nnsavemaps — Save maps into chain every nsavemaps steps (default: 1)\nnburnin_always_accept — The first nburnin_always_accept steps, always accept                           HMC steps independent of integration error (default: 0)\nnburnin_fixθ — For the first nburnin_fixθ steps, fix θ at its starting point (default: 0)\nNϕ — Noise to use in the HMC mass matrix. can also give Nϕ=:qe to use the         EB quadratic estimate noise (default: :qe)\nchains — nothing to start a new chain; the return value from a previous call to            sample_joint to resume those chains; :resume to resume chains            from a file given by filename\nθrange — Range and density to grid sample parameters as a NamedTuple,             e.g. (Aϕ=range(0.7,1.3,length=20),). \nθstart — Starting values of parameters as a NamedTuple, e.g. (Aϕ=1.2,),             or nothing to randomly sample from θrange\nϕstart — Starting ϕ, either a Field object, :quasi_sample, or :best_fit\nmetadata — Does nothing, but is saved into the chain file\nnhmc — The number of HMC passes per ϕ Gibbs step (default: 1)\nsymp_kwargs — an array of NamedTupe kwargs to pass to symplectic_integrate.                  E.g. [(N=50,ϵ=0.1),(N=25,ϵ=0.01)] would do 50 large steps then 25                  smaller steps per each Gibbs pass. If specified, nhmc is ignored.\nwf_kwargs — Keyword arguments to pass to argmaxf_lnP in the Wiener Filter Gibbs step.\nMAP_kwargs — Keyword arguments to pass to MAP_joint when computing the starting point.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.seed_for_storage!","page":"API","title":"CMBLensing.seed_for_storage!","text":"seed_for_storage!(storage[, seed])\nseed_for_storage!((storage1, storage2, ...)[, seed])\n\nSet the global random seed for the RNG which controls storage-type. \n\n\n\n","category":"function"},{"location":"api/#CMBLensing.simulate-Tuple{Any}","page":"API","title":"CMBLensing.simulate","text":"simulate(Σ; rng=global_rng_for(Σ), seed=nothing)\n\nDraw a simulation from the covariance matrix Σ, i.e. draw a random vector xi such that the covariance langle xi xi^dagger rangle = Sigma. \n\nThe random number generator rng will be used and advanced in the proccess, and is by default the appropriate one depending on if Σ is backed by Array or CuArray.\n\nThe seed argument can also be used to seed the rng.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.symplectic_integrate-Union{Tuple{T}, Tuple{AbstractArray{T,1},Any,Any,Any}, Tuple{AbstractArray{T,1},Any,Any,Any,Any}} where T","page":"API","title":"CMBLensing.symplectic_integrate","text":"symplectic_integrate(x₀, p₀, Λ, U, δUδx, N=50, ϵ=0.1, progress=false)\n\nDo a symplectic integration of the potential energy U (with gradient δUδx) starting from point x₀ with momentum p₀ and mass matrix Λ. The number of steps is N and the step size ϵ. \n\nReturns ΔH, xᵢ, pᵢ corresponding to change in Hamiltonian, and final position and momenta. If hist is specified a trace of requested variables throughout each step is also returned. \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.ud_grade-Union{Tuple{P}, Tuple{∂mode}, Tuple{N}, Tuple{θ}, Tuple{M}, Tuple{T}, Tuple{Union{FlatFourier{P,T,M}, FlatMap{P,T,M}},Any}} where P<:(Flat{N,θ,∂mode,D} where D) where ∂mode where N where θ where M where T","page":"API","title":"CMBLensing.ud_grade","text":"ud_grade(f::Field, θnew, mode=:map, deconv_pixwin=true, anti_aliasing=true)\n\nUp- or down-grades field f to new resolution θnew (only in integer steps). Two modes are available specified by the mode argument: \n\n:map     — Up/downgrade by replicating/averaging pixels in map-space\n:fourier — Up/downgrade by extending/truncating the Fourier grid\n\nFor :map mode, two additional options are possible. If deconv_pixwin is true, deconvolves the pixel window function from the downgraded map so the spectrum of the new and old maps are the same. If anti_aliasing is true, filters out frequencies above Nyquist prior to down-sampling. \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.unbatch-Tuple{CMBLensing.Chains}","page":"API","title":"CMBLensing.unbatch","text":"unbatch(chains::Chains)\n\nExpand each chain in this Chains object by unbatching it. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.unbatch-Tuple{CMBLensing.Chain}","page":"API","title":"CMBLensing.unbatch","text":"unbatch(chain::Chain)\n\nConvert a chain of batch-length-D fields to D chains of unbatched fields. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.unbatch-Tuple{Union{FieldTuple{CMBLensing.BasisTuple{Tuple{Fourier,EBFourier}},NamedTuple{(:I, :P),Tuple{FlatFourier{#s95,T,M},FieldTuple{EBFourier,NamedTuple{(:E, :B),Tuple{FlatFourier{#s95,T,M},FlatFourier{#s95,T,M}}},Complex{T}}}},Complex{T}}, FieldTuple{CMBLensing.BasisTuple{Tuple{Fourier,QUFourier}},NamedTuple{(:I, :P),Tuple{FlatFourier{#s95,T,M},FieldTuple{QUFourier,NamedTuple{(:Q, :U),Tuple{FlatFourier{#s95,T,M},FlatFourier{#s95,T,M}}},Complex{T}}}},Complex{T}}, FieldTuple{CMBLensing.BasisTuple{Tuple{Map,EBMap}},NamedTuple{(:I, :P),Tuple{FlatMap{#s95,T,M},FieldTuple{EBMap,NamedTuple{(:E, :B),Tuple{FlatMap{#s95,T,M},FlatMap{#s95,T,M}}},T}}},T}, FieldTuple{CMBLensing.BasisTuple{Tuple{Map,QUMap}},NamedTuple{(:I, :P),Tuple{FlatMap{#s95,T,M},FieldTuple{QUMap,NamedTuple{(:Q, :U),Tuple{FlatMap{#s95,T,M},FlatMap{#s95,T,M}}},T}}},T}, FieldTuple{EBFourier,NamedTuple{(:E, :B),Tuple{FlatFourier{#s95,T,M},FlatFourier{#s95,T,M}}},Complex{T}}, FieldTuple{EBMap,NamedTuple{(:E, :B),Tuple{FlatMap{#s95,T,M},FlatMap{#s95,T,M}}},T}, FieldTuple{QUFourier,NamedTuple{(:Q, :U),Tuple{FlatFourier{#s95,T,M},FlatFourier{#s95,T,M}}},Complex{T}}, FieldTuple{QUMap,NamedTuple{(:Q, :U),Tuple{FlatMap{#s95,T,M},FlatMap{#s95,T,M}}},T}, FlatFourier{#s95,T,M}, FlatMap{#s95,T,M}} where M where T where #s95<:(Flat{#s94,#s93,#s92,1} where #s92 where #s93 where #s94)}","page":"API","title":"CMBLensing.unbatch","text":"unbatch(f::FlatField)\n\nIf f is a batch-length-D field, return length-D vector of each batch component, otherwise just return f. For the inverse operation, see batch.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.unmix-Tuple{Any,Any,DataSet}","page":"API","title":"CMBLensing.unmix","text":"unmix(f°, ϕ°,                ds::DataSet)\nunmix(f°, ϕ°, θ::NamedTuple, ds::DataSet)\n\nCompute the unmixed/unlensed (f, ϕ) from the mixed field f° and mixed lensing potential ϕ°, given the definition of the mixing matrices in ds evaluated at parameters θ (or at fiducial values if no θ provided). \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.BilinearLens","page":"API","title":"CMBLensing.BilinearLens","text":"BilinearLens(ϕ)\n\nBilinearLens is a lensing operator that computes lensing with bilinear interpolation. The action of the operator, as well as its adjoint, inverse, inverse-adjoint, and gradient w.r.t. ϕ can all be computed. The log-determinant of the operation is non-zero and can't be computed. \n\nInternally, BilinearLens forms a sparse matrix with the interpolation weights, which can be applied and adjoint-ed extremely fast (e.g. at least an order of magnitude faster than LenseFlow). Inverse and inverse-adjoint lensing is somewhat slower as it is implemented with several steps of the preconditioned generalized minimal residual algorithm, taking anti-lensing as the preconditioner.\n\nwarning: Warning\nDue to this bug in PackageCompiler, currently you have to run using SparseArrays by hand in your Julia session before BilinearLens is available.\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatEBFourier","page":"API","title":"CMBLensing.FlatEBFourier","text":"# main constructor:\nFlatEBFourier(El::AbstractRank2or3Array, Bl::AbstractRank2or3Array[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\n\n# more low-level:\nFlatEBFourier{P}(El::AbstractRank2or3Array, Bl::AbstractRank2or3Array) # specify pixelization P explicilty\nFlatEBFourier{P,T}(El::AbstractRank2or3Array, Bl::AbstractRank2or3Array) # additionally, convert elements to type Complex{T}\nFlatEBFourier{P,T,M<:AbstractRank2or3Array{Complex{T}}}(El::M, Bl::M) # specify everything explicilty\n\nConstruct a FlatEBFourier object. The top form of the constructor is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatEBMap","page":"API","title":"CMBLensing.FlatEBMap","text":"# main constructor:\nFlatEBMap(Ex::AbstractRank2or3Array, Bx::AbstractRank2or3Array[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\n\n# more low-level:\nFlatEBMap{P}(Ex::AbstractRank2or3Array, Bx::AbstractRank2or3Array) # specify pixelization P explicilty\nFlatEBMap{P,T}(Ex::AbstractRank2or3Array, Bx::AbstractRank2or3Array) # additionally, convert elements to type T\nFlatEBMap{P,T,M<:AbstractRank2or3Array{T}}(Ex::M, Bx::M) # specify everything explicilty\n\nConstruct a FlatEBMap object. The top form of the constructor is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatFourier","page":"API","title":"CMBLensing.FlatFourier","text":"# main constructor:\nFlatFourier(Il::AbstractArray[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\n\n# more low-level:\nFlatFourier{P}(Il::AbstractArray) # specify pixelization P explicilty\nFlatFourier{P,T}(Il::AbstractArray) # additionally, convert elements to type Complex{T}\nFlatFourier{P,T,M<:AbstractArray{Complex{T}}}(Il::M) # specify everything explicilty\n\nConstruct a FlatFourier object. The top form of the constructor is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatIEBFourier","page":"API","title":"CMBLensing.FlatIEBFourier","text":"# main constructors:\nFlatIEBFourier(Il::AbstractMatrix, El::AbstractMatrix, Bl::AbstractMatrix[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\nFlatIEBFourier(I::FlatFourier, E::FlatFourier, B::FlatFourier)\n\n# more low-level:\nFlatIEBFourier{P}(Il::AbstractMatrix, El::AbstractMatrix, Bl::AbstractMatrix) # specify pixelization P explicilty\nFlatIEBFourier{P,T}(Il::AbstractMatrix, El::AbstractMatrix, Bl::AbstractMatrix) # additionally, convert elements to type Complex{T}\nFlatIEBFourier{P,T,M<:AbstractMatrix{Complex{T}}}(Il::M, El::M, Bl::M) # specify everything explicilty\n\nConstruct a FlatIEBFourier object. The top form of the constructors is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatIEBMap","page":"API","title":"CMBLensing.FlatIEBMap","text":"# main constructors:\nFlatIEBMap(Ix::AbstractMatrix, Ex::AbstractMatrix, Bx::AbstractMatrix[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\nFlatIEBMap(I::FlatMap, E::FlatMap, B::FlatMap)\n\n# more low-level:\nFlatIEBMap{P}(Ix::AbstractMatrix, Ex::AbstractMatrix, Bx::AbstractMatrix) # specify pixelization P explicilty\nFlatIEBMap{P,T}(Ix::AbstractMatrix, Ex::AbstractMatrix, Bx::AbstractMatrix) # additionally, convert elements to type T\nFlatIEBMap{P,T,M<:AbstractMatrix{T}}(Ix::M, Ex::M, Bx::M) # specify everything explicilty\n\nConstruct a FlatIEBMap object. The top form of the constructors is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatIQUFourier","page":"API","title":"CMBLensing.FlatIQUFourier","text":"# main constructors:\nFlatIQUFourier(Il::AbstractMatrix, Ql::AbstractMatrix, Ul::AbstractMatrix[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\nFlatIQUFourier(I::FlatFourier, Q::FlatFourier, U::FlatFourier)\n\n# more low-level:\nFlatIQUFourier{P}(Il::AbstractMatrix, Ql::AbstractMatrix, Ul::AbstractMatrix) # specify pixelization P explicilty\nFlatIQUFourier{P,T}(Il::AbstractMatrix, Ql::AbstractMatrix, Ul::AbstractMatrix) # additionally, convert elements to type Complex{T}\nFlatIQUFourier{P,T,M<:AbstractMatrix{Complex{T}}}(Il::M, Ql::M, Ul::M) # specify everything explicilty\n\nConstruct a FlatIQUFourier object. The top form of the constructors is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatIQUMap","page":"API","title":"CMBLensing.FlatIQUMap","text":"# main constructors:\nFlatIQUMap(Ix::AbstractMatrix, Qx::AbstractMatrix, Ux::AbstractMatrix[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\nFlatIQUMap(I::FlatMap, Q::FlatMap, U::FlatMap)\n\n# more low-level:\nFlatIQUMap{P}(Ix::AbstractMatrix, Qx::AbstractMatrix, Ux::AbstractMatrix) # specify pixelization P explicilty\nFlatIQUMap{P,T}(Ix::AbstractMatrix, Qx::AbstractMatrix, Ux::AbstractMatrix) # additionally, convert elements to type T\nFlatIQUMap{P,T,M<:AbstractMatrix{T}}(Ix::M, Qx::M, Ux::M) # specify everything explicilty\n\nConstruct a FlatIQUMap object. The top form of the constructors is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatMap","page":"API","title":"CMBLensing.FlatMap","text":"# main constructor:\nFlatMap(Ix::AbstractArray[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\n\n# more low-level:\nFlatMap{P}(Ix::AbstractArray) # specify pixelization P explicilty\nFlatMap{P,T}(Ix::AbstractArray) # additionally, convert elements to type T\nFlatMap{P,T,M<:AbstractArray{T}}(Ix::M) # specify everything explicilty\n\nConstruct a FlatMap object. The top form of the constructor is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatQUFourier","page":"API","title":"CMBLensing.FlatQUFourier","text":"# main constructor:\nFlatQUFourier(Ql::AbstractRank2or3Array, Ul::AbstractRank2or3Array[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\n\n# more low-level:\nFlatQUFourier{P}(Ql::AbstractRank2or3Array, Ul::AbstractRank2or3Array) # specify pixelization P explicilty\nFlatQUFourier{P,T}(Ql::AbstractRank2or3Array, Ul::AbstractRank2or3Array) # additionally, convert elements to type Complex{T}\nFlatQUFourier{P,T,M<:AbstractRank2or3Array{Complex{T}}}(Ql::M, Ul::M) # specify everything explicilty\n\nConstruct a FlatQUFourier object. The top form of the constructor is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.FlatQUMap","page":"API","title":"CMBLensing.FlatQUMap","text":"# main constructor:\nFlatQUMap(Qx::AbstractRank2or3Array, Ux::AbstractRank2or3Array[, θpix={resolution in arcmin}, ∂mode={fourier∂ or map∂})\n\n# more low-level:\nFlatQUMap{P}(Qx::AbstractRank2or3Array, Ux::AbstractRank2or3Array) # specify pixelization P explicilty\nFlatQUMap{P,T}(Qx::AbstractRank2or3Array, Ux::AbstractRank2or3Array) # additionally, convert elements to type T\nFlatQUMap{P,T,M<:AbstractRank2or3Array{T}}(Qx::M, Ux::M) # specify everything explicilty\n\nConstruct a FlatQUMap object. The top form of the constructor is most convenient for interactive work, while the others may be more useful for low-level code.\n\n\n\n\n\n","category":"type"},{"location":"api/#CMBLensing.ParamDependentOp","page":"API","title":"CMBLensing.ParamDependentOp","text":"ParamDependentOp(recompute_function::Function)\n\nCreates an operator which depends on some parameters theta and can be evaluated at various values of these parameters. \n\nrecompute_function should be a function which accepts keyword arguments for theta and returns the operator. Each keyword must have a default value; the operator will act as if evaluated at these defaults unless it is explicitly evaluated at other parameters. \n\nExample:\n\nCϕ₀ = Diagonal(...) # some fixed Diagonal operator\nCϕ = ParamDependentOp((;Aϕ=1)->Aϕ*Cϕ₀) # create ParamDependentOp\n\nCϕ(Aϕ=1.1) * ϕ   # Cϕ(Aϕ=1.1) is equal to 1.1*Cϕ₀\nCϕ * ϕ           # Cϕ alone will act like Cϕ(Aϕ=1) because that was the default above\n\nNote: if you are doing parallel work, global variables referred to in the recompute_function need to be distributed to all workers. A more robust solution is to avoid globals entirely and instead ensure all variables are \"closed\" over (and hence will automatically get distributed). This will happen by default if defining the ParamDependentOp inside any function, or can be forced at the global scope by wrapping everything in a let-block, e.g.:\n\nCϕ = let Cϕ₀=Cϕ₀\n    ParamDependentOp((;Aϕ=1)->Aϕ*Cϕ₀)\nend\n\nAfter executing the code above, Cϕ is now ready to be (auto-)shipped to any workers and will work regardless of what global variables are defined on these workers. \n\n\n\n","category":"type"},{"location":"api/#CMBLensing.RK4Solver-Tuple{Function,Any,Any,Any,Any}","page":"API","title":"CMBLensing.RK4Solver","text":"RK4Solver(F!::Function, y₀, t₀, t₁, nsteps)\n\nSolve for y(t_1) with 4th order Runge-Kutta assuming dydt = F(ty) and y(t_0) = y_0.\n\nArguments:\n\nF! — a function F!(v,t,y)which setsv=F(t,y)`\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.@ismain-Tuple{}","page":"API","title":"CMBLensing.@ismain","text":"@ismain()\n\nReturn true if the current file is being run as a script.\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.@namedtuple-Tuple","page":"API","title":"CMBLensing.@namedtuple","text":"Pack some variables into a NamedTuple. E.g.:\n\n> x = 3\n> y = 4\n> @namedtuple(x, y, z=5)\n(x=3,y=4,z=5)\n\n\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.@repeated-Tuple{Any,Any}","page":"API","title":"CMBLensing.@repeated","text":"Return a tuple with the expression repeated n times \n\n\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.BinRescaledOp-Tuple{Any,Any,Symbol}","page":"API","title":"CMBLensing.BinRescaledOp","text":"BinRescaledOp(C₀, Cbins, θname::Symbol)\n\nCreate a ParamDependentOp which has a parameter named θname which is an array that controls the amplitude of bandpowers in bins given by Cbins. \n\nFor example, BinRescaledOp(C₀, [Cbin1, Cbin2], :A) creates the operator: \n\nParamDependentOp( (;A=[1,1], _...) -> C₀ + (A[1]-1) * Cbin1 + (A[2]-1) * Cbin2 )\n\nwhere C₀, Cbin1, and Cbin2 should be some LinOps. Note Cbins are directly the power which is added, rather than a mask. \n\nThe resulting operator is differentiable in θname.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.LinearInterpolation-Tuple{AbstractArray{T,1} where T,AbstractArray{T,1} where T}","page":"API","title":"CMBLensing.LinearInterpolation","text":"itp = LinearInterpolation(xdat::AbstractVector, ydat::AbstractVector; extrapolation_bc=NaN)\nitp(x) # interpolate at x\n\nA simple 1D linear interpolation code which is fully Zygote differentiable in either xdat, ydat, or the evaluation point x.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.antilensing-Union{Tuple{PowerLens{N,F}}, Tuple{F}, Tuple{N}} where F where N","page":"API","title":"CMBLensing.antilensing","text":"Create a PowerLens operator that lenses by -ϕ instead. \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.beamCℓs-Tuple{}","page":"API","title":"CMBLensing.beamCℓs","text":"beamCℓs(;beamFWHM, ℓmax=8000)\n\nCompute the beam power spectrum, often called W_ell. A map should be multiplied by the square root of this.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.conjugate_gradient","page":"API","title":"CMBLensing.conjugate_gradient","text":"conjugate_gradient(M, A, b, x=M\\b; nsteps=length(b), tol=sqrt(eps()), progress=false, callback=nothing, hist=nothing, histmod=1)\n\nCompute x=A\\b (where A is positive definite) by conjugate gradient. M is the preconditioner and should be M≈A, and M\\x should be fast.\n\nThe solver will stop either after nsteps iterations or when dot(r,r)<tol (where r=A*x-b is the residual  at that step), whichever occurs first.\n\nInfo from the iterations of the solver can be returned if hist is specified. hist can be one or a tuple of:\n\n:i — current iteration number\n:x — current solution\n:r — current residual r=A*x-b\n:res — the norm of r\n:t — the time elapsed (in seconds) since the start of the algorithm\n\nhistmod can be used to include every N-th iteration only in hist. \n\n\n\n","category":"function"},{"location":"api/#CMBLensing.fftsyms-Union{Tuple{n}, Tuple{m}, Tuple{Val{m},Val{n}}} where n where m","page":"API","title":"CMBLensing.fftsyms","text":"Arguments m and n refer to the sizes of an m×n matrix (call it A) that is the output of a real FFT (thus m=n÷2+1)\n\nReturns a tuple of (ireal, iimag, negks) where these are\n\nireal — m×n mask corrsponding to unique real entries of A\niimag — m×n mask corrsponding to unique imaginary entries of A\nnegks — m×n matrix of giving the index into A where the negative k-vector           is, s.t. A[i,j] = A[negks[i,j]]'\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.fieldvalues-Tuple{Any}","page":"API","title":"CMBLensing.fieldvalues","text":"Return the type's fields as a tuple\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.get_term_memoizer-Tuple{Any}","page":"API","title":"CMBLensing.get_term_memoizer","text":"All of the terms in the quadratic estimate and normalization expressions look like\n\nC * l[i] * l̂[j] * l̂[k] * ...\n\nwhere C is some field or diagonal covariance. For example, there's a term in the EB estimator that looks like:\n\n(CE * (CẼ+Cn) \\ d[:E])) * l[i] * l̂[j] * l̂[k]\n\n(where note that l̂[j] and l̂[k] are unit vectors, but l[i] is not).  The function get_term_memoizer returns a function term which could be called in the following way to compute this term:\n\nterm((CE * (CẼ+Cn) \\ d[:E])), [i], j, k)\n\n(note that the fact that l[i] is not a unit vector is specified by putting the [i] index in brackets). \n\nAdditionally, all of these terms are symmetric in their indices, i.e. in (i,j,k) in this case. The term function is smart about this, and is memoized so that each unique set of indices is only computed once. This leads to a pretty drastic speedup for terms with many indices like those that arize in the EE and EB normalizations, and lets us write code which is both clear and fast without having to think too hard about these symmetries.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.gmres-Tuple{Any,Any}","page":"API","title":"CMBLensing.gmres","text":"gmres(A, b; maxiter, Pl=I)\n\nSolve A \\ b with maxiter iterations of the generalized minimal residual algorithm. Pl is a left-preconditioner which should approximate inv(A). \n\nNote: the implemenation is memory inefficient and uses O(n * maxiter) memory, where n,n=size(A) (may not be a big deal for small maxiter), although is totally generic and works with CPU or GPU and dense or sparse matrices, unlike IterativeSolver's gmres.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.grid_and_sample-Tuple{Function,AbstractArray{T,1} where T}","page":"API","title":"CMBLensing.grid_and_sample","text":"grid_and_sample(lnP::Function; range::NamedTuple; progress=false, nsamples=1)\n\nInterpolate the log pdf lnP with support on range, and return  the integrated log pdf as well nsamples samples (drawn via inverse transform sampling)\n\nlnP should either accept a NamedTuple argument and range should be a NamedTuple mapping those same names to range objects specifying where to evaluate lnP, e.g.:\n\ngrid_and_sample(nt->-(nt.x^2+nt.y^2)/2, (x=range(-3,3,length=100),y=range(-3,3,length=100)))\n\nor lnP should accept a single scalar argument and range should be directly the range for this variable:\n\ngrid_and_sample(x->-x^2/2, range(-3,3,length=100))\n\nThe return value is (lnP, samples, Px) where lnP is an interpolated/smoothed log PDF which can be evaluated anywhere within the original range, Px are sampled points of the original PDF, and samples is a NamedTuple giving the Monte-Carlo samples of each of the parameters.\n\n(Note: only 1D sampling is currently implemented, but 2D like in the example above is planned)\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.paren_errors-Tuple{Any,Any}","page":"API","title":"CMBLensing.paren_errors","text":"paren_errors(μ, σ; N_in_paren=2)\n\nGet a string represntation of μ ± σ in \"parenthesis\" format, e.g. 1.234 ± 0.012 becomes 1.234(12).\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.rfft2vec-Tuple{AbstractArray{T,2} where T}","page":"API","title":"CMBLensing.rfft2vec","text":"Convert a matrix A which is the output of a real FFT to a real vector, keeping only unqiue real/imaginary entries of A\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.safe_pyimport-Tuple{Any}","page":"API","title":"CMBLensing.safe_pyimport","text":"safe_pyimport(s)\n\nLike pyimport, but if s fails to import, instead of an error right away, the error will be thrown the first time the user tries to access the contents of the module.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.unfold-Tuple{AbstractArray{#s25,3} where #s25<:Complex}","page":"API","title":"CMBLensing.unfold","text":"Convert an M×N matrix (with M=N÷2+1) which is the output a real FFT to a full N×N one via symmetries.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.vec2rfft-Tuple{AbstractArray{#s13,1} where #s13<:Real}","page":"API","title":"CMBLensing.vec2rfft","text":"Convert a vector produced by rfft2vec back into a complex matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.Σ-Tuple{Field,Any}","page":"API","title":"CMBLensing.Σ","text":"Σ(ϕ::Field,  ds; conjgrad_kwargs=())\nΣ(Lϕ,        ds; conjgrad_kwargs=())\n\nAn operator for the data covariance, Cn + PMBLCfL'B'M'P', which can applied and inverted. conjgrad_kwargs are passed to the underlying call to conjugate_gradient.\n\n\n\n","category":"method"},{"location":"api/#LinearAlgebra.logdet-Tuple{Union{CMBLensing.ImplicitOp{B,S,P}, Diagonal{T,#s81} where T where #s81<:(Field{B,S,P,T} where T)} where P where S where B,Any}","page":"API","title":"LinearAlgebra.logdet","text":"logdet(L::LinOp, θ)\n\nIf L depends on θ, evaluates logdet(L(θ)) offset by its fiducial value at L(). Otherwise, returns 0.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.BatchedVals","page":"API","title":"CMBLensing.BatchedVals","text":"BatchedReal(::Vector{<:Real}) <: Real\n\nHolds a vector of real numbers and broadcasts algebraic operations over them, as well as broadcasting with batched FlatFields, but is itself a Real. \n\n\n\n","category":"type"},{"location":"api/#CMBLensing.@!-Tuple{Any}","page":"API","title":"CMBLensing.@!","text":"Rewrites @! x = f(args...) to x = f!(x,args...)\n\nSpecial cases for * and \\ forward to mul! and ldiv!, respectively.\n\n\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.@dict-Tuple","page":"API","title":"CMBLensing.@dict","text":"Pack some variables in a dictionary \n\n> x = 3\n> y = 4\n> @dict x y z=>5\nDict(:x=>3,:y=>4,:z=>5)\n\n\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.@invokelatest-Tuple{Any}","page":"API","title":"CMBLensing.@invokelatest","text":"@invokelatest expr...\n\nRewrites all non-broadcasted function calls anywhere within an expression to use Base.invokelatest. This means functions can be called that have a newer world age, at the price of making things non-inferrable.\n\n\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.@ondemand-Tuple{Any}","page":"API","title":"CMBLensing.@ondemand","text":"@ondemand(Package.function)(args...; kwargs...)\n@ondemand(Package.Submodule.function)(args...; kwargs...)\n\nJust like calling Package.function or Package.Submodule.function, but Package will be loaded on-demand if it is not already loaded. The call is no longer inferrable.\n\n\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.@subst-Tuple{Any}","page":"API","title":"CMBLensing.@subst","text":"@subst sum(x*$(y+1) for x=1:2)\n\nbecomes\n\nlet tmp=(y+1)\n    sum(x*tmp for x=1:2)\nend\n\nto aid in writing clear/succinct code that doesn't recompute things unnecessarily.\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.@sym_memo-Tuple{Any}","page":"API","title":"CMBLensing.@sym_memo","text":"# symmetric in any of its final arguments except for bar:\n@sym_memo foo(bar, @sym(args...)) = <body> \n# symmetric in (i,j), but not baz\n@sym_memo foo(baz, @sym(i, j)) = <body>\n\nThe @sym_memo macro should be applied to a definition of a function which is symmetric in some of its arguments. The arguments in which its symmetric are specified by being wrapping them in @sym, and they must come at the very end. The resulting function will be memoized and permutations of the arguments which are equal due to symmetry will only be computed once.\n\n\n\n\n\n","category":"macro"},{"location":"api/#CMBLensing.FFTW_NUM_THREADS","page":"API","title":"CMBLensing.FFTW_NUM_THREADS","text":"The number of threads used by FFTW for CPU FFTs (default is the environment variable FFTW_NUM_THREADS, or if that is not specified its Sys.CPU_THREADS÷2). This must be set before creating any FlatField objects.\n\n\n\n\n\n","category":"constant"},{"location":"api/#CMBLensing.FFTW_TIMELIMIT","page":"API","title":"CMBLensing.FFTW_TIMELIMIT","text":"Time-limit for FFT planning on CPU (default: 5 seconds). This must be set before creating any FlatField objects.\n\n\n\n\n\n","category":"constant"},{"location":"02_posterior/#The-Lensing-Posterior-1","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"At its heart, CMBLensing.jl is centered around the \"CMB lensing posterior\". We work with both the \"joint posterior\", which is joint over all variables,","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" mathcalP(fphithetad) ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"or the \"marginal posterior\", ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" mathcalP(phithetad) equiv int  mathcalDf  mathcalP(fphithetad) ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"which is simply the joint posterior analytically marginalized over f. Here,","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"f are the CMB fields (T/Q/U),\nphi is the lensing potential,\ntheta are any cosmological parameters,\nd is the data.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"The default data model which is assumed, which is generally flexible enough to handle real experiments (but can be customized), is:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" d =  mathbbA  mathbbL(phi)  f + n ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"where","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" mathbbA = mathbbP  mathbbM  mathbbB ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"and ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"mathbbL(phi) is the lensing operation\nmathbbB is an instrumental transfer function or \"beam\"\nmathbbM is a user-chosen mask\nmathbbP is a pixelization operation which allows one to estimate f on a higher resolution than the data\nn is the instrumental noise. ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Given this model, the joint posterior (up to an unimportant normalization constant) is:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" \n-2lnmathcalP(fphithetad) = fracbig(d - mathbbA  mathbbL(phi)  fbig)^2mathbbC_n\n+ fracf^2mathbbC_f(theta) + fracphi^2C_phi(theta) + logdet mathbbC_f(theta) + logdet C_phi(theta)\n","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"and the marginal posterior is:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" \n-2lnmathcalP(phithetad) = fracd^2mathbbSigma_d(phitheta) + fracphi^2C_phi(theta) + logdet mathbbSigma_d(phitheta) + logdet C_phi(theta)\n","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"where","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"\nSigma_d = mathbbA  mathbbL(phi)  mathbbC_f(theta)  mathbbL(phi)^dagger mathbbA^dagger + mathbbC_n\n","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"and","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"mathbbC_n is the noise covariance\nmathbbC_f is the CMB covariance (i.e. the CMB T, E, and B C_ell's)\nmathbbC_phi is the lensing potential covariance (i.e. C_ell^phiphi)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"and we have used the slighly sloppy notation x^2mathbbC to mean x^dagger mathbbC^-1 x.","category":"page"},{"location":"02_posterior/#Posterior-basics-1","page":"The Lensing Posterior","title":"Posterior basics","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"using CMBLensing, PyPlot","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"CMBLensing uses the function lnP to compute the log of the joint posterior probability. ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"To evaluate this posterior, we need the arguments of the probability distribution, f, phi, and theta. We also need the data d and host of other operators and covariances which enter the expressions above, which CMBLensing stores in a DataSet object.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"First lets load up some simulated data. The function load_sim handles constructing a DataSet and is the recommended way to create the various fields and covariances needed. In this case, let's use 1muK-arcmin noise and a border mask:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"@unpack f, f̃, ϕ, ds, L = load_sim(\n    θpix      = 2,\n    Nside     = 256,\n    T         = Float64,\n    pol       = :P,\n    μKarcminT = 1,\n    L         = LenseFlow{RK4Solver{10}},\n    seed      = 0,\n    pixel_mask_kwargs = (edge_padding_deg=1, apodization_deg=0, num_ptsrcs=0),\n    bandpass_mask     = LowPass(5000)\n);","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"The DataSet object, by convention called ds, stores all the aforementioned quantities:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"fieldnames(typeof(ds))","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(:d, :Cϕ, :Cf, :Cf̃, :Cn, :Cn̂, :M, :M̂, :B, :B̂, :D, :G, :P, :L)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"For example, the data is:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"plot(ds.d);","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(Image: png)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Or the diagonal of the mathbbC_f operator:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"plot(diag(ds.Cf), which=[:El :Bl])","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(Image: png)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"We can now evaluate the posterior, for example at the true f and phi:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"-2*lnP(0, f, ϕ, ds)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"328174.59378161386","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"The first argument, in this case 0, indicates the parameterization. We can compute the posterior given a couple of different parametrizations,","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"The unlensed parametrization, mathcalP(fphithetad)\nThe lensed parametrization, mathcalP(tilde fphithetad) where tilde f are the lensed CMB fields.\nThe mixed parametrization, mathcalP(f^prime phi^prime theta  d) where f^prime and phi^prime are the mixed CMB fields and lensing potential (this is a parametrization which attemps to decorrelate the posterior as much as possible; you may want to read our paper which describes this in more detail).","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"For the unlensed and lensed parametrizations, pass 0 and 1 as the first argument  (these refer to auxillary \"time\" variable in the LenseFlow expansion, f(x+tnablaphi); at t=0 we have the unlensed field, and at t=1 we have the lensed field). If we use the lensed parametrization, then the f argument to the function is expected to be the lensed field. The mixed parametrization can be specified by passing :mix as the first argment, in which case the f argument is expected to be the mixed field.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"For example, the following is the same point in parameter space that we evaluated above, just in a different parametrization (any differences to the above value are numerical):","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"-2*lnP(1, L(ϕ)*f, ϕ, ds)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"328173.7759184737","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"We expect minus twice the posterior evaluated at the truth to be distributed like a chi^2 distribution where the degrees of freedom equals the number of pixels in d, f, and phi (i.e. in each of the three Gaussian terms in the posterior). Since these maps are 256x256 and d and f have both Q and U maps, this is:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(2+2+1)*256^2","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"327680","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"which the previous result is within a few sigma of.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Above, we didn't specify any cosmological parameters, theta. Because of that, they were fixed at their fiducial values (i.e. the fiducial values which generated the simulated data in the call to load_sim earlier). Current only two parameters can be varied, r (tensor-to-scalar ratio), and A_phi (the amplitude of C_ell^phi phi). They can be specified as follows, with non-specified parameters left at their fiducial:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"-2*lnP(0, f, ϕ, (Aϕ=1.1,), ds)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"328450.2971765219","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"You can see the slight change compared to what we got above. We can even compute a whole slice through the posterior along A_phi:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Aϕs = range(0.5,1.5,length=50)\nplot(Aϕs, [lnP(0, f, ϕ, (Aϕ=Aϕ,), ds) for Aϕ in Aϕs])\nxlabel(raw\"$A_\\phi$\")\nylabel(raw\"$\\mathcal{P}(f_{\\rm true}, \\phi_{\\rm true}, A_\\phi\\,|\\,d)$\");","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(Image: png)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"sys:1: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. In future versions, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = copy.copy(mpl.cm.get_cmap(\"viridis\"))\nsys:1: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.\nSubstituting symbol P from STIXNonUnicode\nSubstituting symbol P from STIXNonUnicode","category":"page"},{"location":"02_posterior/#Wiener-filtering-1","page":"The Lensing Posterior","title":"Wiener filtering","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"If we fix phi and theta then maximize the joint posterior, mathcalP(fphithetad), over f, we get","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"\nhat f_rm wf = big mathbbC_f(theta)^-1 + mathbbL(phi)^dagger mathbbA^daggermathbbC_n^-1mathbbA  mathbbL(phi) big^-1 mathbbL(phi)^dagger mathbbA^daggermathbbC_n^-1d\n","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"This is simply the Wiener filter of the data given a signal covariance which includes correlations induced by phi, and we can compute it by inverting the operator in brackets above with e.g. conjugate gradient. ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"In CMBLensing.jl, the argmaxf_lnP function performs this task. Its arguments are similar to lnP,","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"f_wf = argmaxf_lnP(ϕ, (Aϕ=1,), ds, conjgrad_kwargs=(tol=1e-1, progress=true));","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"\u001b[32mConjugate Gradient: 100%|███████████████████████████████| Time: 0:00:15\u001b[39m","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Wiener filtering effectively delenses the data by a given phi. Here we are Wiener filtering at the true phi, so this is perfect delensing. Note below the large amount of B mode power in the data, as well as the aliasing near the border mask, and how this is removed in the Wiener filtered B, which visually is tracing the true B map up to the level of the noise.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"plot([ds.d, f_wf, f], title=[\"data \", \"Wiener filtered \", \"true \"] .* [\"E\" \"B\"]);","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(Image: png)","category":"page"},{"location":"02_posterior/#Posterior-gradients-1","page":"The Lensing Posterior","title":"Posterior gradients","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Fundamental to maximization and sampling algorithms in high dimensions are gradients of the posterior. CMBLensing.jl uses the interface provided by the automatic differentiation library Zygote to compute these gradients.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"using Zygote","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Zygote provides the gradient function, which takes a function for which to evaluate the gradient as the first argument, and the value at which to evaluate the gradient as the second argument. For example:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"gradient(x->3x^2+2x, 1)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(8,)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Gradients of the CMB lensing posterior work in exactly the same way. For example, to take the gradient with respect to phi in the lensed parametrization, where we fix f to the Wiener filter computed above and evaluate the gradient at phi=0, we can do:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"gϕ = gradient(ϕ -> lnP(1,f_wf,ϕ,ds), 0ϕ)[1];","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Here's what this gradient looks like multiplied by mathbbC_phi. This is actually the first gradient step in the iterative joint maximum a posteriori estimation. The feature you see below is the mean-field in this estimate due to the mask:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"plot(ds.Cϕ*gϕ)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(Image: png)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"You are free to manipulate the fields inside of the function whose gradient is being taken, and Zygote will automatically propagate the chain rule for you:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"gradient(ϕ -> -2lnP(1,f_wf,3ϕ,ds), 0ϕ)[1] ≈ -6 * gradient(ϕ -> lnP(1,f_wf,ϕ,ds), 0ϕ)[1]","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"true","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Automatic differentiation with respect to any and all arguments of lnP works, including the cosmological parameters:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"gradient(Aϕ -> lnP(1,f_wf,ϕ,(Aϕ=Aϕ,),ds), 1)[1]","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"69.97081212379999","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Currently Zygote is working with many (but not all) operations that you can do to fields. If you run into things which Zygote is not able to differentiate successfully (generally you'll get some error), please feel free to file an Issue with CMBLensing.jl.","category":"page"},{"location":"02_posterior/#Marginal-posterior-1","page":"The Lensing Posterior","title":"Marginal posterior","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"work in progress","category":"page"},{"location":"03_joint_MAP_example/#MAP-estimation-1","page":"MAP estimation","title":"MAP estimation","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Here, we give an example of how to compute the joint maximum a posteriori (MAP) estimate of the CMB temperature and polarization fields, f, and the lensing potential, phi.","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"using CMBLensing, PyPlot","category":"page"},{"location":"03_joint_MAP_example/#Compute-spectra-1","page":"MAP estimation","title":"Compute spectra","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"First, we compute the fiducial CMB power spectra which generate our simulated data,","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Cℓ = camb(r=0.05);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Next, we chose the noise power-spectra:","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Cℓn = noiseCℓs(μKarcminT=1, ℓknee=100);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Plot these up for reference,","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"loglog(Cℓ.total.BB,c=\"C0\")\nloglog(Cℓ.unlensed_total.BB,\"--\",c=\"C0\")\nloglog(Cℓ.total.EE,c=\"C1\")\nloglog(Cℓ.unlensed_total.EE,\"--\",c=\"C1\")\nloglog(Cℓn.BB,\"k:\")\nlegend([\"lensed B\",\"unlensed B\",\"lensed E\",\"unlensed E\", \"noise (beam not deconvolved)\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#Configure-the-type-of-data-1","page":"MAP estimation","title":"Configure the type of data","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"These describe the setup of the simulated data we are going to work with (and can be changed in this notebook),","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"θpix  = 3        # pixel size in arcmin\nNside = 128      # number of pixels per side in the map\npol   = :P       # type of data to use (can be :T, :P, or :TP)\nT     = Float32  # data type (Float32 is ~2 as fast as Float64);","category":"page"},{"location":"03_joint_MAP_example/#Generate-simulated-data-1","page":"MAP estimation","title":"Generate simulated data","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"With these defined, the following generates the simulated data and returns the true unlensed and lensed CMB fields, f and f̃ ,and the true lensing potential, ϕ, as well as a number of other quantities stored in the \"DataSet\" object ds. ","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"@unpack f, f̃, ϕ, ds = load_sim(\n    seed = 3,\n    Cℓ = Cℓ,\n    Cℓn = Cℓn,\n    θpix = θpix,\n    T = T,\n    Nside = Nside,\n    pol = pol,\n)\n\n@unpack Cf, Cϕ = ds;","category":"page"},{"location":"03_joint_MAP_example/#Examine-simulated-data-1","page":"MAP estimation","title":"Examine simulated data","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"The true phi map,","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"plot(ϕ, title = raw\"true $\\phi$\");","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"The \"true\" unlensed field, f,","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"plot(f, title = \"true unlensed \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"And the \"true\" lensed field,","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"plot(LenseFlow(ϕ)*f, title = \"true lensed \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"The data (stored in the ds object) is basically f̃ with a beam applied plus a sample of the noise,","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"plot(ds.d, title = \"data \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#Run-the-optimizer-1","page":"MAP estimation","title":"Run the optimizer","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Now we compute the maximum of the joint posterior, mathcalPbig(f phi bigdbig)","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"fbf, ϕbf, tr = MAP_joint(ds, nsteps=30, progress=true, αmax=0.1);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"\u001b[32mMAP_joint: 100%|████████████████████████████████████████| Time: 0:01:03\u001b[39m\n\u001b[34m  step:  30\u001b[39m\n\u001b[34m  χ²:    33013.92\u001b[39m\n\u001b[34m  Ncg:   6\u001b[39m\n\u001b[34m  α:     0.056786504\u001b[39m","category":"page"},{"location":"03_joint_MAP_example/#Examine-results-1","page":"MAP estimation","title":"Examine results","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"The expected value of the final best-fit chi^2 (=-2log mathcalP) is given by the number degrees of freedom in the data, i.e. the total number of pixels in T and/or EB.","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"χ² = -2tr[end][:lnPcur]","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"33013.92f0","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"dof = length(Map(f)[:])","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"32768","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Here's how far away our final chi^2 is from this expectation, in units of sigma. We expect this should be somewhere in the range (-3,3) for about 99.7% of simulated datasets.","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(χ² - dof)/sqrt(2dof)","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"0.96063232421875","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Here's the best-fit phi relative to the truth,","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"plot(10^6*[ϕ ϕbf], title=[\"true\" \"best-fit\"] .* raw\" $\\phi$\", vlim=17);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"Here is the difference in terms of the power spectra. Note the best-fit has high-ell power suppressed, like a Wiener filter solution (in fact what we're doing here is akin to a non-linear Wiener filter). In the high S/N region (elllesssim1000), the difference is approixmately equal to the noise, which you can see is almost two orders of magnitude below the signal.","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"loglog(ℓ⁴ * Cℓ.total.ϕϕ, \"k\")\nloglog(get_ℓ⁴Cℓ(ϕ))\nloglog(get_ℓ⁴Cℓ(ϕbf))\nloglog(get_ℓ⁴Cℓ(ϕbf-ϕ))\nxlim(80,3000)\nylim(5e-9,2e-6)\nlegend([\"theory\",raw\"true $\\phi$\", raw\"best-fit $\\phi$\", \"difference\"])\nxlabel(raw\"$\\ell$\")\nylabel(raw\"$\\ell^4 C_\\ell$\");","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"The best-fit unlensed fields relative to truth,","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"plot([f,fbf], title = [\"true\", \"best-fit\"] .* \" unlensed \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"The best-fit lensed field (bottom row) relative to truth (top row),","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"plot([f̃, LenseFlow(ϕbf)*fbf], title = [\"true\", \"best-fit\"] .* \" lensed \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"MAP estimation","title":"MAP estimation","text":"(Image: png)","category":"page"},{"location":"04_from_python/#Calling-from-Python-1","page":"Calling from Python","title":"Calling from Python","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Calling Julia and CMBLensing.jl directly from Python is very transparent. This is made possible by the PyJulia package. You can install it into your Python environment with, e.g.:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"$ pip install --user julia","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Important: If your Python executable is statically-linked (this is quite often the case, e.g. its the default on Ubuntu and Conda) you need one extra step. Basically, instead of running python or ipython at the command line to launch your interpreter, run python-jl  or python-jl -m IPython, respectively. If you use Jupyter, you'll need to edit your kernel.json file (you can find its location via jupyter kernelspec list) and change it to use python-jl.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The wrapper script python-jl does some special initializion but otherwise drops you into the Python/IPython interpreter that you are familiar with. ","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The PyJulia docs also give instructions on how to install a dynamically-linked Python executable which is the most ideal solution, and only slightly more work than above.","category":"page"},{"location":"04_from_python/#Basics-of-calling-Julia-1","page":"Calling from Python","title":"Basics of calling Julia","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Once PyJulia is installed, you can access any Julia package Foo from the Python package julia.Foo, and everything pretty much works the same.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"import julia.Base","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"julia.Base.cos(1) # <--- this is Julia's cosine function","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"0.5403023058681398","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"You can also run arbitrary Julia code with the %julia cell magic (this is helpful if you want to use Julia language features or syntax which don't exist in Python):","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%load_ext julia.magic","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Initializing Julia interpreter. This may take some time...","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"For example, 1:10 is not valid Python syntax, but we can do:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%julia 1:10","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"range(1, 11)","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The cell magic lets you interpolate values from Python into the Julia expression, which can be a convenient way to pass values back and forth:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"x = %julia 1 + 2","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%julia 2 * $x","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"6","category":"page"},{"location":"04_from_python/#Calling-CMBLensing.jl-1","page":"Calling from Python","title":"Calling CMBLensing.jl","text":"","category":"section"},{"location":"04_from_python/#Via-magic-1","page":"Calling from Python","title":"Via magic","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The most robust way to call CMBLensing.jl from Python is just to wrap everything in Julia magic and interpolate things back and forth as-needed. Lets try and follow the Lensing a flat-sky map example from Python. First, we load the package:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%%julia\nusing CMBLensing","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Next, we simulate some data:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%%julia\n@unpack f,ϕ = load_sim(\n    θpix  = 2,\n    Nside = 256,\n    T     = Float32,\n    pol   = :I\n);","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Similarly, the rest of the commands from that example will work in Python if just called via Julia magic.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"At any point, you can do whatever you'd like with any of the results stored in Julia variables, e.g. transferring the simulated maps back as Python arrays,","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"f = %julia f[:Ix]\nf","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"array([[-112.6528  , -114.91115 , -120.55233 , ...,  -89.58751 ,\n         -97.98692 , -108.0124  ],\n       [ -87.357605, -101.37926 , -121.60947 , ...,  -59.65308 ,\n         -64.58674 ,  -75.888596],\n       [ -70.67357 , -101.02855 , -129.52647 , ...,  -36.351147,\n         -31.154274,  -44.426506],\n       ...,\n       [-125.49989 , -115.260925,  -97.198784, ..., -129.6213  ,\n        -129.9509  , -129.02682 ],\n       [-128.58932 , -120.68036 , -108.27969 , ..., -128.24475 ,\n        -128.85506 , -130.74634 ],\n       [-126.98642 , -124.42652 , -118.82582 , ..., -113.661964,\n        -118.757355, -125.7666  ]], dtype=float32)","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"You can also pass variables back to Julia, e.g.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%julia g = FlatMap($f);","category":"page"},{"location":"04_from_python/#Directly-1","page":"Calling from Python","title":"Directly","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"You can also call Julia directly without magic, which sometimes offers more flexibility, although has some limitations. ","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"To do so, first import CMBLensing. into Python. In Julia, using CMBLensing imports all of the CMBLensing symbols into the current namespace. In Python this is:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"from julia.CMBLensing import *","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"If we want to call load_sim as before, we must take into account a few things:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"You won't be able to use the @unpack macro since macros on arbitrary code don't exist in Python.\nFloat32 isn't imported into Python by default, so you'll need to specify the module. \nThe :P is invalid syntax in Python, you should use a string \"P\" instead. ","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Given all of that, the call will look like:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"sim = load_sim(\n    θpix  = 2, \n    Nside = 256, \n    T     = julia.Base.Float32, \n    pol   = \"P\"\n)","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"If we wish to grab the lensing potential from the result, there's an additional consideration. Python does not differentiate between the characters ϕ (\\phi) and φ (\\varphi), and maps both of them back to φ (\\varphi) in Julia, which unfortunately is the wrong one for CMBLensing (which instead makes extensive use of the variable name ϕ (\\phi)). Thus, calling sim.ϕ from Python does not work. Instead, we have to do that part in Julia:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"ϕ = %julia $sim.ϕ","category":"page"},{"location":"04_from_python/#Plotting-1","page":"Calling from Python","title":"Plotting","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"To plot, we need to use the plot function from Julia's PyPlot, since this will know about plotting CMBLensing objects. ","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"from julia.PyPlot import plot","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%matplotlib inline","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"plot(ϕ);","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"(Image: png)","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"For non-CMBLensing objects, this plot function will just pass-through to matplotlib, so will not affect affect your session otherwise.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"plot([1,2,3]);","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"(Image: png)","category":"page"},{"location":"05_field_basics/#Field-Basics-1","page":"Field Basics","title":"Field Basics","text":"","category":"section"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"using CMBLensing","category":"page"},{"location":"05_field_basics/#Base-Fields-1","page":"Field Basics","title":"Base Fields","text":"","category":"section"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"The basic building blocks of CMBLensing.jl are CMB \"fields\", like temperature, Q or U polarization, or the lensing potential phi. These types are all encompassed by the abstract type Field, with some concrete examples including FlatMap for a flat-sky map projection, or FlatQUMap for Q/U polarization, etc...","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Flat fields are just thin wrappers around Julia arrays, e.g.","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Ix = rand(2,2)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"2×2 Array{Float64,2}:\n 0.45852   0.728466\n 0.354565  0.993076","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f = FlatMap(Ix)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.45852017850132487\n 0.35456539512078744\n 0.7284662553104302\n 0.9930760164166708","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"When displayed, you can see the pixels in the 2x2 map have been splayed out into a length-4 array. This is intentional, as even though the maps themselves are two-dimensional, it is extremely useful conceptually to think of fields as vectors (which they are, in fact, as they form an abstract vector space). This tie to vector spaces is deeply rooted in CMBLensing, to the extent that Field objects are a subtype of Julia's own AbstractVector type, ","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f isa AbstractVector","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"true","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"The data itself, however, is still stored as the original 2x2 matrix, and can be accessed as follows,","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f.Ix","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"2×2 Array{Float64,2}:\n 0.45852   0.728466\n 0.354565  0.993076","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"But since Fields are vectors, they can be tranposed,","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f'","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"1×4 LinearAlgebra.Adjoint{Float64,FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}}:\n 0.45852  0.354565  0.728466  0.993076","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"inner products can be computed,","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f' * f","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"1.8528204330180515","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"and they can be added with each other as well as multiplied by scalars,","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"2*f+f","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 1.3755605355039746\n 1.0636961853623623\n 2.1853987659312906\n 2.979228049250012","category":"page"},{"location":"05_field_basics/#Diagonal-operators-1","page":"Field Basics","title":"Diagonal operators","text":"","category":"section"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Vector spaces have linear operators which act on the vectors. Linear operators correpsond to matrices, thus for a map with N total pixels, a general linear operator would be an N-by-N matrix, which for even modest map sizes becomes far too large to actually store. Thus, an important class of linear operators are ones which are diagonal, since these can actually be stored. CMBLensing uses Julia's builtin Diagonal to represent these. Diagonal(f) takes a vector f and puts it on the diagonal of the matrix:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Diagonal(f)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4×4 Diagonal{Float64,FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}}:\n 0.45852   ⋅         ⋅         ⋅ \n  ⋅       0.354565   ⋅         ⋅ \n  ⋅        ⋅        0.728466   ⋅ \n  ⋅        ⋅         ⋅        0.993076","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Multiplying this operator by the original map is then a matrix-vector product:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Diagonal(f) * f","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.2102407540928868\n 0.1257166194171601\n 0.5306630851260009\n 0.9861999743820037","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Note that this is also equal to the the pointwise multiplication of f with itself:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f .* f","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.2102407540928868\n 0.1257166194171601\n 0.5306630851260009\n 0.9861999743820037","category":"page"},{"location":"05_field_basics/#Field-Tuples-1","page":"Field Basics","title":"Field Tuples","text":"","category":"section"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"You can put Fields together into tuples. For example, ","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"a = FlatMap(rand(2,2))\nb = FlatMap(rand(2,2));","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"FieldTuple(a,b)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"8-element Field2Tuple{CMBLensing.BasisTuple{Tuple{Map,Map}}, Float64}:\n 0.5125295861176429\n 0.8314617068697485\n 0.5899014860091232\n 0.20824815512468065\n 0.1271758187533274\n 0.3774892390865885\n 0.8603738157291632\n 0.7382713137015819","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"The components can also have names:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"ft = FieldTuple(a=a, b=b)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"8-element Field2Tuple{(:a, :b), CMBLensing.BasisTuple{Tuple{Map,Map}}, Float64}:\n 0.5125295861176429\n 0.8314617068697485\n 0.5899014860091232\n 0.20824815512468065\n 0.1271758187533274\n 0.3774892390865885\n 0.8603738157291632\n 0.7382713137015819","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"which can be accessed later:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"ft.a","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.5125295861176429\n 0.8314617068697485\n 0.5899014860091232\n 0.20824815512468065","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"FieldTuples have all of the same behavior of individual fields. Indeed, spin fields like QU or IQU are simply special FieldTuples:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"fqu = FlatQUMap(a,b)\nfqu isa FieldTuple","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"true","category":"page"},{"location":"05_field_basics/#Field-Vectors-1","page":"Field Basics","title":"Field Vectors","text":"","category":"section"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"in progress","category":"page"},{"location":"05_field_basics/#Basis-Conversion-1","page":"Field Basics","title":"Basis Conversion","text":"","category":"section"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"All fields are tagged as to which basis they are stored in. You can convert them to other bases by calling the basis type on them:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.45852017850132487\n 0.35456539512078744\n 0.7284662553104302\n 0.9930760164166708","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f′ = Fourier(f)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatFourier{2×2 map, 1′ pixels, fourier∂, Array{Complex{Float64},2}}:\n   2.5346278453492133 + 0.0im\n -0.16065497772570314 + 0.0im\n  -0.9084566981049886 + 0.0im\n    0.368564544486778 + 0.0im","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Basis conversion is usually done automatically for you. E.g. here f′ is automatically converted to a FlatMap before addition:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f + f′","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.9170403570026497\n 0.7091307902415749\n 1.4569325106208604\n 1.9861520328333415","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"A key feature of Diagonal operators is they convert the field they are acting on to the right basis before multiplication:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Diagonal(f) * f′","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.2102407540928868\n 0.1257166194171601\n 0.5306630851260009\n 0.9861999743820037","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"A FlatMap times a FlatFourier doesn't have a natural linear algebra meaning so its an error:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f * f′","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"MethodError: no method matching *(::FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}, ::FlatFourier{2×2 map, 1′ pixels, fourier∂, Array{Complex{Float64},2}})\nClosest candidates are:\n  *(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  *(!Matched::ChainRulesCore.DoesNotExist, ::Any) at /home/cosmo/.julia/packages/ChainRulesCore/Q5Nrj/src/differential_arithmetic.jl:23\n  *(!Matched::ChainRulesCore.One, ::Any) at /home/cosmo/.julia/packages/ChainRulesCore/Q5Nrj/src/differential_arithmetic.jl:68\n  ...\n\n\n\nStacktrace:\n\n [1] top-level scope at In[21]:1","category":"page"},{"location":"05_field_basics/#Properties-and-indices-1","page":"Field Basics","title":"Properties and indices","text":"","category":"section"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"FlatMap and FlatFourier can be indexed directly like arrays. If given 1D indices, this is the index into the vector representation:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.45852017850132487\n 0.35456539512078744\n 0.7284662553104302\n 0.9930760164166708","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f[1], f[2], f[3], f[4]","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"(0.45852017850132487, 0.35456539512078744, 0.7284662553104302, 0.9930760164166708)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f[5]","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"BoundsError: attempt to access 2×2 Array{Float64,2} at index [5]\n\n\n\nStacktrace:\n\n [1] getindex at ./array.jl:787 [inlined]\n\n [2] getindex(::FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}, ::Int64) at /home/cosmo/CMBLensing/src/flat_s0.jl:44\n\n [3] top-level scope at In[24]:1","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Or with a 2D index, this indexes directly into the 2D map:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f[1,1], f[2,1], f[1,2], f[2,2]","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"(0.45852017850132487, 0.35456539512078744, 0.7284662553104302, 0.9930760164166708)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Note: there is no overhead to indexing f in this way as compared to working directly on the underlying array.","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"For other fields which are built on FieldTuples, 1D indexing will instead index the tuple indices:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"ft","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"8-element Field2Tuple{(:a, :b), CMBLensing.BasisTuple{Tuple{Map,Map}}, Float64}:\n 0.5125295861176429\n 0.8314617068697485\n 0.5899014860091232\n 0.20824815512468065\n 0.1271758187533274\n 0.3774892390865885\n 0.8603738157291632\n 0.7382713137015819","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"ft[1]","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.5125295861176429\n 0.8314617068697485\n 0.5899014860091232\n 0.20824815512468065","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"ft[2]","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.1271758187533274\n 0.3774892390865885\n 0.8603738157291632\n 0.7382713137015819","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"ft[3]","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"BoundsError: attempt to access NamedTuple{(:a, :b),Tuple{FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}},FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}}}\n  at index [3]\n\n\n\nStacktrace:\n\n [1] getindex at ./namedtuple.jl:94 [inlined]\n\n [2] getindex(::Field2Tuple{(:a, :b), CMBLensing.BasisTuple{Tuple{Map,Map}}, Float64}, ::Int64) at /home/cosmo/CMBLensing/src/field_tuples.jl:47\n\n [3] top-level scope at In[29]:1","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"To get the underlying data arrays, use the object's properties:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f.Ix","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"2×2 Array{Float64,2}:\n 0.45852   0.728466\n 0.354565  0.993076","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"You can always find out what properties are available by typing f.<Tab>. For example, if you typed ft then hit <Tab> you'd get:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"ft |> propertynames","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"(:fs, :a, :b)","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"For a FieldTuple like the FlatQUMap object, fqu, you can get each individual Q or U field:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"fqu.Q","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"4-element FlatMap{2×2 map, 1′ pixels, fourier∂, Array{Float64,2}}:\n 0.5125295861176429\n 0.8314617068697485\n 0.5899014860091232\n 0.20824815512468065","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Or fqu.Qx which is shorthand for fqu.Q.Ix:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"fqu.Q.Ix === fqu.Qx","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"true","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"If you convert f to Fourier space, it would have the Il property to get the Fourier coefficients of the I component:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Fourier(f).Il","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"2×2 Array{Complex{Float64},2}:\n   2.53463+0.0im  -0.908457+0.0im\n -0.160655+0.0im   0.368565+0.0im","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"For convenience, you can index fields with brackets [] and any necessary conversions will be done automatically:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"f[:Il]","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"2×2 Array{Complex{Float64},2}:\n   2.53463+0.0im  -0.908457+0.0im\n -0.160655+0.0im   0.368565+0.0im","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"This works between any bases. For example. fqu is originally QUMap but we can convert to EBFourier and get the El coefficients:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"fqu[:El]","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"2×2 Array{Complex{Float64},2}:\n  -2.14214-0.0im  -0.545842+0.0im\n 0.0627212+0.0im   0.372416+0.0im","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"The general rule to keep in mind for these two ways of accessing the underlying data is:","category":"page"},{"location":"05_field_basics/#","page":"Field Basics","title":"Field Basics","text":"Properties (i.e. f.Ix) are type-stable and get you the underlying data arrays, even recursively from special FieldTuples like FlatQUMap, etc... If these arrays are modified, they affect the original field.\nIndices (i.e. f[:Ix]) are not type-stable, and may or may not be one of the underlying data arrays (because a basis conversion may have been performed). They should be used for getting (not setting) data, and in non-performance-critical code. ","category":"page"},{"location":"#CMBLensing.jl-1","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"(Image: ) (Image: ) (Image: Binder)  (Image: ) (Image: )","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"CMBLensing.jl is a next-generation tool for analysis of the lensed Cosmic Microwave Background. It is written in Julia and transparently callable from Python.","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"At its heart, CMBLensing.jl maximizes or samples the Bayesian posterior for the CMB lensing problem. It also contains tools to quickly manipulate and process CMB maps, set up modified posteriors, and take gradients using automatic differentation.","category":"page"},{"location":"#Highlights-1","page":"CMBLensing.jl","title":"Highlights","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Fully Nvidia GPU compatible (speedups over CPU are currently 3x-10x, depending on the problem size and hardware).\nAutomatic differentation (via Zygote.jl) provides for-free gradients of your custom posteriors.\nIncludes the following algorithms to lense a map:\nLenseFlow (Millea, Anderes, & Wandelt 2017)\nTaylens (Næss & Louis 2013)\nTaylor series expansion to any order\nBilinear interpolation\nMaximize and sample mathcalP(fphithetad), the joint maximum a posteriori estimate of the lensing potential, phi, the  temperature and/or polarization fields, f, and cosmological parameters, theta (Millea, Anderes, & Wandelt 2017, Millea, Anderes, & Wandelt 2020)\nMaximize mathcalP(phidtheta), i.e. the marginal maximum a posteriori estimate of the lensing potential, phi, at fixed cosmological parameters, theta (Carron & Lewis 2017)\nDo basic quadratic estimation of phi (Hu & Okamoto 2003)","category":"page"},{"location":"#Documentation-1","page":"CMBLensing.jl","title":"Documentation","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"The best place to get started is to read the documentation (which is a work-in-progress, but contains many useful examples). ","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Most of the pages in the documentation are Jupyter notebooks, and you can click the \"launch binder\" link at the top of each page to launch a Jupyterlab server running the notebook in your browser (courtesy of binder). ","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"You can also clone the repostiory and open the notebooks in docs/src if you want to run them locally (which will usually lead to higher performance). The notebooks are stored as .md files rather than .ipynb format. Its recommented to install Jupytext (pip install jupytext) and then you can run these .md directly from Jupyterlab by right-clicking on them and selecting Open With -> Notebook. Otherwise, run the script docs/make_notebooks.sh to convert the .md files to .ipynb which you can then open as desired. ","category":"page"},{"location":"#Installation-1","page":"CMBLensing.jl","title":"Installation","text":"","category":"section"},{"location":"#Requirements-1","page":"CMBLensing.jl","title":"Requirements","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Julia 1.3 or higher\n(optional) Python 3 + matplotlib (used for plotting)\n(optional) pycamb to generate C_ell's\n(optional) An Nvidia GPU and CuArrays for GPU support\n(optional) healpy for experimental curved sky support","category":"page"},{"location":"#Native-installation-1","page":"CMBLensing.jl","title":"Native installation","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"To install the Julia package locally, run:","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"pkg> add CMBLensing","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"(type ] at the Julia REPL to reach the pkg> prompt)","category":"page"},{"location":"#Docker-installation-1","page":"CMBLensing.jl","title":"Docker installation","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Also provided is a Docker container which includes a Jupyterlab server and all the recommended and optional dependencies to run and use CMBLensing.jl. Launch this container with:","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"git clone https://github.com/marius311/CMBLensing.jl.git\ncd CMBLensing.jl\ndocker-compose pull\ndocker-compose up","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"The first time you run this, it will automatically download the (~1Gb) container from the Docker hub. The command will prompt you with the URL which you should open in a browser to access the notebook.","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"To run the notebook on a different port than the default 8888, do PORT=1234 docker-compose up where 1234 is whatever port number you want.","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"You can also build the container locally by replacing docker-compose pull with docker-compose build above.","category":"page"}]
}
