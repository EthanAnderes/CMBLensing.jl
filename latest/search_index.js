var documenterSearchIndex = {"docs":
[{"location":"#CMBLensing.jl-1","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"(Image: ) (Image: Binder)","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"This repository contains tools written in Julia (and easily callable from Python) to analyze the gravitationally lensed Cosmic Microwave Background. ","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Some things this code can do:","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Lense flat-sky temperature and polarization maps using the following algorithms:\nTaylor series expansion to any order\nThe Taylens algorithm (Næss & Louis 2013)\nThe LenseFlow algorithm (Millea, Anderes, & Wandelt 2017)\nCompute the quadratic estimate of phi given some data (Hu & Okamoto 2003)\nCompute best-fit of mathcalP(fphid), i.e. the joint maximum a posteriori estimate of the lensing potential and CMB fields, and draw Monte-Carlo samples from this poterior, with the option to sample over cosmological parameters as well (Millea, Anderes, & Wandelt 2017)\nCompute best-fit of mathcalP(phid), i.e. the marginal maximum a posteriori estimate of the lensing potential (Carron & Lewis 2017)","category":"page"},{"location":"#Documentation-1","page":"CMBLensing.jl","title":"Documentation","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"The best place to get started is to read the documentation (which is very much a work-in-progress, many things this package can do are not documented yet, but are planned to be added soon). ","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Most of the pages in the documentation are Jupyter notebooks, and you can click the \"launch binder\" link at the top of each page to launch a Jupyterlab server running the notebook in your browser (courtesy of binder). You can also find the notebooks in this folder if you want to run them locally (which will usually lead to higher performance).","category":"page"},{"location":"#Installation-1","page":"CMBLensing.jl","title":"Installation","text":"","category":"section"},{"location":"#Requirements-1","page":"CMBLensing.jl","title":"Requirements","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Julia 1.0 or higher\nPython 3 + matplotlib (used for plotting)\n(recommended) pycamb to generate C_ell's\n(optional) healpy for experimental curved sky support","category":"page"},{"location":"#Native-installation-1","page":"CMBLensing.jl","title":"Native installation","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"To install the Julia package locally, run:","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"pkg> add https://github.com/marius311/CMBLensing.jl#master","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"(type ] at the Julia REPL to reach the pkg> prompt)","category":"page"},{"location":"#Docker-installation-1","page":"CMBLensing.jl","title":"Docker installation","text":"","category":"section"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"Also provided is a Docker container which includes a Jupyterlab server and all the recommended and optional dependencies to run and use CMBLensing.jl. Launch this container with:","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"git clone https://github.com/marius311/CMBLensing.jl.git\ncd CMBLensing.jl\ndocker-compose pull\ndocker-compose up","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"The first time you run this, it will automatically download the (~500Mb) container from the Docker hub. The command will prompt you with the URL which you should open in a browser to access the notebook.","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"To run the notebook on a different port than the default 8888, do PORT=1234 docker-compose up where 1234 is whatever port number you want.","category":"page"},{"location":"#","page":"CMBLensing.jl","title":"CMBLensing.jl","text":"You can also build the container locally by replacing docker-compose pull with docker-compose build above.","category":"page"},{"location":"01_lense_a_map/#Lensing-a-flat-map-1","page":"Lensing a flat map","title":"Lensing a flat map","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"using CMBLensing","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"First we load a simulated unlensed field, f, and lensing potential, phi,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"@unpack f,ϕ = load_sim_dataset(\n    θpix  = 2,       # size of the pixels in arcmin\n    Nside = 256,     # number of pixels per side in the map\n    T     = Float32, # Float32 or Float64 (former is ~twice as fast)\n    use   = :T       # :T for temperature, :P for polarization, or :TP for both\n);","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"We can lense the map with LenseFlow,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"f̃ = LenseFlow(ϕ) * f;","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"And flip between lensed and unlensed maps,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"animate([f,f̃], interval=500)","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"<video width=\"560\" height=\"400\" controls autoplay loop>\n  <source type=\"video/mp4\" src=\"data:video/mp4;base64,AAAAHGZ0eXBNNFYgAAACAGlzb21pc28yYXZjMQAAAAhmcmVlAACiUG1kYXQAAAKuBgX//6rcRem9\n5tlIt5Ys2CDZI+7veDI2NCAtIGNvcmUgMTUyIHIyODU0IGU5YTU5MDMgLSBILjI2NC9NUEVHLTQg\nQVZDIGNvZGVjIC0gQ29weWxlZnQgMjAwMy0yMDE3IC0gaHR0cDovL3d3dy52aWRlb2xhbi5vcmcv\neDI2NC5odG1sIC0gb3B0aW9uczogY2FiYWM9MSByZWY9MyBkZWJsb2NrPTE6MDowIGFuYWx5c2U9\nMHgzOjB4MTEzIG1lPWhleCBzdWJtZT03IHBzeT0xIHBzeV9yZD0xLjAwOjAuMDAgbWl4ZWRfcmVm\nPTEgbWVfcmFuZ2U9MTYgY2hyb21hX21lPTEgdHJlbGxpcz0xIDh4OGRjdD0xIGNxbT0wIGRlYWR6\nb25lPTIxLDExIGZhc3RfcHNraXA9MSBjaHJvbWFfcXBfb2Zmc2V0PS0yIHRocmVhZHM9MTIgbG9v\na2FoZWFkX3RocmVhZHM9MiBzbGljZWRfdGhyZWFkcz0wIG5yPTAgZGVjaW1hdGU9MSBpbnRlcmxh\nY2VkPTAgYmx1cmF5X2NvbXBhdD0wIGNvbnN0cmFpbmVkX2ludHJhPTAgYmZyYW1lcz0zIGJfcHly\nYW1pZD0yIGJfYWRhcHQ9MSBiX2JpYXM9MCBkaXJlY3Q9MSB3ZWlnaHRiPTEgb3Blbl9nb3A9MCB3\nZWlnaHRwPTIga2V5aW50PTI1MCBrZXlpbnRfbWluPTIgc2NlbmVjdXQ9NDAgaW50cmFfcmVmcmVz\naD0wIHJjX2xvb2thaGVhZD00MCByYz1jcmYgbWJ0cmVlPTEgY3JmPTIzLjAgcWNvbXA9MC42MCBx\ncG1pbj0wIHFwbWF4PTY5IHFwc3RlcD00IGlwX3JhdGlvPTEuNDAgYXE9MToxLjAwAIAAAIxkZYiE\nABT//vfHT8Cm6Plmy51FPSEwitj6SCi/nf+NjjwgAHEqHQ2JG26LpBne3XOIquosR6tGMfUIZuGy\n184pM+riRQpQzbo1LzRAocwQGyhXAkgWf8fQY20CM6LDjml2CATObHpnxaGNDf4y+No1nbzjgVwN\nk8aEFMJObB1fQaoVNszm1yo7kTQ7/il+kCP///eLaGEIs0MWdkrK1oruKCxKP95fxrQQK56/hU3z\nlZFwPUWk/O0MroTlGfy7ynNZI04rN7usCcg7OPsKFG6qbeLOvjParn06o9FA9lkEw0QDmqnexgNW\nDkkB68hSRpgp9M/TNzCjUi/x5ur2dJ/sdKiKy6/ZyQEeIMKUR3cGhP3EmNtPi/XG7gnZy/BKcjkv\n31eDR04uqddgU7LwNGWmJmC9ZN5Fhm5NTWuy/AqivzEXhgzsmBrml1xd8kAE2b6F6b4pWM0Mo+gl\nFxG2N/X2JNupt8AfeYLVChVWu+LyOxsxyr3Na1B+vkVvYPOg4INxK+3eJYtf0sO3qNzgcQ7Dvz9q\nlj832WxOBdBUVxNPqgz6UHA15a6Npv4Owy6pf0rRKFKywrFsP5kB+jvhDtiArAHDmCLIJ7hwkk66\nhoBETdR9+3Vnhqv+Gfzw4xId7IUr44JKWeojtvn3ZcteSy1W30gH+ymSsPSblqcG35M6Ucv+wlBe\nB0+tVVBU1L3pD989Sj50oufGP3pgl7vz/VLewTmMLs22yqwBnSvHllVatGaANPEjbLkiN5YKXKLR\n9oQIBwDu8PCcYdaP/11kAGTLgVGqtCL7Mj+vqi+Om8XSCjwo2oVdr9HcAcFzZ7/ZsRHKwTh0ZQgE\n/SpFv2fCJjt0bS1FYxEoaD04QrtQfDbpp9IShqy3pk2qtZ+eIDB8qlzEyapSLkLR4JGr8Og3LLLs\nTpvQtW3pppaiWh3VRFSA2fFHT5mPd/lBwrQtiNRXhUoTgb2JfgbYpudI82l870PCySpgjQx26Ck3\n9738PWPv4zHrdHl4DedoVHK6eJn8tPKRlJewRw3HSy0qGko2P1YtlHhXlHTelMLXu7A18YAAYy//\nchB5nRoBwvI7D6FgXHHIMdcQlz8WqjQW/yDZl7y+xJJ0m9YxMDKz9dhDnnzPvRnD06nLxaZsFbOL\n7SSVpCZC3FYGP1pP4e6Fayx8qz0BcPWCvP2ITn0Q6nMXrE9hfXVPha973UVdhmcXiva1wzOAqUVQ\nCIOBePMfJaE+PDcN/KnoPoHnsKHZyoShtiZ7dsDccC+koY8vBQ79qYe8vUsC0joCa+o1/kPV1Eop\nz8Noa/rpKsn+ojK2BbaZCNecSNKmv+vzZsbnLPmcNB8J1lCRFdDotJ+6WBeNYg5Qb254QB3pFly+\n9q+IW9vUB8dNZmD187ddBl3uRC17rOIdCGHBJrxW+UNdIIbF5kNp/2fZN8WQsZdQLH3rDoj5T3GG\nw/nspCokdSCfH+X1qWbPw7sbHs9/MPjAH9sOMUthyh2CAMcWvBwzmmjvozjfE6PYwjEhz8kGyPdb\nNFoSY33ej4epzcNxruN3yaR1gKy0M55Fxc9lJdTxxjRfqrSi1OAVOD01KMjgDCN8nxBQ06Tknb2C\nIzfTupnZiajufogaUHTGUTnwgsqbbO5SyItPEF0XgQVlgDgL/VWr2XyeY91gly5xG0aqvy02hU+q\nOZ/XaEyvg3/89nvI6Lz2iqXNjxFSBKicbl4FqOYpBlqQu4CF0RXGp+32GW+hg5KwWDhvgFw2TI1f\nDZ6c33z03bOuLpMLqihFBnssuG1K42m9YCW6ubkO8ExQSW8oZLzqfGUajSVLfPT+xSHbPBtkvUmp\nvrglEM5i9bXxOcHLGb5rEuULYaTcJ2H7meHzuKN0vsf/3vRRNzXP5UwpF0i4HSMgJI+4+FyCTqeS\njO2DGs69YeqZNefAMAqQST1oTb4pvxgLRjbO6Mrst7isWDgp0Fc7EXRw/llhfiZfy3mFjToEwqZW\nau6c3fHdyUcISGqM6cdmAYFeCMtmQnghtBoe3CdKCnpfNqY/8KatYnPG7RMhVSpwodQTUTG5pS41\ntFkSUWp4JlPA9+OOEcxuUDo3gB71YfpOUUo2j+i4JoIOR05+lLK/K3tevQXfHN3ZTD8+I0GUf7iB\nvlsej9uUX4zpXo41IT848T9wGZkOEqBUaTxTyoI5pWlPYPopLWhEYwQcr85GZRfXaNb5r4WuIk9S\nqLusvBoXdnnNmnlrzmlp2a+0L3kWeNiPtXFzOZZ4vfPWMRG5KqJ7Z5SzMgvhV2uejU1Hj8bxzEYO\nnmRsfQfvEETHPCRKgEa+xiIzGdD4ceGr9LwCcabINaxC8pPlPeidfC7c/UL+nQM3OQ1yVCbutOq3\njtrkvfeHZncdTG4BNvlhmoWAW/1K8e0DJ7gJm7q2Y8NLAhJfwooTyo2Yjsnjadj1zefJAgToJYHr\nnLm6+aXMp5r5mONFlpA2Ss/spnjGL/wbv0zDdDLjzCGXh3s6R89/fL9s5m/DHbu5Sk7J5x1fs68h\nGu3SNxV73hle/L9Y++F5uwQLUUECf//snfy72xvUiiKd3x5Xh5zz61pw9uNEXLb8G41YAsGC6O7O\nw49iTqEuuPrjeVUNyW30ZoqL1D/zkwXgN/0hPrY9+UQ/Efa/hrMTm8qv3a/0SJ0WtZZi2FkO80Mm\nIM4wYOkD8ajmD9D5+2IEmIfzQdH0DQBszc5/eiupTxwm/7rhUQNOzQFUP1zqa7m5d0MeIOuXxd+e\ncUmrCcHjgCGhaVtlWpFzZUIJbE9Q8qEyK54Lj5vb6VEnoZku5BkYc94expo5XMApb+aTNx1Ek+o9\n3zOBsWBGT8S7RBurubcdL7eWSCblrl4imJoTkKhC6mHiujoi7zNNaEMQH9XlnTQiInUTuWSgnBuQ\nzqRaKCJVCughSbyiG+NXNwCMDgkU/JlLIn7nJ90osAo7y/v35cLxm+2s4eEPyylpCypsye5lC/4v\nlZxde/DP2KDd00GTZ0Z8IeNQs/Y8vYg9kbrOxYZbv3yayBPyqcCTsKdwwKE5/C3WgYvULmA8c00c\nzs/XZvn1i4gNwpCrCk8TIU9W8ZoELd4WSEpGS2h2HdGYXOC30lUqII/hPiEmIH4HwB/M9JOhDEeS\n3+k2BYiIfUePqc68bqpgogudox2pb3DbcBWBPqq6ZZQ1sxF9UTJkwFuE4I+efCViHeWZct027HqT\nP8ge6t0iNlnETDBwjoNuhUEZ4oNbU7qVnj98XzNK9fYrze8wbinQAVuy6wyQHbV+wmuuzcdXleC0\n0gVjGLlEpUt0P8zKDI4CRyKIMreFLO3I3ycvmZDgEanf0LDMy8sr+y773SRamUvSGi/HJ1nMdclW\nkMV0I4WPWyTTq+4+pxTvodfI30OEbyLFtb2xnyKlrVfJUde7Nlk/x/NbyZaH/sj+OCAMCFRg5/to\n73syvORYOIbs/gHFcSnIwUh3gTo0tJpw8yVtJNWYYPX6a9tTelXAXMqsT+wJ28GjwiA0O5tyJkf6\nznmtx3gZ8kgNGyfbmHcB5Dkt0WntGHCZJCRhFx3z9QiA8Y2ZdWIIskHgp4D074EzGDyJN6FkBGhn\no8CkI/Y1wQEw0TlNewLQwGizIQeaF+165nNymDV9vL5HDiZjr/es1QzB/Q+dhwH043eCPEpoPJo4\njGWx3HsryIT4SPoEb2qGUS7vtBeo64CGZREfmeVUZCmD1qom6MTz/g3VOXxLssQn3zxwwkpBA3hv\n+OG2s0gOEL26S5ggIe9OJrcP/9RtuB1YF2GNhhhfcArg6itRSv48DyRBAH3O24ebZLgGXX+HmXa7\ntXquMJLzOMMabtkB0MJaB5L3SjHs9rJYYf/M7343+ItvWcW1Nph2f/vcvMZ+3i0IxinOFEVuUBTD\nPlBn22tOUJmTISP4kDjLu/ja6TbsSM7SaK4CcyVT0RjV5NeFu7ZOoPk4KP3kytrKGPHkFBP5eTsN\nDo2FYfGXtjun/Dr90eCxVfTFBTuNBbizGe5S2fr9ebdsFhid432AbGDHzOMGoLs/FKCBNl6oSAlP\n8BVKMLDMcP30p9G/0+6dTyv2MThvNmSvEXsU3rM2VvT+nmeV8dx0Ys6GfZ86fUyghNKcM+f/yy7p\nXsfDEFmb8Nbx4zp7gj3+FZM6vQJQkv6aENtb+PY/en6wcLZHPMly1xfXsJfmzKniiNNbjbLN5iz0\nArW/SuHs0/W1XCh5jubU/dwWKIheE2TvM+iT1DPECF6Izj0/WMMTw8EHvUkY/iCVB0AXeYtXdZun\nm2o4s5Q/H3+0JfDp95OvvyQbrYIX0bbU6vvADQKt+10kuxr86Knvn/V8ox76XD7Bu+A8WPRL+n9C\nJ+BcOxWBPQet8GC4QgmWmcyycqSHDfcHQtSqXybENov9Cxmu9kpmBySzdrqpP5i3F8jG5FonQJ4X\noJgxL0oa/M3gtixr7uNrTwEksXA2qJI49fzBDnC7uHHPCIFa+E54ZKNe6A0pYnYsHs7F32XuhWwV\nRLDJMpowRc+SsdTRFJFDDJ0YKfvB0C5BmrC1ABszmGJ4BDJs+dkFt5OHBmt3wlHhDkhKwv+friF0\nGoVz+u+z0ljLJXRBqjsvY+xOsgf2P2UtCuhTNC4lmgnnaE159NyAERs/w3aCBxkapaKij4PKg3Eh\nFKrY0rCKKeD8sgDFmDh/mUd+4uOXjjWz7vb3sxsmXVI0QW1Q4KRl/t61N9cQDXdXbqQMMdTGdz+D\nx4QeL6G1tvthFwHUer452p4NtKatyLG2eJnTeQQ0ebzuRg1NTaEIKA+C7P1cpn3CAdSh6tFL91DH\nKn/2dTcp5cHgZnhsMOWo6EDEXnprl/eixVBxkHM+ayVTt5YT94MXV71yULbjxvFUzaUjY+ZhvCMR\njasLBHauoQdRhc6Sm8SGENH+78o18fyK00lNN639NDeMAHDKJbqdbwRL5HPKnFM6vvUAg99niygZ\nTZyeJUzAnkOUvxeEasH9pH0hD6zB+DWMj124ele/rpusHN1pkLKQStd14izKifr4Oi95xLn3m5iZ\n6PDVbk38g9eotkCmDs0wd+chOSfwOzHvx5Lm35zcQou60m3sRDMMq4rXkZr8+PtJptzwoFl6A8Pa\nX76jpXp3wVh8QPXzXH+v0i2bYo0XUxkvvQC+u1r1g8cAzmUn/ieqMkb9jtzpcwTxIuW/e1Ae1q9D\nnEZTPLBQlcn6ysOMxZVHHXuUJycJEj7HnxdA9Z8vBErQMB1r66x/64IH/cyLkmOe+Ya9D7PTmy4L\nN5pypgUsQ2m2tg/noeWyVk6+VruWudsvJ5LHfJIG03mOiDu37AKprtth3orPhyc3I87IfClCLRy2\nontLh9fKXGsD7fTYjV7M5RriM8BDlvHqIMdXBJ6jW1bJoFehdbRVl1sUwc2V/hfgS3pU24U/fbd/\nek/Ft+DZDnq/DV8lkLfx4DGctbp0RUncLmgdIVVS99DExMTL/ESrjWAAG5OEGr5LzWDbnRNllTKZ\nTB/vBpU4FwO/5WeVffWWK0D6uREOBqpQBSD5EOl35uXj6bmPSkoAyGV/pCqbHOqDqS2yPYBxxvam\naN4TMjbeQgfY+b543I59HEgbloSkjCdlyd/FCoPwh5pTYDB3R3Wl/fkU7PKjOczlV0nx/FfkFsgy\n9sC8gIq/BOIoSciI69dht1y7n2Lc2sdUu13l9o8ZsygjIAijVIvInWb3jXcQFJu9qlffobdOWFTj\ndH7m5+pxey+64343RISZc2wgMBlUnDGBhxn7uLgE1oZ50O71wKhtdq4M01JYLqGK4kBK4NgE/rVV\nouEKANxeKtvLO1e1pjFnbAiBTVNzBjh9zy1iyrroKN66p+22RqSRQ56YDa6RpUXadMyxMeY/U3iG\nrM9n1IsHe5c8Vc3obI/Wha1QwoM2a6g9XMMwZKCXNvfnY5rlraXu3wRpkIDDcCV3UWJWbyVMXiKC\nlcE5g+2ug0f7yKU31KBWs+JMpC9P6MJ5aMU2vfd06IcCZmJt/ZsBrgtMIbgssu3ZzeU3Ximb3Jhg\n6iatW/uB5P9cGh302l0Gq27478BOR6k75ONkHbi7jQViUn6CNpQIyJVLI60pjD/AHfRjUPB7hwAv\nu6CkYFWoRAJrrZe16AFMRTvZQOJx181slRLKcF/YusMEdT6PyMaJPbpCgsgn+QE4Nm8B2Q1JgxK6\nRRabaRKocGznzd25kJ15A9nSLB9QXvL2MNJ31uimGFQcojA7LIOpC2X3w8BgOt56lulsk7we1x4t\nZLsXms/mX5Ye2twvdUV4VObodL3VAzWfE03FhabGUdnxyq5Vj4QuMV80h7m1lbmzWgpZ0TAzv3/a\nS+TgVN5b6NW3niX8W1tpLdYSZjaRr3YUf1Q8QHnAcfK02HuOZlyIG3JaFw46cxUP08Z7cxsssEnu\neviPzMTb/pQlzlLumzQ3ePKNAmRH/EPlHiT2E0gR1jEu0ROE8SWn5/lQAg8pykRCKCLwGzcekfT4\nfzCS3a6ymLW8ou4xud843+9TZWqMaOwctdkhqz65gl4C8JgMcW7l6Tkt3h1x044jvQcQZQVy0IRo\nFGwGL7ZGwmdWRwuGBgazkBoSCYCGLH8XuiN6Wn9gz4AoNd/9zL2Q5JRNuvwMpSPDhX+XX7X7uiQq\nz47VAX1EuPUhPLBvyPUZpB1El43dXrfhF7z3gMiVcPamyapXFyr6IrXe2HbNEDZXkuEf1JfVOkKz\nb+GyaZO4S2YQIUrFnzwo3WWuQSNKtatkv972LV6v5tQr5g9HEKQUHG2Sdjytc9UFG4VkxKIFTIoC\nO/j0N0iDy+hYQoeuRsx09IZoDdjCqPmkCl7e7Z39Jp4vfDh5RgN/Z5uOdzKnhQZk5u17x4cuRtlJ\nPIlIomEPUmgF8gKtQhoPiOoLcguFCEzNK2s7qlxNx/GtEKCOpMRyvvQxcJKD8ruCqMU9IZ2Nw1tH\n6Y19i8p6bzUbolBNb+g08HowW6uD2CZGnBmOlQbKRUVSJ6pbdJ8e9Pi1BA9qb5zI+Y7nv8L817gk\nipZqrJXsR/hwK+d0pMRk8+xaLi03Khd9dcl1PlJHIWhz2qwmp0kSjYLuRevQBge8SZwPWnVQVt1V\nQk+chXckzX56tWekzjQYpPDlPEGI83QR1ja0Nh8343d/2oF785NDTXC8a9Jw21olPCD5pfthur59\nSqGMvrV/Hb3XzHfl59+jRiLjV+AQoCCd28UVXOjVKJ1ODzva0FFo0bw7gPiZfIzkf/mQcZfjWovn\ndY37zNRIi7cRmgbOlGn+JSXYWl0xNLb00ihpuyqROkHy5dlArCwO3uaD+l9BW2D3ckKYPXPznFzv\nruUJdG2iDgZ0MhHCn35kZKR1PKYFYMhnElvUzz9P2LAO/dSbS4nf6yjoLwkxYyRZn8BZJC05t9Ai\nswQ5301AYP3e1beA+mrXQLFvIHFcDu4stlwcTI/xNr1FTXE4cyZayFZAZLO45KyQ74hmgCHzLIpp\n6mfWZ0oyTEJ88CIhCeKVjDxUUgmSG79dYZPJqyO7G2BoyrVbZJZJZmPFYXko2ltaxspsxF3E1wmJ\n2dw1MjSzXrHRCFSRXP8AeeSn4z0YpE20R8TIhK0mvBpifOKbqJS2A9AQGleiFuPvjRMBIeC6f9DR\neaQ2wmEPltr464JFqbC79vuoqRu9M3Sx8zFn1XXkRIUI/4hKygJDLioMiGwA6jhju5fxsB/5ddvS\nqStq/CHhYsptVonrvGwgjJin/C6XrfV+jlVhNHHgOjiN7n+q1KqYeqK1RMwZEBxtLBpfQqIiTw9f\n7Wjjjpt/SXRcY0bk248qTFkJRaCue8wJ946ij95GpOIwTaJ14DU5gOc+c193SVYXDkR6Qgu3Fz48\naZt0ji1KkmXEmGvJm9E64fXYP91/mtZrSqsvc9shsj+BUvStvHwp/FDo4tUOA5wEplweJeg5IL+c\nLI9ErTNfGafR4CiBWu7nNwN8vTQbF3AcCfIikwyAcHZpqD1qsh5y6rMxps07R+HCvMgCJ30NbgnC\n/PI4mNqRU8Y69qAXY4w+JJbJVrnvZHg2jokg2dYNRVK0oBdn3Nmz3mEndXhNB6bfuKSjfKvx6SsE\nvEUmGs7W45VGIbso7bo5+Kr9iETe1ij99HpS319rDFajrd7WFBr1WnDWYIJbWdtPD0GqOVo6PNc9\naAbTCyA3gDcY11Ko5y3eoJqIu222Ii/G7t7csu3qmsdcWLqt8kvW6TZ2+MRwcV6G/aRxKrfU4AAq\ndvwjpRlfd+Udu32iijx124Q112l8zk6fXqMZPcVlg4WIKV5LxD2K+BkkiRTZmpdTgsQot7Z4hi2R\n56Rqc+kEkat1Zk4JRToOLMA2rSUmxAqnIZrOFWGrnVnFqjZ2mAA2LXb4hrxb744yfjApRwWZOgmr\nyQGzAvxr2ROnZg+ezRD04ZulwT9ldXwiV7fpAdWrM1ATKRetDq6yWaFOx/X5e8DWH/QDSJ3Yu8A7\nnxP1yitiHzF9ZoagD44k1mH0/zzvtfDIDwJP6rO4oy/ypkSqIiKP2qfxkflVJ+adFphMf/0lKEpS\nhqtGO1bDPxmg7lUBweT87KSl9K3vDfi9P5fDSShAa9rGBW9eI6ulk35KThP595zhmhL+3qXfy4xc\nXb2SGeQhREeM8RWiAH0XDx3Wt9S5TIskUAlwNjtxPwDqMwiKHzhR1vYCrber14rbUPvHjQJsM0X7\nQeXv6J1hlecyvV0phI/mtUF4VovZD6m9VMLzwDth4yRd3sBH9W7vhoem4e8T5OwKu5AkUeVpvd6c\n9SJBS2aRnmOHWGOELgIS70mhBOc6I0vkRXwckX4QyfaT/CiGiDx170iXV2PNfNSz0r9y/QVm82LA\n5ZwW4ipUJ5lPFVgHuYPham5a8De2c+d1iXVgeihjWHNRkxCoS0Gki9oM9GPOFxHiRCSICuIK3FH7\n+6Qsgbbwl9WDlTPENIhTYay4mBRLna3uLhZbDP7c74HmV/Bj4vrIRgp0625Z4SXcyGacZSxjePqp\n3rwjexq57fmQTnJPlpN15PDfKyavy2UkentyEQQSaVPIYoFmeAs/kJZiwglokFIHRsn8mvY+bko9\nfVn3eo8sfXu5dwrnBCEJAHDYZMnBokbs9Fnj0DPx5cQDe5EyoFMMPZBArBqvScgDS2G6y6U0Oow+\nx/fo4j7sUGuppjMKEdtREjsOO7Iq0AaNZ8MzXxmoRH3KDM9SBsJ6j8pPNPuBIbG++9sR9dFBHHbp\nhDo+JboTucFVuOeCA+B8kP1aImKnbxkJpO1Kye4fIKgQ3m9zPDi/kVt7Sby0kJS3yzyj+HPHllSL\ny7f86skOt9RyzeLBWqGl5DaeQKtSTHpUvNoKlx5SLJZQo4rb9QhKOIBFC+2Fuy+M2TNwnLVLpL3C\nc2RmkgiLOpo5MjqfcfcYr5XPJPmVBwpjcn0tufT1Wn+toI4DTBCduo3Vllkwp2kOgnoFgs2TChQQ\nTI8qjCqi36lv0cJ4ItHZtOdggDBIfg5VqnjAJeqWQU8UFrq9kKZJzyEsrKqqoLb8pG2Ge6O+oDiK\nQ3xh2fop0183vLlad7oUQuIoKP/y0ZF/eNk/2HV1JgojXayYOzbYiRhKs7qRGiYif1e9fhbtQAj5\ntJ03JJ1XG1T3HNJS56Wta3FV/7S2Gq7HqxMkEHOk7RPo7CRnQBmcqKgOHOCfGNt4gACzsuVMk+kE\nDf1wRVjqUpwY81wOr9Jaja0pexzFeRN5YvFkJ8M3KlGD+yIVxWtVdvcxYJbeIR6ruNIAj5+R3/6V\n0wysY7Uc+0uC/zKcIvAX7Mn/z8OTg/fEgAeiwZDKk8lWLt5HqWMizOhlOKHPAyvlnwQzU0iWwi4y\nbYfRctC3cedbu1//WG+obXODhauSkWbUxtvSsvRBJc+SljJLwMYqzbMA1cAt6E3efe+a7Upm8ve7\nTfgOLZ8lwrdVp1bEShiBaDDIMKLqJaZeFcQCtAup9ZOQ44M+J8BBQyoZR3ruFy4kcLjT7duGjkBe\n0c4BqR0Av4bVCUOzNdsqrgXFGhpE2zjS8pFmIIdbu8n/bpPuTueOvE5G3kPv19dux9iYs6kHFDmr\nVn17kd7uMODxUiBQyGT0hZp0vQ6FCQ+F7oCu1gb+DqJriRYTPYt0oig5PaV1GqKcz47yiGM6yUAX\n3LIDXwZVzbfMdwhhHK2v200t3YFVqQ0WOPz70yPFlzxXQ0MP2Xp3QNqhv53fb2o/CXdhHGTpZe0g\nLOziDWYxF5t4oAlGIccR6aCJzogATHtFRdcU7b+B0D/oLq9zhOL5//+a243DOMfftSkzymTVI/ic\nmktbxFgRGU7cMotYfBNQrU9isIMuFLZ/T0BPyq6FOnOSutmyNYzELTo7Vb6qX3TB+q979/kZBUXI\n/pFLrNafgfMtYejUhpt097jbNrtMmR+Kc4H9k3rhccEUVheT7ASRmdtN/hhL3oKzQU0FH9otxUDG\nM9RmaH5uOicwM8t2JKXyzFHNdiEjnbKsL6/7PY1iYXSQfTqPBg/RseaQTSPQXxv4HI9UfDws4KwV\n+Ww3jp1w8NumnipZKce2h98/2V7ZsLJSNuCsKqQMtLMY111flsZ27AhARxDvJEZAyGl3UHDGKEiD\nkAt7Pe/BL86RautAdO69BbaHbte5+25v38dWizR+F9PJv6NT2WRCNo3DYSE8zaHM3MvwToHjlMBX\nquGyr2mV0e/ubOqyNanVcFfSw6WKRO2YOJBr8qxL9DD57DTAoXoqZoMOOuCV6ixT0PhOtHbmhpME\nlNGXVKSnZnunnnmMvckMs1H/lq6k+1nESqvGuTNYJZI8md7ESsv+I9dMFMATwOaMvd6hRld/U4kA\nM+fQGudDeMgzgfoKdU57xO2GCcx/JFJGtHCSgTOtwi04GeAvlGQFnGGe7e7BG3cIGLJle6LtYFjv\npUXL9fVUc3+ur0bIbPROU5WZ/c2l/H7f4m93a7ko+8Wb8OhYO/gbJvujYrCpwy2cBGbhzLWFfaoX\nzz/ybbtL4lrgh05p/QRNx7G/EAiVptHNnt7rs19YpTotjrOq9dBQDOHXLb5XwZDpCQ/UJplvaSig\nlKzetl1IbrzrqhS6PHaZlUcdYf1nChCToJhKjuSRtrrw/3ya1ZRTfbhvxomvCkNqSFJMgaZdlkTg\nV5OYYC5d7mvOm397f1gZXn6mXpbJw6Ydl7mckji6vOmxTBONp7QqQBp9uhwanfrHq7zqWIIBL0Ve\nVNTjSKXnMH9eEi2wu+A918v/5NLSyyb7va2B346my0a/jhbB7eRXOwQ9ycCKqT/Upsf0Ooa8ilii\n2+fJJowVFIQB8aA3lb+rKCWY4aCdlKKOFXVmHz9kiqBuwtcd76K77zk++mF0ofEcMZclBqIDo80M\n4QvrnyyBkEbdvT+Sq46QPCPkjJY83laSpuZOFtIFbH7SowXpQrQ6Q56NykWe0s3aIJ+/PlAxlf0N\nfnnche7yuXG1xv7bX0FQMQpww/vGGnjIPjvDPDnW94SbhB0go2RhvO+Trc9JuDceb9aCuRrJBbTY\nsp3f32ShZPttJ2As2mDYfNO80NBx168YZ8Yvr9mEyY0BuhPQ21i7mEx9gtQKd4V6str4likNn9NV\nx1SZcLKZinxggeac7rJsHDXlmsOnjqoQB5OUg0siMZ6YmC80hBmxIX8xQF5D0UhYNgZGXqeyDifI\n8OGmdESpJ2rUiyO/ItDZg27FzgTeiRX1+MiX0/jKFBmUtN0ArMwUIZx6KTAAoyErKpCSxI7Z2baN\neSQydlLCQkB/mtx0vSxRPsurtN+4ZzEO+jCUTY/FlrTkgIFVqLqSghn1nvXZARLzsBauwDZXDb9I\nFpo/7p/Lyt2OtX6Yt4sGZe9B8GLiUAHctC/FYr2gOgaE8rxVry1Ql4qJLNP0b1d07buUM+COBd47\nN21FHlR5MPB6vXHdPBNcBT/raukAByxKm0tjOVLNpGReiXNyj0+znUIKyDHqxQvIf1qAJAbUaxs2\nsyYCKFvGOLi0nD/nbGCrviF64ejaq0LLt2A4QMmu5refsnxaZHoRvvlnGs3aTfZ5hk6S4MafhY0h\nYi2B6wf36X850QN0JWUcXR/SHOyO5qNKDy+OG/VELWPX/q/VwLXLKZpM2EYszEvbyiV7sn3zSiiF\nT4wAjg3If8nwaE2fwaOpU3eXA6NesPivqFuqi8DB0d/Mwdvrmae1oRf0YsHmRAC3TT4bWbPN8Sl2\n41StUqnsrG6F4ztJXqHJ8mK2D6Ug6m61o4KMaSXgRhRiut7CyWCPlW2PNz9PZEAWaV52sGenXfXo\nHApf1MIhpgjhv8gNDbUblCmubnGz+SFu0dQplG1x5APtQkGwXsmsTZt04G7OueOj4IVz5P1v7ywA\nrnVMsB0bj7fYAG+AphovijCFY2yXFi9zt6dPuMAQZi5opyHLVPamHWgX1uDrapkCS3TEUPBVW+Yb\nkZwafoxZeMB+rlrPyv+fWvh+erpEYAjXo/cs+V4MtlN4x/OXSkPsIzNzQ00BoW6FatvCsJ28yk7K\nhl8IJKAXm9nOWs5EvhNMp+F0lP8GudBt8RwQrMrzjA6vp/7141h4Tis0DGr2putsaltlM13URJ16\nvuMBm5zyjmhGkyLwEhAr9jTFguzApy0U1IkcFe3HwYW06n43xTpVUFp9JY8NXB1jUT2B9cRi+NP3\nKpfa8u03UDSPzU0XzXzV+u4immia7IrBzPnQbTU0hsUGEbAut7xDGsdZTdAas17GJ2tJ6r/VUsPD\n1T0tMoEIe7ksLZXT9toCObWpnp4JKMfNGdWUUiyIn4szifVgn0B+FQOT1IGzIvdKM1g74CGk2JA2\n4f8WC2Nor7L3wEtwAvn1CSbMzA54zvvI2ORfQ3ajVT53w/OpqdFz6Q46uAHm6slqGLHe8cKpYnLS\nMj25hx/lmfI6SS5Vz+2DrmOLJgl9Pozm4OHxXUqtSZ+/9lfZNKaBvMlgeUy0dN2ZFQjZY8oR7QrE\nTQWnDi5a3ca2ulh9WMY7VnyEoIP6mR3732FgzDfLiE564NygneYtEEwHBlpwub1/DF/P7atOmm54\n1F+lbyQFXEqYX0Nm9lvxO1a3UGC8pQTXSjWM8Da9qLYxvL+TUEAGGaDwmJbBVZkAG5UDgEhu1j+Y\nWqmxAx04w3lPOpUL2Y5m6ZI//IdqqhnbLvROxuFqy5OBB7dJzSEmtUeUVNDJGr6i+MdYzCW3gULm\n4tVXrUsVLpyQEP6huSJwv1c5u2YkcgVYXFbt2AKAouQVKIElY3w8HdsOcX1GejXqYZm96LQLN0cA\n+57NVOsa9nazDSuBhM4irGqmA+s7E8Ve8EQIhUyneGNrS7Id7FPpgFVi4P2nBPMgux/kbZ3P2fyN\n4pbtZ5/lPRoJzeK0P32tS8uV7gGKbULzcDeZ6nu/Ik9DEJelzOk3UqTsYlCGohiRYbvzYhy3p0le\nBOKcet/0GP+dcinzXsXkszTLTbNd/mYwV7d3eEoRflkV8u371/Nb9WynrUdMjCPMkfK3uq05oUYm\nxdRhN9B4d5VPq63iEKXIDoIYewvN8lmhY+jUMcROZL4yBJ86WLwl+mJEIN/hIcBOlE6t76v5thhe\nV4FpUbwJMieFCfH285BjG56uPZVOd9eel9e1a3SZQEI8dztf7auViVzGpo8NcGXYB/4zHibQphoP\nw6XJaZieiFfGCCdQNeuyY43FRvY1HaOvllClifWWct9NP1pFnIFcO7hz3JcclaLTllHiauS8JeoT\nN/o6pwrBK6P5lu/p7heDEEVTkpat7C4jdvT/WsuS5yE2PVdiW36nKpezI+i05akPR6lZY0NmAXX2\nz8W28sQPkiRRjQ3Sx8/epRgd+eTBd2ygxLjS3FiV3C2LPHBtDpffaJQvgCX0rBjtxF54jhmEGwdx\nQiaw6t22f5fdiUI0dtXBfmw4tSQRGYxwBPynGrqKbsRihd+g8XYlnpRScQBA8TQSpGMvcac75B1A\nVABb6KXJbO87Y4ZkL9WvRYdiZydr8rAoiA6gRds1TUej/SO0t5PpHw4kLIpDNXPLOwxJBfwb6Y4T\nqAYS7x1W11YkFRPLHeSlHGaekn3MoOfJ+suKEOr6eO4TGoJlICHbtHD4a0dw5RYfyXkvcGxL+poo\noZ0LfInL58zai30HzmVwI76G3lMvdQu8KcJ4sReSGuKFYs6Eo5bvPF8eoJQJGXTp6pL78LUUz9FU\nrF/w1lj0Cad5tishZv8WTlsU9PIy4k899vWN5VOVF7PXnIU2AsUxLvJHKzNOMAvbE+vxxQ9HfMDA\nE8qNj6Q9jzDX/Bw37PrCYEXlf88AXTrY4r+lIN40hb0UY13FQIcGQty/XlTTwgeS37Gs1sI12Oyb\n9i7+ETdF1igu4RJnYTpETlE4yOp4t2dgkYg5aLcR58Qilz1NkA+OHdzOFibb5kfhIjRVVUptimPZ\neLR24XAjmh1cm3A0qf98V/luhQue4tsMUgybz2OTDAR4gJj2zvga+i3gLaaPwixsh6ydcyasnYsT\nCTv+34zOPZcSGUNX1tBLHaaT0U3do2WgUGYk9SW7dqtALaoD/W8buHVtMeCbxZmebswbKGjPG43A\n/Ecbsquj0clidfjCPgy4Aj6WfgHaIWDZxouaK1UVFdhlz8HGA9KblBlUrJp5uBGs6q713uZcmGfW\neEWGH9UBZyd57mtYZQPi3wS5WBnAcmY+Iv6hb1b8CJfzo3OpeJriqNr0hkIKx8zOhCPzd8WIg8as\nqdBpz3dCT+bSCfVlPZw2cLtAfhVJAF4m+1dEea4dpztLBCFTOtkwPNTQODLYRQGFKonkQA4TqbE4\nFEEP+KAXkWQ5Wv8GSny4Vm/4rIf23CZBHJBJjoMeGCgGKbLtlVtITFB7rRHRU9kUB/IhERudeoDX\npRT+Ag/HRDljXtzDopqIqUayYKJgM982UVZ+/keBv9rgU69W+EKt2JPfbF+BU+znMheqBW2GzM6Q\nfRD0xrAfOsNxylj042BRRtjrzXkTS5smZNh5hu0KarCj/gA5aoLheG8dnz/dyz5La2neJpQXcnmN\nXCTKMix+qPKzYoNMGGBOEORD7BcImS3wvMleszQVE7r9dgavKR4Go8SavF0p3C0qIuFVGwzOvLDb\nq+J8ouOxHemDEfpMcSURjYfTxeC1DMKb6X5MpgyebmTOaDKw2I90JaNWHgSxsL9iIpmjD0/K52Kt\n40DDBklT3KGw/wnnIVkQrgtFvkLvGQrAGodCRgcBGNrCaoen+9/hQ9F+l7CXfG/OWX/MvqB6kV6z\nAdsK/eQKGTtsH2epnynrU5Mhldap2FLHY4NhSu4PI8mcsfILA7DA4uluk8cNVxOcwqLcj8tVlOiX\neskAKTforWM+E3KZTILOoNjn6jiGjUdTPWOHszXZg9ta4LQNQLkGyP0FyzbEXW8yX1nZ0LQAwANy\nENKxVl56PWV6cxQg5/D8C0JRtv8SJnGBx89463IW9NL5tSAoK5iwKrlUFxf4fdSa/1srBOftvWf0\nutZp0jaXNtSQHwRgr1fge4GlmZ+apSrJmrXsWEfjaEnv4/qMHM0qBiTK5RFd10LYJO5ZscDzD1AG\nyG5FnZV7qqHqyq8sOloCMSuRw2rKulIBzTiAqy+MSqDqZzX5cNzYcMBq5POXuEf1KXx2x+wZrTp5\nC25Y69uGRMOieUVYukDj0pn4Sl3n89dm8tmBCyqvqQrgW/Mv9DoxuDX5TgBAWh8eV6ctkGC44kdI\nNmLMxlRbDI4h0QlpxTxFlyIhkNtVPMqq3hKf57yNQ2g5BJrVvkbTEMZz7+p1GYDbMqBKPFbxUsOv\n+xy3fQ7LjYV23kRacws0dv5RBwaCCCV2IneMnJj/tshrMf8JIo+EX5P84YiYBHl7VWkRIn/I88Cy\nRPfNiz1b6eOAQXLZ/OG1d2pVy6PrXP3ltAKqY1UwCP8T6/BBcSDtbI9Acpyyntlb6kVCr5x5KtnT\nGrdtiX3ZXuUQeFqXuCsXEFpgMcU0vyxJ5u+2C0b5U34qZoTsSN75b9XkLPH91xo0A2yx3xivBcv2\n7c1MpHEDkQAAt+q/18fDzlHAzBzdkCBvOCbJtfR9CXhSd5ndhZKR2I3FeNwJJwOMoFdIviM+nUME\nesZxgtIDCiTMnMjDfH3fntQL/9c5rPFZb6YLvSWG3rxjvAL53Vq9QuXxNV9hg1hqMFz4o67tVvYe\nv5+mxM1MWpM/K2HbGX+QFpek/AJxgow0dIm/O3zZbQnwhDqwo4z2o34A4mZcy2D6v0FlCLCEKWGg\nP9a9AK1ULdRfn49287ghsEj6DVByAb0zBzzXcG0M1MwJrF9c509IjBAMgZxHNU7gTgaGw4kcp/Q0\nm3t6bA7xQCoLNFfEvnWJsN0lJgh8KlYm/id5dJObhKUR6YtR4w/tOYOwlcrsw4xjsjBMOmZ9P2Ez\njeviKps2CAFEss+oYoEROcfkZ6uAgqlJ22jzlvdkn0V13Gdg8YvwDmcYyDv3wTzScL7JfWgIXH7c\ntxoEq1ONYZZ62DNpjCg7vXIucC3c9kxOz6zDfX3aJuZSFomU/DuZbyHdP/TtjK8ncYQvivoDXLS9\n51T6Q23jIK2PHaB7iYK/EJhiVj8Qm7BD9CRTuQmNw12db6Q08wpty7o+zzUlNEoOfM/SiIVDy3ar\np/sjxnkdSj8I6XFupP1/zEdDFwhhIyhquqBBMnWkSTio2yOYi2Xc8AFtjv8JA6kq414CvBZAJXT5\npRDJ1QogqjHIfV40BsAFkrFqx9zjmiYY2RmT4SS9VpEamSB/d+wgg9PMP33D1vy2olUF3bgDT/K9\n9gu9iQC3axEDwimEhUCYQhfUudr8+YqRGnAKb2SllN/jYpkRP5Uh4sQp2TeujfdCwGg85r5ReXVp\nAA5aBk9rtCsgopp1+xoQFAVwibJcHm1wvC/IaXtfDe1v2xs/pRx9b5clYomM/CLHY5SdO4bO66TW\ng8mkUzlsDRnNVrIBpc4hRJF8m9pgyRk5PO1swQkoB0PWn9/OeffNV0/lHb0dSi6Wc+bkW7fi0TG4\nEKwKkM4wn+vo3gBk0PYqP28L7zOxntTo4xagMX9oeRo2jEHhW2+h80zyE5/Bz0RDDqMeL7/+5MLs\n9v5ndYuMd/BmaAIY96kY07WLToIrdWt1BJgQp7Ug9/XsH5UBHKySBGN0sw0/z7jorC+AGsrB4RBF\nGfh83QLT3f1Xva0lcY0Wy42vPOuRPR600muHC7EKToNfRwg78vJVUA0nQBpgurbYTDPPg10BZPvE\nspUF1TL0QBNdixigVUg91jFoQgXwfQKinLZBqWbH5bPqXIIyn2JIDoM/92N0O/gqTpbZdTF86phm\nMkSQ1p01ltjd1ZHu1api/Dt6iMFTMUf9zqCabThmEBQH90jXntcRash13NGbPSo3hUv/cqW4ImLj\nIKhPPyyuG7dY1SD1F7cJ9u+n5kHfMrSFx/hABTQKobwMRV0Xx136keSvfSaxa6XJnzsQMezNpj/T\n3AZyHTYLA5cr0vxuvV8BDMmkTltSJO8kxM3PW2vus5d4B5B3EN5wjMdTSHqCXpPf3QF3jOcUG8Iz\n9o4cVjwGqiM6ZAoiQA6YhQkMuw18MuzoA6V6qHenOYT7C2zUSIkeBuYtfWNlvoC9nPr1SKUVvy2Q\nnZvTcenEtKDu1m5CaQ1TZ8pWhxWdZvnDDL9073U9o7WgmK6Gdo1WOiuXWlLDKbjpK2pCugHDoCxE\nFWv+vnhrw0PnQ/i46ylIQt+TK5RRb0sy48B8fJ7QAYHm7W5T9zqKbsPc2tyHvhJ65HxbN8rFFYrH\neEX+B1qwx+3vrTRL4l/Tqd3UHZUHVpDvHhspU7gkVaXBn369u9fJSpcu39N0XAOEFmhSOz15Kraj\nqm2X0HVHi6Tss0rQpvtJjVsNccpZsFFmX45zSXO66zz/Q/yihAE56Wvb9pVFMbx7/LOsyzOfkHt1\nhkg+AFlxf+B1m7xGyMM8ttPjiJXF5q+8FydT+Hq34PlmOmV7po3vP8Mc512svo8fOXDvBv3h/AsD\nOfn9QVxX9nPNNOO4ZqcEGpxtaLCC9seI1m60s2aHtrIlLng5k7QAWtxBPKL21wUWnw1qs0frv/OI\n4Qccix1UwRbUZeKHWjW5UzWwBGkdeF3d/jPkfBc6Jn+vO0YNbd2umZ8oPImZ2ERW7gG6+B9KT8EP\no5NZbxRoLoFzQjzkHNqdgKNsOrxecZB/WPFg2GOhq6xmuoaQmSEN7QuzgGOMDjsOLSTlCELLSOvi\nUVntTC/ktOOgU495cVzyBFebpmWzROq2zK60VAOoKpmcql5T4W29cXBpXLllzXCNQIJfLnX6e+Hx\nkI4bY+NfaK4RK7SDxCGN9p0iplHzg3vfKCwXzJ7DFhWQq3SxHz7FjrQNxTJqx6/u3I2OgKPiEq6N\ngXsUDqVP/T6HFnssSKkkN4OdRGqxczDRMg0GgflXlteRBWH2XynpFqqZkFhnWo0bMFO4n6GvUGzP\nXuZIAU/4XzIJKeEqL5w6YaL/8fb+JtmGys+AcOxMmMshDVSVIS6GmgxLmcomD1l7v/5CglcubeS4\nA0PxqepiM2eRww0weMSaFlkfZ2QX3I7X1z5qeB5rXkxgVxeApsDtdZf19ZIc8u7aDA2FBPgQtkQM\nSe5oGGQ+kioxQ7M5NaOXzBjVyV4ZMnQerbsIIBgX+MVJZgIoADEojiJALyAH7n1vB8CT0syx83C/\n/C4TtsAbJ8ZwDobFewsfEXAwROZGTJO5n8o1qUruJ/QyLDZDIzE5/NJuj3y/3lykO6xty4pMHZGx\n9Jkjp1UIBB0waJi/IDrLq040JyxHV1Nfu2DEzdbYVF3LLfKKG6jfX8MX3fFQNQK/26whNqvdH+s7\nwwLxraqBOsG8a6fwbIWv2dMLAQUQ48nHOaXtGOzYqpQsv3vkuU9AFdlLGeiLI/3yv0j9r1JJyuKv\nyEQO77ZvZ5O1dtDq+sEoSq9rJ36e7QKLue+0cXoTIU1fpJ1nB1GRuePfvx6PEk1l5CbwtCq5Bcdw\nBVF3ARU0gAHcVq3CgcBa9z8UXJkygLSBueJCH9oMz6XT2NEr2psscIix7xstoOW339MOBcfgeEOC\njEUJSuJUuFdJBmEx2g3aXeErNcdkcZ2QbbPoMJIPeVYhF/HYirZ1bepTgWdAmCVKJXYP/VyF2gNB\n+2Uvy0GP0fLQzJX81veCZemoporVKnA/4sYTu/eAGC/Jy6gV9lFJ73rZiXZNzLBKFcUiijsZuibu\n9V1ox8PSn5qMivfHHxf224e3lqJ5HeEp7ItAq6cda0Gj/TzRMCC/T8+GC/AmhvkyWRA6wl0f8tRm\nPxPUu3OQHUbSmaOKjaL7kBqY9w1hxCViC/6RE2VWnrs9+wRni9hIV0mCxyGzFo7NFVfWDv66PfEH\nKx7xbE5NTeCkC8ALIFRSt0fc6M2cbWpG9YFK8SxZrzIBLXtKtKthjEWcgud3za4J+6CVLA+cfOaW\nS5hyUsaXQI0ssoLiKMPfTqEY2pT1B3Xcm/xiu7+o/eyR6s+VNVldWyMShrne9wvc7BKLLT/KDlLV\nCO7iMWh2F9joJv10d4loladxFsFvPcq3YnHrGxRef8csv19XdU7cN8QnzE89xbT11VfjPprm3mgI\nrVYLXY+odNUqFnv0u/5j54AiWXl22CYNbUvdmRmOHnyJFvZBiTqdowvYYH/oXy1+VvoDhuXx0Liv\nw73/J6U36zxIU6V8GyF0PPxk9Zx8LBc/A1HhkLy8czLOZC1qk09qAnmoEcUQ8ayb+yAnGMhLMws6\nLiBCwemzY2aJWAJ22O/wij0keTZqcaPYGmKKGNIe9utljNphZdWsYiBARDtqzJh/aIJlEJnF9raM\nbqPqtrIQbRLjobO55XTZQjJUyuIFj98+2u54WhxGDirrlVXoRfwhcw/YWUKVclyn8wJhXFP0ToE5\nN+nhAfhjzSAF7Z/b+lT1cne9A8oUuakeNMF+8AU15mZSbNeoVymDHwjYbGxI9jgH5oXK//FRPPiC\nv0okYT6j9ODdbwS6HF5FtoQAuYIr2x2Xc0gxJ/Iayw96p3xDwTEb8Ay9LFzL3yRlmVGV0ZKxzvQ2\n5BznOI8QI/Q7HJC4M4L2u2sp6nOAWXABO8xI9skKUWfyAdeBt41I0CRFT73si0RbImjuNyEaw59v\ngp65PuvHwTMTDDR3u0bCPHr/ZSfWISErv273MTOe7wGkqX6YbbGFtJlCszUp9DGn5Y3NB5O5au56\nz3uSn+Czn/f+IccjVwKbtrDlfOvdDk3Je7Hmh4AHW9b9ptvQxx4AAZ/mpqiC/vslysRIg6UnTHMh\nq06h+sVPLaspYvDOM4eVQIartqFs+mkmknA679PdSbstvPSiXQr+g5FKSws+yw+gVStiZbJmdULJ\nVRBVc1iztZlzVhdmstewo6yIcrwBcrXbzWhezcrhfUD6aJZ7+ak+ONrP9FWHlRW18Kee30xazx+G\nMnZPRNDINOIp8MTpqTXb/1qWFZL+128t9GFmkTURSYNHCeLRrfg7+SRvrOWT0RxC6m+wTvObWzu3\nVngk0BOnewT3H+wS5EjNvCeVHGMUhrbwEy7z7Y9eZZGN90oFd+9TV7ZfVHlm1oT40xfZj+FTzqIA\nt4PEVFwvCgDAcJw/twmVOyOvkOAruvZkZ7U2wf8gJVw+MXOm+kMFgPDX7kHD6pErCzbN8tWJ5MXh\nBQwnf/nKlcMjZZ2X50bgVwWgsFwaVJ3GXHiGulYmFTj7uJwxjcKt0GXV/aq5ALzN9XrIkJavtWds\n5Vyfn8J8Bas+Z8foBCtqgxXUHvjS63ysx4KnQIQAsOZ0QWgNfmYBQW6acnpl/1ueqKyAMZsrv29h\np+jnirm0EBW2yniWZ7NDHtIef69gY66j9t1htL73SaTXz+9/ZhOLPCj+cUOqiRitLiSNceC4sehD\n1z0lAm3sOziZaYWKYc/fdA0Nhk+Is5Uqv1S/SXIB7t/t+sQMmUZruLf9ymZHO/wm2NelogHhW5d/\nF/JkhX4mJpxQahizzNFofpWkACYMvQpcELo3ErkiDedX2KW7qR8nYT5qTk+W7DqHfphnNQkeIuta\n8A3GyoW4Hk58raTBrzK9Ll3TEzGYTF1aKGGoAp1rTZEFg2nJqyH3nPrZt+C8gk35Ral0KYJfgrcT\ncXoUjMTY2CGVXD32gTz47GXsUqwk/U/JszZt0NK0uIJPfQY5zhc1Cwd1Ju3BNEt7xRvO8hdKdY+d\n55JgUp6yEiwDlE3vXpJhyxbIsWqGUizB9GtmO93pF4nvJkg8O1KQe8Z2T+jjDV2HHraGnx71PnKN\n5vvQ0DDzZs4TEi0gXS2+fqI+BPLt5nuVlO6e5wOrsN9olZd6tf0Ec8mPPkM0MBT90nl0hjixwXtb\nR4zPWGcYrkEDqMTmBIFT6a5fiEoLVcRw5hizejG9sXAQ5ag/RlHIF94KnEaRjwynpS9ZJ2ZxAMLx\nMGjcJucKdOAFeQk4cVCPxY4WRrfWftShJT6JEYIHPKyMUQva3fshlUyqZ7HeZwPOHjbQjRNiTjVk\nU1i2YYMr1pPmHXH5BgjX9XBsbfczcBfDpKU0vLPBjnSa8r06Mt6K2iqAANONkm8CWgZXBW+k+ubz\ngKOuUsFl2JC5N+V/7yQOvf/ItgUD5AhWTjjN/gSMAODYvj3wG2Gy3AfhagUxw+D/idQOv4kFbsXN\nVcYH3SsW+BSGTq6+TSjdFNYhQK1crfDRrt5NFzTfV624DB+OJvS5AcZ7VxwGnrwQECukdq8BCGG+\nCXohLujf/lIIGNAu/MJgBF2ibHfkkTPYVTHVJIV5APGK7DdsE5COOCmDqMu64C+VXwNAq96prBrv\nPLmLck3mDJYkFduVNYfu4VrOe+GfFCMbdvDIlkS1Tf/dyjZaiv4pDjp9nHx2H52pwAJhRZM64Guf\nuZbsC+jhijUZeXn9FoEj3pqGL0u9+kafSxYbvz1P4ydGfx4oR1p9N/UDQ8/qhDfMi42vpt+hkDQJ\n/HCo3oCdjSY4d26MMEGUpr5vq1ggiw4n/sxcs1rau4h4qC04PGMmkM0vUTkOQFNo+WuiPGLigJms\n9qUsbMHDumB8WDFAO0LoVpnIk0YHodECK97Q6XKEys1w2FNw/ysioBBwEVtnS3TXDUqZHg6AIcGG\ntoiFuJGL2Yy8ZRHNFHpjCUXQ+oXbMXP6xHBDqJ+ROGEP18xTqQq5ZW/ZZiQUJhhwXwLvFsfSXu3x\nUIyw9zPWyP8nzXhtTd2P6FOL5oxpI42J26cPxj5ZDKUaY3W9+/86wAr8ZztatPPJJ/LMurNg1nbb\nrNfSeaYpLrrhphqB75yAeyfS1KLpq3oVIFAa9JShXQfVBUQ012EtlM0e6/xce/JSlHi0hgsTk0IF\n0ko+KSSq3hJbKfMnfYiMYCROxOmjRM+tB2j2PuGV/9blpx9OMycOY1kgQxleyXADTaWRNkj1kyT+\nDp4WslmBds8JXoDLoTAdA0nYUrQOLrShoXxzulHyjNZQ1xYGwIYgagjIMj3QIlqfc1njjoiV5J8P\nih+VkAw4P83yJPsfsAtvlGhhvB1OQeatnQrI/BWZ4vo/aXaLHUGwp57TwU+Q3dj/vIbB7X+p8JEL\ndQCQdgShMoVZHKbIPLG6PqdWGR9q6Rk/UiX57AGfeJgGVEfiq0rodVlOJufpkaJ/HlnAyGy+WZti\naOnfO9FCLyMBK3h9cay1ZHc2xcYYBiAuPqJd5uSDV+9E4D4QgRWw4dhgxGLytZwOVioA1u556cGP\n4GpuKiPVRexRhR2nDX9wq0vcvi1/9FJpEJkhaij+xP1N6Y0xCbObKJWddCOWRIRv+V519h70tX/p\nkFte2i9WQdzOZbXRjTgXfw2kCsGUZ+u/g7Jg8JtLsH/dlFK7NtGV830Pu65J80hVrYMiA/JiH3ws\npxQAO/lM8eGCJzNkUueSy29nte6OPE/Z/qbnD3a7X+ZxFYneE6xXyCe+aq/Bx2zpD7cS7wl8+6SR\nNj6SyIHDfMh6HLUE64bila5yAk8B2xx9yJ7+ZiRgKUcPwe4kbRW2HhAdsQcPoWIFEDRT17MjgUTE\nyflq/1xJzpqunuPypqBDoA0IxACxuEypDy+jqFe9jqNfKWakTeo6QemlJ10pFSB7tJZH+2c50LNm\nTKMpAGB9iQv52QDNVHvYxylbXzrsQfuF6Nju3q/HWCklfMKSvKKuc2ORSH65fFTWOxJqDEypLvlB\n9avSoZ/3p2BIjIo1qTBSxHXBTHBsvxVrvzp2h2A/oZm8XlbsDNtRrHhVFqU36DLeBHp7xgJd0cZ8\nhZ/K0fXS2fUWfxTv+6x4ZOM4mAul3vknNGbd2rd2H7ID+DzfqjNunG1Z2NRg39QxCU518dvxI+V3\nezpgsOvycDWV8OeoOEzn9esm2aJSIPLYTTx4n6bJUcPt5styIRnMhs4tm2f3ooz3mw0zfaQaoNXI\nMgLbLIDdCNQJMzbVgCLN7wyx7Z0a6cYbcGthcmtcH/KuvOEyt6RObAlJ8iutYPFarhffI+XEV2o8\nZBruTNvdwY/1STVIYR8g/VhPuxqthF7u89wlzu4ZwE53ST8K6itiAhb7smDQI7Qj20fjVdL40Irp\nka3U+xhQ6fKQjrjc+MxMl9Zywdc/xRvLvuF+L1XCwJUjL60lmb/jqMD8IlILVR6jFXfndai0nNSe\nqL3qKypo8YAUf9gMCcp2ni5CqjQdXiK2Djx6rfET0btD6EaeG/2HaVfvGvI+zhFEaPJERYSR3ALJ\nysb1asTwhpopDNM3e62+hlSt2MwnKxa22KNhKvSS2KIZirU0ey6GJ/8VCTyJxBdkXHseWn8qHHmV\nNmgBqLnBvmFMsuxoGieCAB8MgXyWI6I93Prwbp4d8HxyYkIt6qB047zkMMOorvY/9rZiCzlNaKFA\nW5BKiyJ3TM2kTjZceatWsdrcvH8mLGsL7NYMl7Fpg5afmwoGUdF9wAqjItPP+SKLrRSmkJA5JYaA\n3vQo8fCApmulIdGGMgThim0TwA4pdwVyZNVx35XFEs4rzq5hsLZ33BclcsJwdtN9m8uivF9I1GNW\nT/p6DL4vXoLw1M4rlAuugL5X90uvKQnAeydhboq+cEQo6VnaLZ7e/gAQHtKE09iB70G9SkjEnrWb\n2v8C5FtZvuGazec3VWLhVuEz1D/eMHLHaI0svkEAeLw62wtFUqmdt52mMzCIRG/FJ5fTvGVPnD2z\nq8moanbQkoWIC991leTl/MTISutiV4S6fKW/dYfk7F66HNJCbH0saQEV9N355oATls0SgAJCPDie\nXb6zbG774zCGJqy7AhW5WUBRSoZWLLRVdOO/DSkh0jSoaGWhXr8m70gC8BLZoqlKD4BtJlIDvslN\njR0/JCeUr4KQBW25UCQgXzbZF4aSwm2XJNyjmjbe30n+Z5NTXzm6Y0wFSnSZA0uYiBKBZGmRR0Pj\nidRHGY6X+mhuOoZiuPqlRirGwKKFsI9K15F1lohmYD0806H3Ci8lMkYHNYHYz2MLz2VTDDJ5UA3a\nlB675NDx/6+Pz8fzQmYC0k1A/OnRKrirXpxR3t35cnaKYhSeLa7L14fR/fllFNokHeXI7dHPKXAt\nOmOtibM3PjdH5Bilupd15r/pmud0SLKMROruwy3r4iCwC6cC3LSHuSCX3rLtIPZ2YzRzF0V8gghO\nzfWBkrYAZEF5nLZqDpNb/lfyy9pQ+nXEs3Gm3qHt0O+vU6mOWIAa+M0p2eLfZCBFYdXwaidtP/zE\nijANLq3yYeZwyp+H73/UrYXYQj4IVU5IW5NSVA7jYnkBuxmIC6a0kaZaa5UkPZSM+IlnL1UGZUV8\nzDO5obOQeRcUL0e88+p8nHyb9zzhBf4bORpLZLfqYgPJgeZ1O4z9BVTodfJWTt8kxajy2lL3DxIS\nK7egKNLi1fR4FZLPupEuNxKJRtYyjp3LweO9CRquyOwYSbGBpzEsl3+8xBugUIOk7ht+DTbzQKAT\n86BAWapjpqYIdWk60yz4nt5Lufj2NJ30p2DYJCsxFPKedBzAL+yuSQg/ObmoAPOzQB6dbT0BQVvl\nUCMIYbejXJJ3EJvPIh2ZBc/0jw606CRBoPvX/GjC5EA60n9HxvMzdZ0401WZIPOQyKOhgx/VS1lw\nphpy1Dzta7lgXf6DFpA7Db0dI00w0Ed9UUzAgLmR/zkLJ1OHubdE+T2lWhZxi7NE4Gn5/s9Vaya+\n+Yy3YrQGyDkFNKAWqwDTpWHDCvw79gFuQkjjZAsW5xgZZwS5atuGoJEbJOtuQ/3Pc+wi8wMXHkiz\nM1/X2nkqLhlbgTlyD7S0tQn9AXgLtmaqJ6KSyCraYHXFBpmmThbPmJTz0C9WVR0OgOZCL87ErMmW\nJF6kaBT6/Fj86Mf9a9xVbs1Cf5lvRWNJqmeCADMAeLB+UzNONAXu1fSY/fwzKtq9fhFfR85evZlQ\nOv3D3tUnSrZUGVO5U64ctLz+6EnPajdHi70PaeldaHUWQsoGHCKYdLOutSomLvDJAxZbHyZJK4Q4\n35a7FrwfrY/7uAH1OLAbT8/s59VfwNaIm2tXDN9Y9Why0Ho2GusGF7juYnUYwCU3TYxblgH4do98\nvva3i84OhNsECzI8w9Ht1RkrHM0deoSLb9VhGTAumiHgL7rFK+IyyJpYnrjGpJVxJC7ygddZqV8J\nGKBpwZBq9GxlaoCu0X2V3MdmYZ0puzucaVuocF/fuGwU+Fiek36Ufr8IDIaPDqpSbkHWC+zaFTs5\n8g1WHRS0kI6ZQWMLzFC1epDGO3hJakz7g6wVFF9fXE+OJJU4xV6CgJo/pqhcd5fxE7Vmke2LlkD7\nRwoTeuOaY3epg7zHHHAuOr9ABEya4ZzlRjY8HqpSSiPwf8tfUjSp+yrbZfi6CJGtykiZ7Y2Df/Pq\nAL6oVtKBLdZvT+fyrtgiFtxT6Hvc7pYmM5sqe/BkrgQAyPhWm3nwjGibqEHH0KZEdyaTuT90cW+z\nExUx9cok/AE3Enp7iJ+3wHMUSiVDtCDHMPPLsf8LoG5GfNZdmQZ40rRE8GsJX6lsnDIxIkkZPPjO\n+cGHT71KSOGfaCZ2vujBeBZ6pXKvwCDM9MPZuBq8V2nW67fMDH4WubCsuCuXlXJj+1OVQaUV7My5\n0WBIYgsmB9KMG30+ZcGKa/3pGWZPU/bmFo3BWynQV+LzmpZou/JvLhboOd+e7w6a9MP68TpS7vF6\nL0g4Mk49lfjadYnXDaI2WVsXX+r5+FuSFO0FmR2CCdCAVXwXW1iBZku2hWuc1WwO0Ux8Q2iojEy1\nb5ZZUqeIClhfnXhqWlafbuRQzU+Qdwle0nkMzyzz+lprmpco8FMTmIBu6gnyf8Zw6EoqqMKJUfQh\nfTemHeCCfD5l21Pi11D12PnAYEFhAZ2VioqQDINGpA0h29RK3GeBa7l8yQi8008CWLsOmtTVM4EE\noSFfU8iqeAR5Mxlv1YrCjs1m2Go9WPy6UV2/3FO4B3rXjY6PSlyq7oab0cjexSwK0Q+GK3jmN6KW\nRI1VGu+0VUAr/WHJDFhgh3XgOcyN1r4hdw3/hgdsUOk0QhZYzkkQ73HVBxCKcww2BNaDmSVw3tdB\nF3nAcGtz5gkBdwUgx/jnkLeL7jD9NN84455czSnCfu9+uHbMbKuoydo011nlMD7Ftc5jIwLsdxx1\nE3H6O4bEM3gBvcsqZKpsDen6cb8Y9LS1z46W1YiqyGXm1HfJ1bFTtwuVrmoEacTSKU/GrM05bbQJ\nNN9yzGYce7/yHZ2XeDsUhBqVTEXUp2z+Ha0GhuDd8+/ccWLE5URVEyWIo/p/m3rpGu/9lvvmePe0\nfgDGGys3xsOZHPalIHc7OybLIq37iVfKp7J047hjo5OZ4AmiHcpr/t0G88HVC0TP/9a5ETi//t6L\nFeD6teFiD0rkXIDaIijXVn+FI9dGn/8NJ5vz4b9cX4TuDS5qV60QEEjypw0VtdtVI9OY7Zrc2nZR\nCiAr0BM3kpwdP1Xef5svhFT4dmGX3y1kA9aCxdyaC4IisXerqbC2RbZmGkASKUD/JL7LzZDPDZ9V\n9guvITc+7yu7fTS4pUk5bRiih5GhCNQcy0gdDO+fG2ubvT+o5igtsOySjt1d+6nF9OJM9AecwDDD\n58Mg3XTxeKVzPlzl9yJQZ/piwNfaLBU5PWj7bNNYUTYL3Xx5tZgHRq0TkxuZxj+moHuX+5iTlj0V\nv+zu3ZNrPrmH8BW1NhwzcpVN/Htrh7sgpL6Go5YRWMVPPNlei4ZKTEtQr0fLnAKIRqUj8vLA/1/p\naEqCvyTIwYJSO0KXvhKw4rl47arDr+S/y/7EYcaYhEYmWNm7rjJVRQnDEaOivzlLe1sdVs+PD396\nSkX+BTj8LBqs+ry3IkVkanZolfx4ww79sKZd6VBO5aaW55TPSjOqMkvyB51WbVgUSU7h5ljvABND\nKsMhqq+J9mEjb91Bde5S9J4gDF/TCiQyDRG1KZaZ3qrvfHwPYQotb+MdencoMBONeFuqncUElMS7\neh0ni0tHQLZKqzBOtZ+FV1MO/ZE+Zk2b2iOYFsEQHJwMMk3jBzS1EayudCAep7tTeden4gCSaVWO\n2n8I3qeGoH4ONA/TPYTerAm7aPD+1LdOvwDeHhDbawrMBGJU472kRD5B/JiKr+AeeaJ+vyOMJQRc\n+l1ii9SpqKlI6pxyb51ZjUkmP0pmQzOMQE18Hf0l7rBuhP5eHko9kKzeOFyR524VSCHu76piTy44\ngKiEeow2rPpXl+BSwr6xues0bPQZCnfEvMi1e1q8UIxvLjWO3TCYAaMItkMMdHkVRyPGC/p0s5Vz\ny2ZY6SZApP7K06cRoPC9cwAZsofCKv0QeEC/cYC3mkAXamt8tzEPN3QVPFJguuoJRHcwOR+8KeI7\nYFablMTTxmSeLFTgy4SbgYv8mI5p2tJtVCB0HDIG1yyuNUvhKs3U/K/9KT5pmJ8IL7VVCaaSOtSV\nOVzHx6WU8BTnSFHI/EyvOH2VJ0ZOl2IHTizhqQn/Ndo1TQ3Sg1FeZCg5oKz3XStATa400Oin5agn\n0lkAb+GseQCE7d2w4PEWcPMosU8T2Fix6qEcLMwXUv0iARgvC2tSGFEZSWK13NTyyKMZu6YwGJAe\nPNuQRLcskmoi1uxs1DgqvaC5l1GyXUzZ/FkDG8dCP1kG9NUeAiRSq83iOR8F3qZZegoxrP/2+QCv\n82ku2RhN/UUn4mpbYXmt1DMBTJmAFGt8IRqg4cK2Xg/A+LDsgzRu3u5ol1krW7bNWRhj2jIITNU3\n1M5YqzqHzGkYpmOkTSpAEyCUzi/otb3ClKaDCpqamok1YCrtM30JQ/PeHboDQs4biwi3E/MQQkIu\ncVGdfFvTBbkmdj2ffsbNJjRr+4IwdKWyq2w/uQM/ekBaYK33b0kL9tN1T3Lyt5tDfsws+ebDGcCJ\nqdwI605pgyD6TAYe0u38ptufIWT5MoNWfzSnajVrAY2C/Bwk6edP1a0RVNW7HzzRLa1PdbcacZ9+\nYHdGbjnvOItZpa8E6G8gV6KH+N+fgvbzfTQ1onqtosdwbw8xtz1xRph40ZVRZg7pnhpq6sU8h3O6\n/7faYKNlUYZiMMJF9cNYC3lJaXzwJYUgejouSN/MQKLwLEp/zkwhzyfROQ9LFYt5nU+Tw9TN9J3j\npQwn8OSSVHTKt1cmaK3K9bJgEA6nez4bhoNiyTdH6jJ4PkeYCoUXS6RhxViPOxnioL+J8tFVHW7l\nJi1aLsjceNLboeootRXHYxQqXdYWqCV0IFW1vEpQUr2HuH2X4R2TER1RDpy6k4cNNSbo9ZfGKrkQ\nhYDoLk98dZGgDVc8T6Gow4n3PvRYyoGDOjMaPY7PgQrpujhTkOA4u0IFJguzY58HlSx/nIZg/tD7\nYpakZnZUcUNGZWFbQmZsEdX0jWTJGpSjMsF9AqjDWVxOMHTL0B9DfWHMXz/cR9WfoYAeX2R1FQ/7\nzOJrDnZAEZIJn21mPvs+N8b5T0vzn3qfzJBsjjFgJSReTIhU0nSpOwDVbThStL6gG9JZuc0GylfN\nVUYxqjBQzr1gy11rwUwnPlvb7Pu2UoQDfekjUgB1b0cTIC8Uvqf7A64r+h6tnJueD+xvyCktp5kT\nf0w0BarjpfCLoT/Dhc4WXP6YIVprKBFS7D31qiJmPvPEvYHX+PF2C7wnEcC5lyLv1UjC0ONkgFrY\nxTZUh1Tkrf2Un35h6flDL4EUw1aTtXSVS5G/wrWkFGZS7m3cfES8n+0FmVmKAsX+EMbf3EWbd2xh\nbFhDbpvg6Us5Qa/IvSS2h2DOftRnXF//O+HBZSyRTdahY1SjHHe1LLTmexb3T+hBy5k/+rTLD6a9\naLOXwwbt4OUP4/n/ndPwcC3o282TVMcdOf1Ili/tlF6c1pTF5eCVSjre3iEnXmjLzA6EzjQEG5Wt\n3dcFipbI7G6Ot1UHviYevdzNbDq1mm2k1ayPb8c0NtFQz27UEIwj0c4PAd1ODNFrfIo9VyNjq+AQ\n3v175zzX2bV4oY2+h1kx//kSL6NETxNoBNiWFO7hlxHiv1xZ63kpkee78okjJB+cnFrUA1OeWugw\n83S0wj/VKn0BQ+cG9RuoFsbMU94E1fUKN+9X3P8/WbNKdvZc/GaRxnUQ5VG3afBmntr5S54ZVR87\nZG5UPY2ugjz1fyrEozlvOWFd+tOdNyqUWrKB0WC7MpwEcQLIDKMe/W4Ng1iQNS0zBg04yQzm11Yw\n0PwQWpxDv5CO4CNeg45qmVgSmB/byV/3kTyVAIgw6HQFY/IJAY4OQf9tIsswdFLGJ2nwgms7NqnI\nBDaRZaV7PJwpjoCJ521AsctWD4O2gFVhsyJoIMNz7V6dUm/PaaTqsndGqDSakQoM6QBaePak+TP0\nGVfiqvet6yYdZv9h64PyM0u8CBBGS0fkL2glCzUmoK4oQx21F9H/GQ6brMV3UZi0ylqYncMDIkCA\nB8AyAHYihzYGosdK8n9Zs1CjfYwE+55KPrQXSNcQ8zyYXjdYbLRMRyh04ka/gi2bYCL7gpe5CbGk\nUnuRKoAp7WKcl5lszmSrlubqF9IoO/fmfz0T4d7Q05L3Pmq5qMJmX2C3nqwie3b70bAniApPi+Ra\nyMbHrSKfLLTKkh0TPZ+FVXARvhjAp0hI63k+AoErr5icoJ8TC+Y+mUwD0iClKAzRQ4vM1x0CL57I\n+RFw027TQ7pBkYG6htrTERiaXW76v8gtNKlCNiLNGTRjU5rRPYSZXON9vwY50EnjipQbjmvMkjCd\nzXMuybMfj5urF/+QjavmR3o12QP7XTmopmx4GeFZra/GnORbJ/vi1FkCb0JPWN/LwqgyyDylge7a\n7VKb3zgjhZfA4grrS/78cHzUi4Y1k89Dp6m7tn1sBn/EEd/Jszdm0/ZiZId9QaL403EgEpMXxUvp\nUWk0J4DPOnQ9B4ObzWOr4cuKtaPij46pH1KhIqm0/g6hEYutsOlIiOBDh4iUb5u3V6OQPqjEjceA\nF27veK6x1apObrsN+qpbi/G6hkRgCdEM3e1mlxbLIfGw9BoFB44VK2KtcA5lXXfhZpZwkQDs0dVP\nHQHNk1oz69DTWESpyV93Rw60Lv3hVSGKbNTovYtyRZ172Sm4SngQkesNo06CX65SoOX7Vk9DUaRJ\n3FtIf1Wp+q86RrB9B/FxIju+suXsBDWqAf+ETH6TvWgqHaoDH3EsXqRS0aw4/GkLi4IY1koHifD7\n7HGWNggZLLhz/sKVF+raAdNP2y3nKXm5bzXwti2qCtBcOldsM9x4vTXrXTCW27NtRkIzJf0Jay8c\nr1Ua/A40YDOg4PakoVJdSE9JA/NxxH8hdOhUlFKauzmkCBDciENb496a//WnahheTvVK2zsYs05F\nXMBpZtfKfUbZkMfaUTUWk410LSN9bhgS7hByVXm+rxnri/o3+dNGh3rhfaeWH09LuQSWXtzpqXk0\n1Mv9W+3qGMW8878qsTJF+owSoWhLTYkEC5UQaY2Hp0uE74wgTu1syOvmv3wqkMo8aBQVL/Cjhtye\nEktGy31/lvmOZWWRU9Tcwf2x0JbXZypOHlNrHfI1fNqkl8/Ze0byqdNTVexA2Aud+AX1PvswaTwG\n5ASpX6oCexxH+VyERvBbe4pDw3HdSRj+5Rxl6tFXAIJovBjAC3yFUoiQe2fqdKoHz3WCQEyrPbfX\nGG7HgHZacg8ovcgtZSbke6OazpCp4tehisx7RQHjGrY8Z+S08XNBvY9xrJiUU2T8wJIQrksPD7uQ\nrTWUgsn8B+hlWPCKtLSvYWX2w+2TrtGXapsuVQT/TRc1rwlVGS/Fbjyaka9ZHdzHYzD2RPGM23xv\neMLo5GViUVt9sWAxhNsCQiZMMp8Rp+nxeqOD8xliLD8pV0kuXvXdx2Xu7ebWDhjsDaiRAkRemhHo\nwDxkG5PyjSre+RZUIMI1EJ0fEgmoaUwb3OgzbAFPjasygU4561cJnxnNHV4YiXBry9ClqWtwNaky\n8cbDsDa6NZPfVABLl1/uwVOOITxAAoE30HPQuhkPoyNa6xZs2xUQGvKRcSIxfd08UOVmqgTzEj+8\nFviUQ25xBsxAAKNglIly5MzbFUO0E145P4p8dNjBjXO9qmLce/hBhZ5qARAAogHtMkwf7unxgBSG\n10yPI9IR1rk92JiV4GV5hOxjkHbkQ3n+5bHuQEykIC548x53ZJ/5EZdJMyVlNwO+7HepUo7Z+23a\n/plCA47hrh/tVUv0EkFlEX0/r8rd24QgpGEzHRZRsE2QsuPxwa0R0DZBU+45VKw4rmUGdadT31W5\ndBPNliFsu8oWVWQmM8DakOGBSRb3I1cHZDVSg1PqMEP6nIQbylpVKdz3G+P1JTDkFDB2+dz/5bDu\n6iHTfOkCpsOcZNOqYw8b+9P3j0hZyF7ulpHVaqrY3jNrRUipA6q4lK6MCRDq8ZvbIytkz2PK5+JW\n1wlb1rNrhYNDQBoP6tu/xpCjKeVi0kz0xMDh7Z+qSajxOe/SulfMvrF7YwOP0Vjrf//rK43UIvoy\nGH3/g7ZjpH6aHmFivGyQkXpAkuDGCx0XIvlR64ctxJb4RcwmTO6bm73kEKRluomfSfaN7l+acgM7\n1JBzDTUvD2DyGX+VOoq9b7GmqWJEgRk8Ys5MCDTMKZ+hdPQ2Wg0UBmPz8fuecPMYg2EFIHbPK/lC\nsgU5BB+Sc8lA7+S/ZF7kTqBYTw8cN7PLeTE9x1oSKEc4IeNa+F9WR06Il++26ujem8/TFydFd8vz\n5+jcZYbGboZhdv/47YGyWjU8pE3Swz40ChkBfW8MdwBS58lhEZshY9F/dlmekbf3jD7Dq3eEP8LP\nlw/Csm5NMGaJ5LfG8CfvcVFFEmmXbMwNR3dCe/kunmnjsVSmLTVxmLOpcMFOnBkLJ8YIHla3+67c\nTxw0YR/GNFmBN3sDlFvuMAX4JiMMpNERH+4YX3fCKpFWtHyB6YGggoxZ/bMnX9BiHoZyVzd/CeKa\nWS8Hz4acyGUukaoDC7LPYTA90o9M6dM1o3DuoEVAMD4Ou1RKoQEoUl7up7N9vD+A+6Jo9KNjPdH+\nAkfjWqGIy23cgpsaavAvbj5CghIq1TzcuPJBo/QtP8PXhSCBTWqs7LF0iE+8LvfB0vTYDhrcnAUc\nKs4SG0vFDk+Gx0k/ZU1SOhe2ycj2RAytizDKS4i9NmdYpnT8paiJwY7y2EvH911QjTP9BujqrsI9\nnrV3QpJrSBZuiXD1BjRJ0KDD0lAh/gbuw7foG3dfQmbkkuRziWSxlOLORhYaj6VP3nciLsumXF3X\n2CdtcO4igh3DGGkV7QcGqqiZTUmARGDce/Q39wPpFXHG1+oDO/8dUYioDWPxfxcH5xJL3fvEJYGR\niAEpbBN2LEVJN0ux7GAvS3Gw9pd74sU74QCz9TowHVh+c5i5Pd6ObkJgUIin+Xzr0SeB0QcKqHvf\nvm8mnBmWSQzz4ued9Ogtb1nimQ6VcCUbPX3dKqDyQ6HD6obGPiHEYaEP0/KnPjD3f4SqEEdcvJrK\n6Dtapj9wPQo0K3Fzl/VCqpfMk96REzX4kmdTXZ+i9KLXcx9qXEtUZLAfBekyl0BtTsamtaJo0uFX\n1lbR9B7m4Sh9geOdocQdgd8ZkpMuW9Jn8ki3Dvm9Xo5HFW6gmVleuCFEtRnI8gZ7fDma/5Vx5yP4\nPooz6OR7mT5B5tdg3ffrWLpvcjT1NcwRW0XqwiWayynwHl1d94zt7uyXmkbVWvE7scR3TRmR/kG4\n2uVRlMQJLaRmfBWCZb2kt+bILL7RGvwxZlM2AG2sj3YVY4bzlLcwXRRD61bZxK4OTPE5PA9Q1JHl\ncIsAMSTvqB2Y3tLmpIauiHqnoBaCwZhNi6pgMJQMDviofyI6Hz20sZxLvqaIQVvwvSrCGdrtj8aL\ngQfbszxAn3lEoqbdCaMsbWD0YIj4VyFXzcoYacIUhyV4FOmjspozQ2q15DzU0/F3Fd4W4iLWVPdb\nl8CEj6S3EjCCDKWRi0wIctKJnB6Jb5UZUU1kM1vwnWNOdWQr9fiDot5LnovaH21Xg+pTOlAcIGS7\n5k7EyxjFJfzGk2JVJomHY4W2t0Xd16d1ZlPHd1wyH4pLE+twdt3U+vi2a2Xa4nUviFBn5AHjCW1g\nYlQ/TkI3tZghybleevPLNOMo/sZFJLAPXX6WR+diqFNnWV+JOwPB8ySbLUcbPS9Q/XCuUVsd/ODd\nyKUHG3uBLXfoSIxwycbcMgq7GT9Gn4KOOdJWoO8Gf9TOz6Ql6cCDHdFamuxqjjLwsF73zO44Aq1R\niAXu5cJL4YadiC6KUBZjoL8zsnbs3Bspsm8epgOb5+dr5DEHwStbx4aTT1sKgJdxg2szdv5IP/wI\ncDBu+Spg9tCvx6uWa5BOpriCCGY8P2vhJvXK/9cRfzdgv6m7XMSWTyuHRWl2BcZ8x5l3MLvYN4os\n5BdB2faRmAi9thDYE0wzDcCYC3QRqg3+FaMpj32M1QUxbQWm/qjS2ck+5wDSj+oN+5w2FKom8E2P\nczJe4ROrVhaKgqfbE3dWP0lBOeDMX/7Mk8vvn9jrScKSHD743rxFJW4QSUsmX7ApcCZmJrK5BzfQ\nBfnx7C+NC7PYvSdqWOZ0BfI/3CUrwpH82TMsWa/Ze+icEnDfaRo+FNN4fsNk6CSVJl2SeNjSAZwF\nkK1ZvDNIYoSo/aV+KVR52WVTn+XaCK/crbONsO4fLk3+VSvQVP3k43UFjwCil0c912pBc6pNxfoc\n1mLZ8gznZN3KgUfvpK6t7pu8F1smzBhAmnVYrMmPilgzv1wNamIkRtEztbj/p6srJMZRzVu51o0b\nNr5PAuKJkhVUunXFRbseQrATuKWff7+16aXR4tjpcyF4YanDmTHQbcyM/4zZpJjA6MrlgvJ8kA7m\ntcAjr34r9KqqPnBfSIiM+1GILaFahOHzOBlJhA20PbOnb9Fp+0LGCV6aOrzpU5frAfE41RqMYnUO\nC6S9kUJxC0063PgpTZnU16FHPQmmDiT/8vHudM9JXNbHEpzSWuzbElZMprESqcel0QZXh8/5Gl3x\nk+lykUbhX+ohz0Wx//Sw26/UxiK5OL5S1qLSb8tnrq0/xcqIF9bB/vB5n7Lp79nFSI+7XVJcgJha\nVjjqLYGLjR+WBh5VtMu3BHDuOkM9sLYVRvP25xWgybmilH+T+esuFYTp+9UVg2HW2C9AiSHccHrs\nAPotAAMMLc7wZ70GXUEIJ/TJW/Zs5UZpxR9eEJ7xsZiGo0Dy1Aou2eNNQflNfYLyEavm+KmBlY+e\nlDB2V/9jZvxJcO71gOLVKT6jsNZqCcW5tuutp/KllVojd/o/B0yDIqmSFBnyKqZ0cmq3+GNa9rsA\nKC/i0/7m6nNu7gaJA2FD+YGxPfRa21tW42R2Z+xubLMyMS+9ccd56Un8yCdUJ8sw9U9jFW6NlzD8\nwpixs8RFlF2mBmXtivBuQDtXgNtPM2lWIsEFO9BO4NbQj+vZ+fTTYoRqFmsSiwJ0oZNY43G7V2MG\nAOQ5HqolRvvDqbkT7iSFx5IYq6N3HjZ5TX5I4IhX5w+VO8iB7KKBgOcu03MaiXqYMOqI8MgIIuDL\nBITr3JiKp+sMbRTGXK3BRok5KT6xRbA/gF3xwWM2Ascp4SoldDlDZAl4w3qnnHJ5SzHJuZEDruuI\nkF8rzejtCTEOrzf9OOIcT/fsdGKaKeR/jafqBf+ZHNzW3JjQb3iTrKhsRqI1CiYQHsj4i+aSz7t7\nAluUyQEabjeCSu72V7yokrCnx0Leqts1K6+UPQK035CMYQiWhp9dZ90S4aVJSehzCzcRcI4H2/7H\ng4xhF47n5ieDvJG2IWioKg/ojM58VDAkE67pdiCDX1FhRKC0hwn0MmdOT4UCL8cT7xY177uW8Vv5\nX8pUhhPFDcbjh5k90Vv9yMicpU8oeqv3pdlKj1JXQZhsOMYoHu5jQ8GMmTpkxcONgnyqs1vWMd1e\ndbdGraft/6M0I/oMt5xMtiHXSg1YWiq+Xy+hnczNFoQNie+0C/ju7EMckNu1mwg0/T8rvPhPXjrQ\nOaWZISyGAk+Zo+1sb3694p1uLK9ViSFDEh5smty4xFcfZL4Ev3o+oSlwcXbT6q6ZkE0AVozL2RF/\nXipZubSyrPRMhh9IfUlJAppPUW8cQ4DFIJTWottIjOb1qUVk/8dvJcNdVjur2y8MjeQAoGd5KuTu\nYYh2+V6p7/DjDtUe9Y0aGFlS9zXS1v8CdUWW0EihYq3SVNe0viRxLMB0sEFzFT1bmn5tWEfvEGqk\no6ZgN/mcjcjt9az7/gxG8KT3BsFm9EUtfR4yqWNmRgUcXlX0/mDcM8fQz0A27l5tY6HFYJOn8rPE\neWDstwfNSFwcz0VT/BA9BsLoBjLUESBP0PLCq4FR+W/ty+IwFv9rkpjg4aIarPHF2Spezw1hp0Dq\nxgWropfar1R3nvMvg3JMipWLzVEPZbcngvgz5ruvntoV8wffSss8Pr8ReAVUoWDBrArHCkdiy+oh\n9AAX5+dEYb+A7jMynNvjofIbKPjdfuFu7pA4IdAzmQWWEIXDTiDYKTSl3k0RNQUJ07WMW8KHPuc7\nVkD476C/8KmnVHVg+XKgRxpr3gqMnSDFh1yPg1V5Kj8ftxCmxZFO/vaF/4Y5nPG1i1to1mpZqSpU\nx8pEFJuh3aZiLlUK3fPimBJ5Okz2W0wtuh9LIZicVZOdJaQOnarizj3bUIZrs7/iqHmJLLq8o60m\nZTvVpQPGyddxssVpPs/X9IlV5ve5foDRRqkQAA3+ALQfyRY+1TT/4a52PzCz+fU3zRSiMufCtM+m\nHVKrTJSpAZ7jNwoKkr06BVkLgKCsxSMPkXMYdJcaJ7IMs6yw1N0PU2kWrl7SieaRsEVjx3af5NjW\nVQs+7OEgrudJkBafRyqzOcq23MNlhBFOHsUpKYm1HKpuHis26TGKOLht2QypVR4aSjMyI7Nzgz+C\ntspZ//Va+cshontn1Noy2lVo/8a6kxDnb/UsKWWaMOPzLfkvdfTLvrSpeBiceCW6KZAnvnx0xzJT\nlwHACWQ8TKjad8m+8sy/IBalZRkju9LWn8Yc13fJe2p4PDX2ATQ8+DnPIpkNS99xUmvVHi9D1FoS\nwAZnsLLU6zBgjdfLus8sHFKH6Nn1eJl9pUzZEROydxWQAX/ofncZulz03j+WDj58QWEfXeWh0lrm\nvFJhiROptvckHW7lSakqEbFat9dFt+4jOzaMV0rh7U11hL7Ia89Rck//JeEYommEKMeBrmTRpfy4\nCotPLKcbPyRpoqO1aUFXoBnJgO2Apqrpic60NhpzSG2F6FvQwaoG+eumixr2N/irx92fkJXZ2HBa\nPZW3frCLpgtLRbPiDv1ijUtKg0uFVcZDv+o9lYHxAdAOTPHODWM7gEHS03GMVnLT6WR4vfxexZQD\nuCaucy5u+oNklXVkdZ8uug5hqBbTpR0U0mETFt6kMEc/N60I+16OufJSS6MWCViOig8x6+A/dSI4\nVL0YApmY4CkqJSX8cVFZjKvwVlqlPgeDl/mnNi8+fpZZfgTi3EhSFsRp19Pos56obiRU9XQ26K6Y\nMmzDbTp4NFklC7BaE62Aui9x7k1durk8ynVvEfOaiBvz+Jdrz81C1Qkeyh9e5O4kXb1aFSBnruRo\nFhuywWsWV2Up7zKS1HJ5RD5bcJxZORe43hab4Vg1IGGRS6inob0nYpj4Va3HHftzeX+PBufZgz7/\nW9XYoO0nZwXyq/Pjv910cgVY1SaFSqYrHl7sjOrZ0567W0qFJuDCEu5pEAZq6GShIiroe5f286Jb\n63KpnK59T+utePxci9eix9tT9QW+SU1HDCWAXIw3Sb4B3TbEHuY7aAOV7t1UtMVx+5/MxKNrY9CE\nTvOrOVxZ0ZqvAUbYOOdodn4RNdXNkggJsV2R3DiMqqlzSjLinoJgm7x9MTm9ui0EQOby2QPJic/z\nm8mfeIRBOaIA5wFXqRJTtMzLqtuvI3zMx8jqB9kO6ZmrcOeHOLdBkhWC4w78LAZ5emz4NkLDw1/T\nJK2GOewwybZO9gtG/smnSrXXFaDcyJkc+SsDiEAzuoY7aM8IrqpeDrBMUE+z9zCS5L37CodOR3Kf\nns5LLtBniFcGPpyaGsd1T4jdCBF5+hLCuwdNK8Kp2BKfKjV8LhTOVqBx8N4AGq0GvAmeb6nuqENG\nmzVS9UErf24rCkDpHk3ojKyg10Mt3dJO/Ph4Bgx81bqazll+tuZqiY4kkakg3Logqgp8Qb/TAW7T\nptF8qG6JGOO11MCmlgBpW05weNAfq5EbJFVBUrc+pFe3PXy4BHvzgq70TL6PihrugP/7tyF1PKXH\n7l7ImdxnCTS9SW6nsw+uBU+6tUkvQgMzpD6GdKi55TENpysQeeLDR8Qo4DUwGNVRosFdwSOSjekB\n3XnCFCVBBIp2ZZIJGjMnIo5/9nl9Pxbpwd7SOcLrRkF1r4E2CfNs3s6HrnE9dFhT27CEmxSDUqLa\nRjsTY1Or2I6hgeCeh+VphDq2RU88vYmzlDZvIp+MCYkaPqltSdzaSz9G5lYSF/pRo8TA9mf5ed8W\nizimIHdzq9yZTgLzuvjmOwMZYl9TLVtNqZwd/dfoLg27iFf9kNUePJEQUBGhP5ai9n04B3BL/FRD\noQ+7pymFrb/jS/tjySZFmi0vhkjn4tjxbdhyWizesbBb7F0X7X1lYwEVFT6iizzECp5TMJg79Gt0\nIbd41dJr6Od6zOuf9HxDb2Wp5BRCB4aDf52O8bqzPuf4Rd+sd0k3+eoVlCf8j2Z9fZvfV+peMGhr\nCtLyL4vn31t3zz6bYFQbXOfWx1HAijBVc4GfnBVpCUnicHDow4s2U2IGNhsRqNKlkbm2Vg1VNWjG\npDtoP9HWHBi1CWZxFiwIwHx50kzoV9hG9d8o2+M+53fo18eN+R0CxKj7vLe/qptGkSxnUrreri96\nuobBixgHU8QOoXk1SrkIB/5qYglWPTp994YlZVpFGj+c5ilThmtP7zzxopS5L2isleTT04awh67N\nN78D/PJGEFzX/exwQ4MFZ+rRvqduU4BJ8AajxBibEeT8SVc6BaYyZ//7CCfzgkb5WrDC5mL5Igdy\npN+gimizqN9N/CUKAI7D3RbTfTokgb0QxxW1MacsGJPkLtyqLPzDlxFcsyzZPswJDf7py1Tzbt5R\n+C3jpruKbRfDoyFxC5+Y5RhuryV+JqOuAS4xy2yA+w8kVdncV9U8wDWkkdwzZ/lDC2+icYTxX7ZP\nuDw/rrFqCFHhiugx7x/LAihZXA6WZxcSg1I22SojlYp0ashvLr1NlMwSHmmyie/SBZeT0u+rvqSy\nLt6v6rJwLvZH2vywG7RLKatPwskSoH8FuItq+EBk5tjfpkKQ29A++gKpk+QgEkQotPR+2xV86yzN\noTbRPqqBNteVsfMKb3jYUgohnuuqWW2V+jdp/MWGZMQ1hC+mf5rM9RS8l+Inb4DCuDfDWxrp2T6E\nTk/BrnpocoFHILYN1VfJqhZkyuX5IXSl0m9DvKKyIR/EFMEVVm6EK7HMQpb+PWsDyrNdn39xBGla\n7RaeI8GbcJLQ91CmNBW1LzCk4ftyQbfCUzK9Ofjly2J9s812+bL74itAZVmPFE13aaA+8WBGoGXf\nptyy/IlNZ0xwI9WKFK+SbVUPilTkx74rG6eETxp/bl4OBiA5TnU2/N+SvzMkDaE278P3Ybj12Voo\noe7VlO3MTUmucj1J9hcTWh9GKSAtNOMhuFalZFUpi/KJv3q7Mhtinvi0fc0ZfUk5Pu+u4UgA+S70\nJgl8xbgJI6ZmymgNEShpmQCXbSkY9phQug69pFQ9MJgFPacYL1khDoMhFhDy4tUAfDTFItlsXv0w\n1K3fl4UOyEKePBlCljzoSWL19SyF9oyyHSmkWYzZ8V28D/OwFSAmasu5/C3Bt8tyKzRZDbDVoTJV\nfb3JHEp8yq7jhR+LX+4XTQyo/bG5HOmJ+bQHQGAkSyFBvzyCVAJNjTZh/0pVZK64Q4YcYsksm88x\nTafLsj++tUgTkzInKWTcU4pO0LHnEv4R0j89ED+eWAdUnMx6wrX80HXKf/H3y4ecqtgIpz3OCzHw\n1ib4J4YWp+ruj8jXAxPFAIY4Y/TtksSuKl5KWOtAlFdFgVFdY/J3dTsnSQIqNQJx3m6t9Ertaxr5\nUZSJEhmaYgloc5O0nC0TKtQGolSkB48iHqehsGEZsNsSeAtZj3EZdMHRg5IdSddOSAiRRhwPgb3V\nWsLGqKFWzsWXMrmP64V985tsjiKeM2z0fVU84+RGVAHOO19bJmDilw9s734qXWCT4ELWOAPXGnye\nMFLlVy6WRjwW8U3KfnUmdJ24/A0HGyGSV/C5iukcKpYaYNFk+k4xlLasSEzi2NjIw/tJ1L00eoko\nVNRq7GjNWC7LSKOpKmdbujZCBqMikopL97VkQt1nfDAedFyu6yrgK8Tp5NhUqlqqx3gMlPTGdwxj\nZNgf9rgspmUjuEXtJRcXhFf3SRvn3WantpI48fwEIoJTwSFA6mDTSAJ8o3Idqp0uyk4W0YuqAiWV\n2PId0CcUIk5A3KHuDt119qRtMcpqZgS2R5WALre9/X6DQ/NYL7VREZu6L7VfJn+uHfObZKgl75O+\ncARkLtdpSSKAKNMg8+wnNCeNDn6zSLW4D8/AnB1L142SPv/+dpYpSGhSKjGkDKvJYUFk41JwGrP6\neKZ5SsNkG9mAEbzyTRcFZKQNOnfMlbBPX99+PpIISGVt6uERJuEuOzLspns5hSS9mEQ2xPeqp6Ne\nTivSP6H5QNBJV7uDlYKgH+1+REYObfgte3FBM4HuRuyJ94TDwRq44pmOv1iZFZnWYZ7YrSIoyhL9\ndcOARM4Cqpn0rgZ+A2zqgj5ArIdK6Y4p+zsOf+2KzeHkYR7fwPs8wW5D75FIL89V3RzG1ZrtfYQ1\nlflYPfBBgHZWBgwqR7LsRYs2rBxtwvfcKrmrQ7fl4l/BRJx4+zKxLReZZSAC5WQWyeNAYqDZ8+Cm\ncYkDyyPBBNrooylWBuXeInJP2FYsVA2yHL9lgnTsh2Fki3liQK+MrSnWe4Y62D8utoFYas8N1Avs\nWTRnDJRpqaa0jE1AFEjnQRdDGhzVZVXZZoFZ4J6UbOTYqqLpVxkWewH0B9WlpU7CBlIAmRlDYudk\nfo2U+LNiz8O0nDFB17YvERTg2Gi8InvBkR6K/AjRATq8n2oq9vqDFwS8Jj98gkO+BVY3eZyif+uF\nkpl31ueG9kjVVT28dj62KdKRi2d5Ldpl0ovbBHZF0LD5Fi7+fhkMSkEju9GKDxbNvdl+qhv0ftL9\nTNViyfrjicC53UFDH+ExN3MH9hTt1rvtf2oCEA4ubeGNeygd28ZuHWHITSObOM/oMuwyXr0M+Pa8\nXb1GZdB8vJD82e/hN3IpV5JLQhhXbEvqPMadK/eBW6baa7TepNDxtZWnuDs1kWv2ZHiSwIK/hncs\nAGHAGlNb/Azp0+9GXZsNWEZu+U9zl5SlaTbvoxa+GqcHe4plr5ROu+sJt2G35WPgtYxQq//60pqV\nQdIMxZDCYLcJMB7qtqCsuP83vk+rsZYXrSh/uT9fYEnNKwL1qsuLn5RGQY7i2QjGnaVAmJehS9/3\nI1FNbc2DyzRZzZe42CpCB3D4VupuayZE7cLZojLzcZ2dbINMOeynbhMmE2e8kv1jJmQpQvmEjV8O\n8gIByjRk9qDb4xn8q8s43N2fLK7nLdNxyd6opK3AW1EsY9xJDC8Z6oMj3psCnDMko/oZqoEC1JPI\necOowiEfP2ArLMLMcWEyut9oNyKdwEexodekYea1xld4i8Q7I7plftuskabjMBGm5NBm+gz8aEs7\nRwRafiq8Wpj5udfNTf1sWY0VUyVMvEmWCWRyL5lHHk2h43SrofXKoq67hAgagzHarz96e+m9z5gJ\nY8TMOWK0RUH7JyHoLayS2rB28Q5Nh3emkQ1nCtaNlUerzWV7FmUko9r/9TEy2Uwpp5tSOuO04Yee\nX7Fy6Nhkt7gksXN6O2U9YKDcU/vkObby0fvH3yfW18hpPMXQL3IX4bLvRykVVUxZFJQCrExcgfJh\nIhISwHoeXPlAtbIgQeEpIryqhmY1TMkzavkdIsnkzw+iQBEZod3zmN+piK9esBQVe7+rkui6fuuk\n1XY4wOpbPlAadEANcsaoPBhxAk5VFfVbrbmrVHDDiQ5dcBygDf46neSgONSrLYZeoYzhvqUUnf6T\nL7761FLiOCzhF9OOxxNGhtu/fpCUIOvbL5FqY8kbCa4a9AoVagJr73qRGklV1MhNDrYDAtODV5HM\nBaJ1n1payJlTRpCoGySTwv8aenVyZlg5pGX4YYAU+SNseyrOw9j0q/xQRx+XbjIloOBD5r2X/ujn\nI10sBUAwws5LShCThnQqhTyzFSUTuugnTQDV7vyR9IUqZbdK8z6kPxGsa04V0fPBbJuRvE7y4gxF\nay3VNio+0fIO1rAwPcvmHX1pPt94oPYCvZvEdtYoKjf6qkmMtPzr3e+/w70eFWf4kPROcQx+57dq\nxs609zK8xugpHAPmk/HGuEAbYLIRG5TbVG1TyRVG1UqCNcb6GAomF/GvlbPechSrSr1T2X6EfdOj\n8UEtxsN3xRk9nPf3JRh7UQQr//CbQOl8EfBt5lp/gmplUEmppXt3HrI395ngq5QE0n7qfSq7EsjN\ngh55kHUPCCP9LYipLbtxgSlLw5BcZSiAEIcpoLRlsvd277qVOKlBqx4OzDNJui4NwJSd/jjf4hLO\nqzN/Ytqoyo+UP6QrrbTKGiRvaGRUpCr76CHGiq7EU9l38Bf0icDjHqWs4gWlWQCWJCBLjgNGsay+\nZ/Cv1yLX5OKbHjgewXd113gkQKVJI4OYlUduWOxz8y/R1AIGEXpCOTOMpHFTc9RXcrvNfPT3gds+\n5QNWumCJo0pqkzxyDmeaWt5OxXgmUms6x4rdAiNayWqZb89mKz/unkrBhUR3Sphv9mozKutaiOHw\nkiS0IvVFbSnJPsKru7CbSBTNgTHfHrnc6HOHsUmDGOysicdSr7L1MWkgsSLwKmTHDKrhjzfi5Nqd\nevWU8QXs7qNHvYtSdgR1UqBguX9D3kXX+Tz2i0WWh6D8wi1ApxoHCujb/fZPlmV0nnL6OQhEvc3Q\nYMFUZx2nVSmuhxymqqi/V7OFox2Gt5xh+SCrltVixj4miIKz1q6cLdOHCdoOnxQmExZgoOkGgym7\nZf1lTXCUHC/tQQrsJa8elfg2nR4BXEe2JISn1R49X48hkZomKVAW8DbIvLMJ3noTY0VC3Cp1Y7cK\nhBOL/MurVZwEMUXtwUJ8/ynz1p+VB4oZGfkM3CxbW1bVS8YcC4SkPSwOGKJ0BrO+FXFUWBq1lWBK\noqS4IutSUvoLnd5T5DQDjrV6ZKaOi4RDVk9/+083ZAh4z7kpkbgoj8LpIrYihUlV1v36Lfcd5ko8\nTeZjb7hMnhdZRxDuU1ZiCnZwGjkJ8H/jKQuxlLdBFk9vV4DFVJozCrXHyybN1IZZd7baRlOfGxiT\nL+gSMs9GP00wz4QuiL81pzz3ow5aIc+ZtPVKwKMUV4hQsgCTp6LjBnrPKYwltm9IaVMHQBYfoQrt\nc06dWDL+AZ8+CWg0lQjX/HBNQTGkVuQRMcCd7Zwp+ABRDKdmUKNWFqZQIpgUIiDrDd4rCzxWX7bc\nvc6kPnpnijCOYz06WgYt0I4LrpQ2n4bBQza+GGyjQKAbdWQPmxxz9GGs9dR4Vc0uLCrG6siukxjZ\nuYRranPUU2nn3ufCykdl1Az0wyBK7pqnNWRoZ5EifHGBNEj8bkpzdSX0XdmnXYeYHrSpIHpob5kq\nOcVaEwm5UkrsoIAWWFO+nqM7wuaPQLZsLrZFSowB41vR6PR0HVD0ef1KLuETf9PQlSFOuDl8Hhe/\nVZ7rob8fL6c80Gq0oEbO+ujxC2F6g6YgopgICbxyDV2wbu87xAB2MU+YUrcln/CIeBem629RF6EJ\n+IjGhtaKPxd5y2SNJ5HRD3of++0h6bGYDLTWJvQ9vVboDoeYHZwSsen6jpBMZcX9Y6b84yypRe8m\no1xE7eoJ6kXb9nqqTmxYZ9Dih0y6W5lPAIB9iQA2L+9sIVKmbZVj4yqhtmSsOjLjQFC6WgX6UrTE\nPlaqsGXIumIIBcVLxxv9n397cky3zR04ZtZlah1JR14MT1APm8KE1cTSq4MtMEQMbPphvQWBGDzr\nqNXt1bc5a6i/IxwCEwk5RvpN85DbbbIjYTbx2i3n+2hpCc3JdlJETOKYLj4Ap0vf8HQfVhwLK3Ee\nbYr8CJ5/VAh0T59eBnP1KgFuRbSgGIfqXTfw7IxeYrjpyOj6sAsAHho+oNtYsX0iFic2OVsbhe9B\nnXb7Xc00WTRafPqEt6YYBMexue9G5O9NAvXvQK/dzNf173ClKiYCHEMew0sHT4DgZ8jbIYd4crCw\nKQFTMGlM9y97l7YRif6UDl19BUhMmLeW70gbE9AZtGJLc6CHWvBxea5aVsW3UpHNeRo8f/uwnGAe\nQzpLuLjQqKiwOYDCWwrE2Jq95v7vScXWGv/bVSFn0ebCjxZwtrA1BkfrupnvWd23ct75+UDPnL/A\n/2VXuhJ/tn/GC3pWxW9E3D80oZ3RXqEzjwZeDYEEAozJyah98vBS/lg8Sqg1qQePFloJGwB3tiyH\nKrL9G4UNNw6ShhRI3gTKtLXFc2tnj0IwDyl067FZA35m2pGvOh3ZGwtPGJ3cSA3FkDpJ38lQNxOk\nKy30vU1wZuNrUU/RXRA2mJdR6ciCG8gjGZV27Qn3PXn84X428ZwIbHDRRwz1Xi2DVg4FTdkC/ijQ\nTUqS25RdnY9khsKe7eOHtKOHNi5I4lnkchjh3pzODHUFOngeSh/sWzbjhsPGe+FUXw+fCSR8Jh/B\nDHnB7X5eE1J/MI8QJvX3sQoFfco2TR6pkKQo1Mj+8d/pRRbJBovZxdpNPwZjET2U0ntex7cRArgN\nmvkF25llJaTEvfGTSTIBCatBWqf7Myx2NTQTqGVIKwqi1o8/pggkVZ7o+4Ibw1UZYuz1tMpIwGya\nGsjcaBZXK3mHAxOXOjuYaboFT+NYC2gNCKYIgTQwmB3h41hUbB3dFqvJRBH+PWWr+0twTPvAxU6x\nm3mCLQNpr/zGI7qaM7+0FlMxiHktpyH+qXW+iNlQ4rDYdlXI2Hh0hp/JtBGLR2MAkjM1KZdPedCm\nWcPmVID27WaCu27tmr8W2BnRwwcbLHocw53qh2dBhLpB4hp5h1spJA2nHB1JQGylh7h15JC/u98b\nQioP8wSJSk68rOPlIuijdSNv1x/zSfDK+w15ZPSOi5Z138eo0m345VhQrbYYoVET6CoCP/yAKZ/w\nrCGAMVZsoJSMWF1ocExtP5vCfhKAO/g3ijnnuXftsEqETMTWfzKyqG0P2xRwlv8Fw9ZCz/P304e3\ngmo5Be94cJyKV7QES3wVoRZq3rN9OZRDaCiCm44gGQl9Ggw4N+DGQbDtGdNbbMbJvvQidtCS3n6l\newbwo5K8gvw91Aw3gpRvJtDVlTe8MCmMU37DDnnBm3eJg4NObeqOep5Y0kRf86rOORt4vUpBCsc0\nmSRsAmF/3Irw+IJlYPwcpz5W5qepcJ1FXN4bV35nyC++FEluBQ0X8SpiIP2B+mYb0joq15KulXSR\nPFYEPtD9dPX3+g/6J6xKsyu7hYl2f+IBPq6ckqop7tGKHP7HdZRM6GN8CkJJeKy5f0JQGFI1k6iJ\nxThR/mPFVNEh2k1CKGITJD4NHor2uPuFqnDt/ICvRK3KCazN5uYqsCjCCIQyUV09jy4JMYbqrXE1\nlSqwwJ2MQPZUTMb7RoRbxBwz5+Vpyle/+bXwDL4KpUA0OhxXBhGMaAs/sc0TfZTzkE4XjYDF+kPJ\nbEhrYzyvmxcclYBS1pVAZHtuTte3deb5Mn3Zm4OGRp5X/DI3mgG+cFn0658Gfs0P86A25k4It8+w\nX7STXqxEMXn9s8IdErBgDukODCZCMC/y98CWP0ZzNx05s3sIdGLcVqkbk+CnRzrOzIxHLGA+cnRP\nEItRY7Y9UG66QN1EpizHnfNfQUqMDreyp38sbwbiWoxjYHofV5/miXeohXuLpYR474h8Fg1B7VrG\nEZxZWfn/FKbFneAdRCdZXbBfmQeztUWyhKPdtHt6exVeaUExJIVglp0mymYseAF1wWowQW/RIvZS\nyh4eCuK9YL2knhGkth1JJNbEe/wELDG0XCX2SlyOCeDIpbiZB3IlsL0F5LYzfws95lATURjtz5Re\nyMSZmdworYhPxOLbs/vLIUhDtfka6MaPNsXkIvZPRKF4wrEB5G3+RtFsMYkoPv5zY82f5gO4M92l\nAVQMkPbBQnty5GRGWQapYKzDERpGxju/C4LrDpIzRj1YIfClANuyeMqmrjjlcqy1onVqI7BBTsoW\nuyMpjSHI6513f1ZtvZn5UnsUI+HzTedi/ApT91jgQ4RgIPCPwEADfpjqNGmiOjyl6PCdYR5HcYOt\ntFJnQ9SI8KNj7fTuv1JSN2jsbvw3zZoUcnPFL8x83XI2BMPZ90FdEWy9w0fz6BwZrDj5d3z8Aaw4\nKbP2GF34g5zqmcRdy4Qo9THZste6IeGk7QkcgIqXDbiBTtBUI7/Z0JUSsHK5Nah5ecAxao3VnxTo\nglJhpFGw5SR8D/p9qQOKJ9d87wFxBbr8BYdyJO2M73BrEC/kcWKoDB+kWUPjvZV7wTiAi+1Aa2l3\n8gW8sIj3NSxVIN7igRHYHZqsTfDqQ7XOkx/s1Xa6m7qpDwAR406AOhU/jvvWOpgN5VdC/c/H9C9p\nD2xc/X/dYpPUV1rpChEzo8dLxHlf7Ho4Jn12hZ3Sd6ac80963BR+oWhmVfL/SD8g4a9ocg3iQtRS\naZCcu3KSNMGtfzJAjJhz8bwLR6jVurBkfIfwhvIReyXZIjfbRwbKc6qnV0VXzH3g9dWf6rJKh9Ck\nYl1+zu+ReqPlJ2t5gQcmtlIDUesJ792Iu/GcRdL+2XBMxvyqPzBzl24Jkzat4zF2jwdGgqtgsiJj\nOtaMHu55jRNQxIM4EbvbmdMyH8PG9aMamesROX1wzlpRbbKFfYsqRkLqOwX7dVY2qv3THxzKN5Oc\nP5OMV0tyiPGK31eL04TidwIH+6Zs8zV2U0gQAXHYMTt3c0FyycRz2AD6IoJYQ2ekTqhtTh5eBjM5\nkb2D55Tb7daALADj67IbW10+efKZnynKZLd1EYWDQsskZpd2lLLhViaGtYRry/URX6W/f/gEwwkQ\nv8RDiW/6qoe/P7pqDSJDvehN68ZY8X2RQ66TBagdjGBhZZBfttTWFWvPW3QWg8DFv15bxc3ikT/W\ndhIi+oSggr7ljllIo6BxCaiKPvlqv8Pg5SlPzffC+EhV/FAtKf0vco8T37Icuv3baRZffY5UmJmu\nTceSJnOJEcKaPwuDP5yqdfP1Jq16iY614fxX3xcpWsvlV3ZP8Qq9M42uR/Ej6Cn7l/2bWBcMazPP\n+4t2adD45U3rWzB3YFnlaOGvCnuomAIFGtlA2Uzc0e6W1uoVbP4gcd7EKrCxl/qrpa2vijQOeaWQ\nR5yALG4x3vtQ/qWepfJzRh6m6Kt9NNj92pL8gVtElHv1lLSsVywyVCeLhefKNhLqC18yn/ik3xsR\n4ci9QNRioPH2FOlMg5d49xJNTgBTExuDgoGdClDEZwsyK0/77n2Ttbg7/+Y1ViywGCIilncwNhhq\nvUX96fPm6KuAY40QvhjaeAfHnKhxj/gKXFY+xez59e7J9PFzDXl4Ty9O7Hau39/8lXkE5Mgfw9ev\nT3AVSNPySZn/03NkDXCWDdrjjcE/4LfsYFGw/pvMt9zzGiBlduA6Te+QtIb6bJqQlf85QBLykCG0\nswFW4Gd2eEtNIR0Aac11ysk4azb94nyzWvfTHBLfgX++PUr60hmWMf34rP6c1XF/UlFJtiCIQ9AT\nkYDB36la0Yxnh7h0CFB9ELRKGEOthbgOZ5BZqVIVMTDA3jitK65+tk58+NoX4J8jiv+/mvmVtEHK\n8IGy6wMVQNoBJgPRmz47iO1JCLsZfvSsms6mF/WtJoma3g8LfU+80/bPKZB1JbJdQsCg9Nu5n0qN\n10r+q4aJHgH63JEsYi0xLFnQqROMecMAYPIpABN1248f2IwC2jXk8V8r3RBvLGTx5O9IyUz/qkk0\nGs5RpM7e3cVfLqi/iHWvmmCeOmZhP5u0ocuZR52fIzgFLIdGDYvKWIn6BjjvBvws+eOu2UAgWZQi\nXdC0WU/CEjlxtA59DzoxQN1sPOp85JqLVrgE+fbMDx3wlEfclsdgN9O1/Za7/vsxUgK6G0F6uOA6\ne71jsJZfa7xAUQOf67lyspNlN2Xfw1cBOzpO3c+sCJs6IsEBuA9PTZp9YIFJo+DDbaqQQxXjYNW5\nxD2HBGQqhxMYFsvzFBcKCBxuhAWyEiYcO2OgO33zaHxLdt4U9wt4TXfeb9rnYQEdjB4KUIzcQPgT\n4cIuvTu0PEcSOmS5bsm3pyMzwyxXt+ZAzkxJS6AYBO2/4PnlGyug6W6BqZ9A3/tga8MCS3zzh8eg\nAof4VbDj9y1GNdzusfUHzZ91RODbk96YGEMsrDVh1ZO+E78fXlmxRdI8vlFCxDcpHTKgHhU/Mpzk\n7GFBxzgEPjcASyzi4C+V6e6kgtyJG22wxgGvAAATKkGaIWxBL/61KoBK61twAXurwdSRrMHjkG2R\nCIe1Ckxmeu8A3aMLI8sYyfUghGuf8qVWprq5q7Br7CH3dIQaCROCLXKWy859suL0ltRTGR/3b6kM\n9qwRu14ee+zITHDsJpj0qu6regpazmfu6ESChh1IlYI5OMmRd7EJZC1OY1IV1JX8xguQLD7yZfoX\n5nUKpML3iLcnDnGZzxPUb4dlRKOolpPToBCNsK8exNMunRNLv0DnJ0dYQoQZGZQ1PG/JnNSXU1GO\nKnu+Heu1ba5P53pN+r/9CuUdt7wUADd7kgYVAugFeA1wFScpGYWklf2Sg+k+Psj8fIc/Zec5J6nG\nLAXavAAGCAxoScxLrFOMHN/Aoxy2TFM1YtdciODHLC8IkdhaPTnRnOi5VELnI5ij14ryuCb78Ctl\nYPXjLo4ZbC/RFGeMY/SL54cjtNPYXDAfGxpXaYNO78epWi3A0pC1gGej136lV9ypAPf4GdnOBfAG\n3eNgJYFyrYTkqBd0XxrgN4BgLCwwglvBm9EWKS3jxnaEV889R+gCW3O38WFBMPruNgjIvSi75plA\nFH5zVBYNFSphnewEGZgMM+a9SM5+frnczkpUY6eaNMLXVJnnv9VM/nQhiACXzQid1JPTYD4wv61z\na57zRU/U0UahTC2s1BNqU2nD0I2T/TzTKbaja54LiT9NFgCuqgYLwwkO2/IdijAoSz7eAnPUyTMj\nOO3ZqiAO0OtMA/DjpdIHJhkwBlobn1Z/vVoUMH399qt7DiFAfVvdzfMaDhO4wSmGYE+UwTd4hZig\np39snEZs4jE+vgtfJtVQMdV9hCzEDlRPKteFPlzZmbheOdAZyzYxHMymfYf9MZO2At9aDFXIdV39\ndF1MXsIu9/zEKVgaEeH6nULQnOujXI5gR7VqxZ7TcAmc63qxwjOWQ5v5GXvmt9RQlWMw1D4t26SE\nu2SckpG+NhysOYR1XrT7ka+Ismd9AndH/r91pqK8F6OhE049k808SW6m03HC94qdX3OKLUZieyHE\noAKc4y6RldKtXYsdbtzvMNxaC4DIzwGDuY6kFFHE0j5dV6n14DUF4xt4T6L1SDEr+Q56W++0Tszu\nxoXsYj6xT1t8NVmHFbDP1AjQUTPrPVFpDgPDNzgGn9VVt8SKqmDMWN6+8dLMzCkqPKMYbvNslrQc\nQIhR8entAWxYJ/6lDNAXxUbUutWUi73nF4mn9TlO4rfaGIC6O8VMvW7sBvy9/zZfO7EA0+cOLsc0\nR5K7TMOzVqSAYQwMs1sehLT61yIPl6bEURhoiUewEGf88NxVkerNUayAHWJyDtRYUUoXEiH9gWiO\nClB8RR1WiKdtkyav6Q4BqwyVNQJO/CExrcOI9JLKRjvWvwhA/AkVkQUg66LrIEz1LeZbc5Xf5fTF\nFmrxUubikApu3kXrBlcA2rmCzrlw1MO2B3QiATvi2PuqWyEdWSRNfg2RW5MBPWQTxYO3o1oPK8qu\nxbOwlRetYX2NPII2/VXIzziWhgs7WkniapcrGuzpnD8ZP4MmwK119qnWYMT7BoynCVyo3wJfJID7\nXKpj68W2PG8bCOIvnG+RxvDk/XX8AR4gdqFLwbwSg3doOoBJoHKLSFaodTbrRvL8gC6JZ06yXRvt\nznSnzPR8wGFd6dTN/X8hgzVlrQcyJk8NSjBKtX7uVDumPK/vPVxGL0u1qBmmdWlE/0Fk+T8Fa0Fi\n7RScRMPOXVeF0HW7PISDZ1k38iJ+cCXe3FPmQr/XWpdcj6vqGP1j8226ysjtMC/xdyFiXVAgXPTp\ndBqvUU6MmSxzjDvYSxKSVayVHrm6chB6o5fYTTbPu7aPhA3apxswf/OobV9KDkJSfQh6lpDjMv/D\nPD8yl8O6hFhWE6a4Gcq+Dio+64k4X7vVMiJP7mrZIfvvmi7iwQKaaIFdCYIRQGOLfSE6Uc6ppk9v\nplb6+5XrXDbWH0JO2S2ntB+dayayrcvQjYnnCoCXTlKF/7eR0bWCM0jB4fWGFx7Vk/uFNklNJtRH\n+v+WSiGPjJ9oMTARP03IeYPzazlOoQdvcXeqKO4ykM/wGi92FxTZvx5qGXnb/poe1ADyvGNZJHfl\nxKvTzgb1bJX+fg2TZXtgDvF1Sa/TjxV1jslGa3pnQPFIYqMV9IOXld6m96Gfm5dI4/MER8W01Vq/\nLmT8BxP9lBuSUXid0thFo6/TnCL0CG7K1T/el5EhBX098Q/yOwphxw5HhWE0cVKcJWMo/c0uQHIs\nN0QwRK6pb/Q2fpHyVNJafgTXjajRxwOu3+dlmZ3etmH0qMIoqT3cfZtIlWL9cMYwRfShV+RT1CWQ\n99axbsK1P+VOK+0cEF3+FqFYcpOm8udt4tPe2TLF4Vl+9Sansi1ORgB2jf4w2JY7nh+zTpojdqDX\nN9x0R70sVCNnrLT02MpLsF5ns3S1tRSdLgUJ9vzmOI5KkgtfqHMvpbQs9OWtqKgDRVt2doI1Vz94\nwaciCAs0d5ACKDZqzNtJo2KTEk+OQv1FLrVJT6iXA9phuqD9ZA7UvPeEN+zMexLKGgS/TnUXbvUO\njYd/QsOlUOs4O/Ongh1adXOyEn4TG+osfFAYrcUVap2bxgy3kvMP32yu0v7FzU59S4wk1AFtk/NJ\nyeVCxd67KKhW77R4PDwDYwoQrHLcmfoOvRFKY78jfJ6dhkFMQ9titL9hdpNyAldUYuzdixjGMN/l\nCxleLxKqgx2G5/9183ZwtBVLEJUd6QoVtt9+vZAgKGh0ZiADP4UuUoWmrB6PMlSWyAB3y1cGdQ1X\nFibsnzuJn9RJfENNiowQZQQMZkvknCpV9exovrY5ec54kxG7hP5oP6TMhAemk/yFOxF6JkbZyTJS\n9GIW/bE35y3nJj3wAwWXePb8H2pw4YkvINK+WFeymD/w7PJWRtg+tYXJwjx2CDFtJkmcbZCKK6nc\nT+YHeImfhpSIfnatgpBdmS4p6+CP38Pgx/7YaAn1etG/wu7BQJoOJZe1Sed5Vseyr4MNXHjRhKy1\nYrBE4b4Qc9OiMNSb47H+NOQWhO0+tEyFKiHw4vAVsWJtriLV7Tsx4fLhGB4r3KQJVlmXNTczXEd8\nNlXOLGtw/QFqroF9m9sO7pNsdtfI2KGby5IOspCV76iD4pSexlWmTk1sliZdomzhdb5cI1OaFs8G\nCTGCK2IWuS80dNDNPznJ7P5lsfQOnco4kAJqQV/C0n7R0sVRcwrYYE7JnAtAN52PQ/VelqYwEauW\n8Q23vokgyuAMukJU0lacoVS5DSVucDY7t13gRJOQzHzwAhcQnt5Wz/jSVJY4UD9SCJXflFzKXwtO\nVucY/kH09I5GeHy7ebcBSE9LZOuHugBoeNRHipgwnFaG1OGdC3hnfmD15fv64N4920ggMSJgaLbM\nuwqzj8ilVQ4C40iyiNFGUgJkvaC3eQRjQJVbocfKh5h1FhDO8o6zXsBw2YreFQgJ27CwrEjY7FJF\nkBTvUjdas0todNWAq3D5JLZY8k32i2sYNquPQDgpKJ+0MsicjaV3fB39pB4TWvD+U6oQ88QSSnss\nfFwOGqmbZGb6Rh5XifRtFB57BjvZM9lNtlBCEaZ0o2oGL2AUgtcf1EnwhJ0C5qcnMEqWENtF6Qmi\nZIm+uqnnWPbG8b1Q1ByhSVUDGtTVzREarUC+NRtXuO3Tkr1jPd2UiCniaVItkWa4sbTt2iuq8aqn\nu694Tdnf5rUXYFL0z/Fz9OayfI50bP6RNiyE0ZPILqAJCoAnhG2j/597JHTlCGmCeu2bgFAv3f3s\n2rmdeVMWnScXDJdZecFfw1Pw39izYzGJc3rpIzihauimbvvrX3L3o94IYJcxueashjgf3FgxcTnH\nE4vkIjXrJZQnHW1DdLFLzU6MmYL95iqDUKETTVHq7EnV9ZOAY+EqHSWxppWQZ7HZmX168xwf1Jhr\nYJMAQhk93D3O/RZ7ujQ8JWUsqYegi8rB2wiArei+AdKCT+03eDE8Hjw54rG8D3DQOMO0O6vlOdkJ\nfA5nGra6/whB+XU0rW69q1SrPFeGz74SuPOEjfFYO8vd/bMbDzeabt0lA0AWXhP165JcmBoTVPxT\nu2iTzz4Ryl8ld0tsvJWXVhFmxJIKLX8HABTjWwmDWin11Vk//ljzrEGKXhNEnHiAqJcCzy3AhWOe\nDt3pbSblO7LSOayBozUglo6XURFlDfMGH2ppw8NjD6K1gmaCEBbKS5KlWws1V2B0fnt/f2PLBA2q\nA8qaG9oAUpQDsAdruqUmQju/LbeOe3xBjwu1URQHuEFvvt/HqQGnYXaFR2680PK3N/QymToF4Ucd\nDWwUruQYpJ3Z+GrgjGGcuauthneZiJ+wIvahRym6oVfkqmJIPcsNPSxfbvh1C+xUzrQyLH/qp8b1\nBSOWJk48SO61LF7/qFCoiuWWWWimlQOqnYXiU/QIn2+iwDdEr68t7E1gzpgLjy3PJAC+vKCRt143\noGClCJ8JIcCHknUXhH8MYtLrj1Yh8fjWViRMoJR8pHaCo6YpJxtUBgB0UTRvpTSEX+L/G6n/k0M7\nE5lSKB9OsM6aVK44RXwSS0/3EBZ7cS1fqLCZJ0AE1FsqhZ/03IGSuWOQHyV4OMPuXWY45ABz3w4u\nCRH78woyEdIFW0RR2it4rKMT1cmdphDaxF/301yJrQn5XTRTB1uSOEsw5GcI8xQQnMFhQQxxXGR7\n+hceoTbZjBVRV2NFtonCkPMG6rjmanNZNSqQUGLSHOcPiEdHCTa7Sqgi4qKNQlAxemeQEJMcgMFg\nYPYddNYlddZBjkTNXGCoz61D73bNYHyQ3w00KtURwlvE8PUuXdYFu3lpnE27C+QbVBqu7TcGGC2o\nHlp70wn1YsK52LKw9MwueHYLGZLmpPxtnoYF5bdTFaDb8XrrWrsEWhnmIQcEn/z7HQXPHmYlSLfb\nFcAN/iXhdXlSMCQMBFSDFFLquGnU2ji5WlMpJO8VQOv2s2y+2+qDaPKX2D49FTpSWJppbk417kXQ\nsu31V8Cd/OOnEjCL7Fops7gyPdKM+EjPEGszNDDbmHDWSMrM4F0fYNyeN4kwJ9HFbC8j7U7WSwja\n0IttPdC4lvc896qCYiHrbUBjDw6YSWiFQ/73POXpfy/EH0ijk8ZwRw9yEk5ZJIWPtRck1tyqUq6Z\nlmY4fM+idH6M1aRJZnBZcCDagtCviOgjUuKxWZBraE5kDnw61FJd+SKc4xk3XNrhD5yIUPaF8Zob\n70Er1O7bcRECrtyoaMfufTP/DFtMbLmicTWXXC2szd3s0+YCIRRct/pjSomWk/g1tO8BUvdB3MI5\npZP5iQ7iyx8GpyGsDNjCRk6Y3nemc9Zm3PpWIDr9MhQQlZhA573vbkvO90cdQGv1usulQyFiqtdu\n+hSYivifemre/KsIlYWxlOBxeINXjvOh0wbAi765tWdCWUUQE6EhjGcfLDHBMso/bLnG8TWT1Ip5\nrErTzkD++XgvABoA406hdrfGBwYui0tZSNAbRF9AgcZFv+UzdZ4/XOBYAzOYTRNc9lZQ+jeJHAgD\nIGaPRiw0sqO7NxbiV74DXrjdGInP69Wm5Sv2OXrAYX7V+EAIVL314gNP31BculBi2Td7VXNmtDOC\n/KyvNIfm2nwo0vYfDE+lruzlB5qnGrS82F+O58PE5r+EIlUJyPD5o7SJk4dZeF0ly4yD59rup8PC\nTHCljvEka7IGy8sj/9cPvXXrFTVjsSpJJYlmGKLH2SAcqKCUrI/SV7jFDfhPdRsGb3uhvZcZtMy7\nA3gUaLkTHqiCjakmnpO7/Mq84iKobwGLwH5/EFQvYMZPZ0hpO+vIrqWRAkvQgdQvB2dYB8Zqc4sm\nBneUatkDz22fZqhfYHW+yyemThc7jrKYieCBR5KJWiWkR4JrSJyJtuxXOn5fbhOYNo2tGCmoLnlz\n/zeh/OnatzxvDocOmTc4PJbN5ALXz9f0fQ8T78DwhomFV/UwcIBvHOWbCoZqjEggWRO0+B1tRDME\nW0Il+6cZD+PD2fDrdg5eXUmllqYpEehsnA81e1/B67e8PsTjMAxMtYV6/awCwVIKsqT2GC0yTW07\nF63dxKYtQNfWf/OnGcokQY5CV9ir8ufaS5z411w1WU5sQO0qTrZ7vcN3du30WFX5ADNX65kikS7z\nnwJG6Qyz3H+H3jZjekw1K6SjG37ayK5ujJl22BEqCSskSy/7mF1XrmNKD63ZFfs7wEcxnE6YIYqR\nMu11HdYcBeCY84g+5oGttOTel8HtjZOgDp4VQIEgnc60IEN5PSBFSVeN00VY5a1iW1IGxLuaTG+6\nW/lOsDLuuP+vjqG56h/YjnBrMq4N+THc3Owd0TT8RCYp7pzm5Vvy/agi1qcRuuNnDwxN5ybIIloe\niQ97tig5jjYVAbs+PLQz9zT3kKsSmE4jWyl83fWQaEf/QsaqxgWk+UYVQ4Crqwj+ro9jOGv/cumj\nOavA6+0TXbwarm3adaSLzmZyISIpgCTYAWtlCbBg55SyNc8Ae7acMOT5O23laOpKdk0gH+KRvPqQ\nML7ScR5I+jW2FyMfsc5QdNYZGckpZ9+qzKZYA8VLFW5sEfAAAAMmbW9vdgAAAGxtdmhkAAAAAAAA\nAAAAAAAAAAAD6AAAA+gAAQAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAA\nAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAlB0cmFrAAAAXHRraGQAAAAD\nAAAAAAAAAAAAAAABAAAAAAAAA+gAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAA\nAAAAAAAAAAAAAABAAAAAAjAAAAGQAAAAAAAkZWR0cwAAABxlbHN0AAAAAAAAAAEAAAPoAAAAAAAB\nAAAAAAHIbWRpYQAAACBtZGhkAAAAAAAAAAAAAAAAAABAAAAAQABVxAAAAAAALWhkbHIAAAAAAAAA\nAHZpZGUAAAAAAAAAAAAAAABWaWRlb0hhbmRsZXIAAAABc21pbmYAAAAUdm1oZAAAAAEAAAAAAAAA\nAAAAACRkaW5mAAAAHGRyZWYAAAAAAAAAAQAAAAx1cmwgAAAAAQAAATNzdGJsAAAAs3N0c2QAAAAA\nAAAAAQAAAKNhdmMxAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAjABkABIAAAASAAAAAAAAAABAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGP//AAAAMWF2Y0MBZAAW/+EAGGdkABas2UCM\nM6EAAAMAAQAAAwAEDxYtlgEABmjr48siwAAAABx1dWlka2hA8l8kT8W6OaUbzwMj8wAAAAAAAAAY\nc3R0cwAAAAAAAAABAAAAAgAAIAAAAAAUc3RzcwAAAAAAAAABAAAAAQAAABxzdHNjAAAAAAAAAAEA\nAAABAAAAAgAAAAEAAAAcc3RzegAAAAAAAAAAAAAAAgAAjxoAABMuAAAAFHN0Y28AAAAAAAAAAQAA\nACwAAABidWR0YQAAAFptZXRhAAAAAAAAACFoZGxyAAAAAAAAAABtZGlyYXBwbAAAAAAAAAAAAAAA\nAC1pbHN0AAAAJal0b28AAAAdZGF0YQAAAAEAAAAATGF2ZjU3LjgzLjEwMA==\n\">\n  Your browser does not support the video tag.\n</video>","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"The difference between lensed and unlensed,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"plot(f-f̃);","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"(Image: png)","category":"page"},{"location":"01_lense_a_map/#Loading-your-own-data-1","page":"Lensing a flat map","title":"Loading your own data","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"CMBLensing flat-sky Field objects like f or ϕ  are just thin wrappers around arrays. You can get the underlying data arrays for I(mathbfx), Q(mathbfx), and U(mathbfx) with f.Ix, f.Qx, and f.Ux respectively, or the Fourier coefficients, I(mathbfl), Q(mathbfl), and U(mathbfl) with f.Il, f.Ql, and f.Ul,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"mapdata = f.Tx","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"256×256 Array{Float32,2}:\n 171.44    167.703    157.405    145.194   …  122.389   147.981   165.684  \n 181.742   189.025    185.76     170.233      122.506   153.939   172.667  \n 191.916   206.964    208.738    189.901      120.386   152.987   176.192  \n 193.143   211.732    214.832    195.211      119.196   150.394   174.092  \n 181.553   200.663    202.711    183.772      121.226   150.058   166.004  \n 156.305   170.688    172.872    156.56    …  128.578   150.569   152.503  \n 122.336   125.968    130.809    127.234      133.438   141.621   131.242  \n  77.2644   71.7349    83.5387   102.698      122.771   111.784    94.2574 \n  30.3299   21.797     37.6612    74.3351      93.4784   69.2868   49.2435 \n  -4.2732   -9.40081    9.87907   53.847       65.2722   36.0297   12.8039 \n -14.2087  -13.463     11.8956    56.6629  …   54.2575   26.643     1.36789\n   3.2407    4.63673   29.7466    67.3047      61.7479   42.4608   19.8101 \n  32.4864   26.0034    39.9631    65.6554      80.7209   70.5715   51.7022 \n   ⋮                                       ⋱                        ⋮      \n  75.3217   98.7598   114.254    117.885       67.9429   59.416    59.0214 \n  57.7278   78.8215   106.307    125.083   …   81.0205   69.0292   55.9137 \n  49.3875   66.4893   100.567    127.764       95.5954   80.7062   58.0246 \n  55.3266   66.1131    94.4131   122.533      102.908    88.061    65.3598 \n  61.9497   64.8811    83.2574   111.379       97.431    86.9759   71.1334 \n  67.4383   58.7726    70.7222    99.8593      91.0953   90.3936   82.0167 \n  78.3137   61.4302    68.5065    93.8504  …   86.7291   97.1083   96.6349 \n  98.7174   79.171     77.6001    92.3835      81.8461  101.863   111.751  \n 124.348   106.248     93.9187    91.8667      83.8574  108.739   128.012  \n 148.584   132.053    110.687     94.8853      95.4236  120.507   144.906  \n 164.909   147.386    123.139    105.89       106.087   130.645   156.969  \n 169.192   155.312    136.431    123.663   …  115.306   138.663   161.409","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"If you have your own map data in an array you'd like to load into a CMBLensing Field object, you can construct it as follows:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"FlatS0Map(mapdata, θpix=3)","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"FlatS0Map{Float32,Flat{3,256,fourier∂}}(Float32[171.44 167.703 … 147.981 165.684; 181.742 189.025 … 153.939 172.667; … ; 164.909 147.386 … 130.645 156.969; 169.192 155.312 … 138.663 161.409])","category":"page"},{"location":"01_lense_a_map/#Inverse-lensing-1","page":"Lensing a flat map","title":"Inverse lensing","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"You can inverse lense a map with the \\ operator (which does A \\ b ≡ inv(A) * b):","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"LenseFlow(ϕ) \\ f;","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"Note that this is true inverse lensing, rather than lensing by the negative deflection (which is often called \"anti-lensing\"). This means that lensing then inverse lensing a map should get us back the original map. Lets check that this is the case:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"Ns = [7 10 20]\nplot([f - (LenseFlow(ϕ,N) \\ (LenseFlow(ϕ,N) * f)) for N in Ns],\n    title=[\"ODE steps = $N\" for N in Ns]);","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"(Image: png)","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"A cool feature of LenseFlow is that inverse lensing is trivially done by running the LenseFlow ODE in reverse. Note that as we crank up the number of ODE steps, we recover the original map to higher and higher precision.","category":"page"},{"location":"01_lense_a_map/#Other-lensing-algorithms-1","page":"Lensing a flat map","title":"Other lensing algorithms","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"We can also lense via:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"PowerLens: the standard Taylor series expansion to any order:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":" f(x+nabla x) approx f(x) + (nabla f)(nabla phi) + frac12 (nabla nabla f) (nabla phi)^2 +  ","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"TayLens (Næss&Louis 2013): like PowerLens, but first a nearest-pixel permute step, then a Taylor expansion around the now-smaller residual displacement","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"plot([(PowerLens(ϕ,7)*f - f̃) (Taylens(ϕ,2)*f - f̃)], \n    title=[\"PowerLens - LenseFlow\" \"TayLens - LenseFlow\"]);","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"(Image: png)","category":"page"},{"location":"01_lense_a_map/#Benchmarking-1","page":"Lensing a flat map","title":"Benchmarking","text":"","category":"section"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"LenseFlow is highly optimized code since it appears on the inner-most loop of our analysis algorithms. To benchmark LenseFlow, note that there is first a precomputation step, which caches some data in preparation for applying it to a field of a given type. This was done automatically when evaluating LenseFlow(ϕ) * f but we can benchmark it separately since in many cases this only needs to be done once for a given phi, e.g. when Wiener filtering at fixed phi,","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"using BenchmarkTools","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"@benchmark cache(LenseFlow(ϕ),f)","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"BenchmarkTools.Trial: \n  memory estimate:  102.36 MiB\n  allocs estimate:  2558\n  --------------\n  minimum time:     29.143 ms (29.80% GC)\n  median time:      52.192 ms (61.37% GC)\n  mean time:        81.004 ms (74.07% GC)\n  maximum time:     151.129 ms (85.91% GC)\n  --------------\n  samples:          62\n  evals/sample:     1","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"Once cached, it's very fast and memory non-intensive to repeatedly apply the operator:","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"@benchmark Lϕ * f setup=(Lϕ=cache(LenseFlow(ϕ),f))","category":"page"},{"location":"01_lense_a_map/#","page":"Lensing a flat map","title":"Lensing a flat map","text":"BenchmarkTools.Trial: \n  memory estimate:  2.13 MiB\n  allocs estimate:  2633\n  --------------\n  minimum time:     13.870 ms (0.00% GC)\n  median time:      15.422 ms (0.00% GC)\n  mean time:        21.416 ms (0.00% GC)\n  maximum time:     61.834 ms (0.00% GC)\n  --------------\n  samples:          39\n  evals/sample:     1","category":"page"},{"location":"02_posterior/#The-Lensing-Posterior-1","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Much of what the CMBLensing package does is centered on the \"CMB lensing posterior\". We refer to either the \"joint posterior\", ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" mathcalP(fphithetad) ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"where","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"f are the CMB fields (T/Q/U)\nphi is the lensing potential\ntheta are any cosmological parameters\nd is the data,","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"or the \"marginal posterior\", ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" mathcalP(phithetad) equiv int  mathcalDf  mathcalP(fphithetad) ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"which is simply the joint posterior marginalized over f. ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"We assume the following data model, which is generally flexible enough to handle real experiments:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" d = mathbbP  mathbbM  mathbbB  mathbbL(phi)  f + n ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"where ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"mathbbL(phi) is the lensing operation\nmathbbB is an instrumental transfer function or \"beam\"\nmathbbM is a user-chosen mask\nmathbbP is a pixelization operation which allows one to estimate f on a higher resolution than the data\nn is the instrumental noise. ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Given this model, the joint posterior (up to an unimportant normalization constant) in the \"unlensed parameterization\", is:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" \n-2lnmathcalP(fphithetad) = fracbig(d - mathbbP  mathbbM  mathbbB  mathbbL(phi)  fbig)^2mathbbC_n\n+ fracf^2mathbbC_f(theta) + fracphi^2C_phi(theta) + logdet mathbbC_f(theta) + logdet C_phi(theta)\n","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"where","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"mathbbC_n is the noise covariance\nmathbbC_f is the CMB covariance (i.e. the CMB T, E, and B C_ell's)\nmathbbC_phi is the lensing potential covariance (i.e. C_ell^phiphi)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"and we have used the slighly sloppy notation x^2mathbbC to mean x^dagger mathbbC^-1 x.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"It's often useful to parameterize this in terms of the lensed tilde f = mathbbL(phi) f (this reduces correlations), in which case we have the \"\"lensed parametrization\":","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":" \n-2lnmathcalP(tilde fphithetad) = fracbig(d - mathbbP  mathbbM  mathbbB  tilde fbig)^2mathbbC_n\n+ fracbig(mathbbL(phi)^-1 tilde fbig)^2mathbbC_f(theta) + fracphi^2C_phi(theta) + logdet mathbbC_f(theta) + logdet C_phi(theta)\n","category":"page"},{"location":"02_posterior/#Posterior-basics-1","page":"The Lensing Posterior","title":"Posterior basics","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"CMBLensing uses the function lnP to compute the log of the joint posterior probability.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"using CMBLensing","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"lnP","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"lnP (generic function with 9 methods)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"To evaluate this posterior, we need the arguments of the probability distribution, f, phi, and theta. We also need the data d and host of other operators and covariances which enter the expressions above, which CMBLensing stores in a DataSet object.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"First lets load up some simulated data. We'll use 1muK-arcmin noise and a border mask:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"@unpack f, ϕ, ds = load_sim_dataset(\n    θpix      = 2,\n    Nside     = 256,\n    T         = Float32,\n    use       = :P,\n    μKarcminT = 1,\n    mask_kwargs = (paddeg=1, nsources=0)\n);","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"The DataSet object, ds, stores all the aforementioned quantities:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"fieldnames(typeof(ds))","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(:d, :Cn, :Cϕ, :Cf, :Cf̃, :Cn̂, :M, :B, :B̂, :D, :G, :P)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"For example, the data is:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"plot(ds.d);","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(Image: png)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"We can now evaluate the posterior, for example at the true f and phi:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"-2*lnP(0, f, ϕ, ds)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"306882.90319405496","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"The first argument, 0, indicates that this is in the unlensed parameterization. We could also use 1 for the lensed parametriation. (The 0 and 1 refer to auxillary \"time\" variable in the LenseFlow expansion, f(x+tnablaphi); at t=0 we have the unlensed field, and at t=1 we have the lensed field). If we use the lensed parametrization, then the f argument to the function is expected to be the lensed field.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"-2*lnP(1, LenseFlow(ϕ)*f, ϕ, ds)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"307156.48902226775","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Any difference between these two is due only to the error in the LenseFlow inverse operation. The difference we see here is fine, but in theory we can make the difference arbitrarily small by cranking up the number of LenseFlow ODE steps:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"let L = LenseFlow(ϕ,30)\n    -2*lnP(1, L*f, ϕ, ds, L)\nend","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"306882.88420174696","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"We expect minus twice the posterior evaluated at the truth to be distributed like a chi^2 distribution where the degrees of freedom equals the number of pixels in d, f, and phi (i.e. in each of the three Gaussian terms in the posterior). Since these maps are 256x256 and d and f have both Q and U maps, this is:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(2+2+1)*256^2","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"327680","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"which the previous result is within a few sigma of.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Above, we didn't specify any cosmological parameters, theta. Because of that, they were fixed at their fiducial values (i.e. the fiducial values which generated the simulated data in the call to load_sim_dataset earlier). Current only two parameters can be varied, r (tensor-to-scalar ratio), and A_phi (the amplitude of C_ell^phi phi). They can be specified as follows, with non-specified parameters left at their fiducial:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"-2*lnP(0, f, ϕ, (Aϕ=1.1,), ds)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"307200.19728863984","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"You can see the slight change compared to what we got above. We can even compute a whole slice through the posterior along A_phi:","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Aϕs = range(0.5,1.5,length=50)\nplot(Aϕs, [lnP(0, f, ϕ, (Aϕ=Aϕ,), ds) for Aϕ in Aϕs])\nxlabel(raw\"$A_\\phi$\")\nylabel(raw\"$\\mathcal{P}(f_{\\rm true}, \\phi_{\\rm true}, A_\\phi\\,|\\,d)$\");","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(Image: png)","category":"page"},{"location":"02_posterior/#Wiener-filtering-1","page":"The Lensing Posterior","title":"Wiener filtering","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"If we fix phi and theta then maximize the joint posterior, mathcalP(fphithetad), over f, we get","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"\nhat f_rm wf = big mathbbC_f(theta)^-1 + mathbbA^daggermathbbC_n^-1mathbbA big^-1 mathbbA^daggermathbbC_n^-1d\n","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"where","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"\nmathbbA = mathbbM  mathbbP  mathbbB  mathbbL(phi)\n","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"This is simply the Wiener filter of the data, and we can compute it by inverting the operator in brackets above with e.g. Conjugate Gradient. ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"In CMBLensing, the argmaxf_lnP function performs this task. Its arguments are similar to lnP,","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"f_wf = argmaxf_lnP(ϕ, (Aϕ=1,), ds, progress=true)","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"\u001b[32mConjugate Gradient: 100%|███████████████████████████████| Time: 0:00:50\u001b[39m","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Since Wiener filtering is the best-fit of the joint posterior at a fixed phi, it is effectively delensing the data by a given phi. Here we are Wiener filtering at the true phi, so this is perfect delensing. ","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"Note below the large amount of B mode power in the data, as well as the aliasing near the border mask, and how this is removed in the Wiener filtered B, which visually is tracing the true B map up to the level of the noise.","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"plot([ds.d, f_wf, f], title=[\"data \", \"Wiener filtered \", \"true \"] .* [\"E\" \"B\"]);","category":"page"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"(Image: png)","category":"page"},{"location":"02_posterior/#Posterior-gradients-1","page":"The Lensing Posterior","title":"Posterior gradients","text":"","category":"section"},{"location":"02_posterior/#Marginal-posterior-1","page":"The Lensing Posterior","title":"Marginal posterior","text":"","category":"section"},{"location":"02_posterior/#","page":"The Lensing Posterior","title":"The Lensing Posterior","text":"","category":"page"},{"location":"03_joint_MAP_example/#Joint-maximum-a-posteriori-estimate-1","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"using CMBLensing\nusing PyPlot","category":"page"},{"location":"03_joint_MAP_example/#Compute-spectra-1","page":"Joint maximum a posteriori estimate","title":"Compute spectra","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"First, compute the fiducial CMB power spectra which generate our simulated data,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Cℓ = camb(r=0.05);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Next, chose the noise power-spectra we are assuming,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Cℓn = noisecls(1, ℓknee=100);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Plot these up for reference,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"loglog(Cℓ[:f̃][:BB],c=\"C0\")\nloglog(Cℓ[:f][:BB],\"--\",c=\"C0\")\nloglog(Cℓ[:f̃][:EE],c=\"C1\")\nloglog(Cℓ[:f][:EE],\"--\",c=\"C1\")\nloglog(Cℓn[:BB],\"k:\")\nlegend([\"lensed B\",\"unlensed B\",\"lensed E\",\"unlensed E\", \"noise (beam not deconvolved)\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#Configure-the-type-of-data-1","page":"Joint maximum a posteriori estimate","title":"Configure the type of data","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"These describe the setup of the simulated data we are going to work with (and can be changed),","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Θpix  = 3        # pixel size in arcmin\nNside = 128      # number of pixels per side in the map\nuse   = :P       # type of data to use (can be :T, :P, or :TP)\nT     = Float32  # data type (Float32 is ~2 as fast as Float64);","category":"page"},{"location":"03_joint_MAP_example/#Generate-simulated-data-1","page":"Joint maximum a posteriori estimate","title":"Generate simulated data","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"With these defined, the following generates the simulated data and returns the true unlensed and lensed CMB fields, f and f̃ ,and the true lensing potential, ϕ, as well as a number of other quantities stored in the \"DataSet\" object ds. ","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"@unpack f, f̃, ϕ, ds = load_sim_dataset(\n    seed = 3,\n    Cℓ = Cℓ,\n    Cℓn = Cℓn,\n    θpix = Θpix,\n    T = T,\n    Nside = Nside,\n    use = use,\n)\n\n@unpack Cf, Cϕ = ds;","category":"page"},{"location":"03_joint_MAP_example/#Examine-simulated-data-1","page":"Joint maximum a posteriori estimate","title":"Examine simulated data","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"The true phi map,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"plot(ϕ, title = raw\"true $\\phi$\");","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"The \"true\" unlensed field, f,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"plot(f, title = \"true unlensed \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"And the \"true\" lensed field,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"plot(LenseFlow(ϕ)*f, title = \"true lensed \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"The data (stored in the ds object) is basically f̃ with a beam applied plus a sample of the noise,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"plot(ds.d, title = \"data \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#Run-the-minimizer-1","page":"Joint maximum a posteriori estimate","title":"Run the minimizer","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Now we compute the maximum of the joint posterior, mathcalPbig(f phi bigdbig)","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"@time fbf, ϕbf, tr = MAP_joint(ds, nsteps=30, progress=:verbose, αmax=0.3);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(step=1, χ²=43095.78, Ncg=5)\n(step=2, χ²=37543.46, Ncg=7, α=0.014463)\n(step=3, χ²=35741.80, Ncg=6, α=0.023423)\n(step=4, χ²=35071.12, Ncg=6, α=0.014308)\n(step=5, χ²=34555.13, Ncg=6, α=0.026887)\n(step=6, χ²=34267.29, Ncg=6, α=0.012812)\n(step=7, χ²=33964.48, Ncg=6, α=0.035907)\n(step=8, χ²=33790.90, Ncg=6, α=0.010903)\n(step=9, χ²=33509.93, Ncg=6, α=0.068460)\n(step=10, χ²=33374.65, Ncg=6, α=0.009032)\n(step=11, χ²=32973.32, Ncg=6, α=0.226770)\n(step=12, χ²=32909.92, Ncg=5, α=0.008819)\n(step=13, χ²=32871.29, Ncg=5, α=0.071585)\n(step=14, χ²=32849.00, Ncg=5, α=0.009971)\n(step=15, χ²=32774.84, Ncg=5, α=0.238187)\n(step=16, χ²=32747.66, Ncg=5, α=0.009445)\n(step=17, χ²=32740.30, Ncg=3, α=0.028302)\n(step=18, χ²=32734.86, Ncg=3, α=0.027427)\n(step=19, χ²=32730.55, Ncg=3, α=0.021647)\n(step=20, χ²=32726.88, Ncg=3, α=0.022860)\n(step=21, χ²=32723.77, Ncg=3, α=0.017523)\n(step=22, χ²=32720.85, Ncg=3, α=0.021248)\n(step=23, χ²=32718.26, Ncg=3, α=0.014854)\n(step=24, χ²=32715.36, Ncg=3, α=0.026416)\n(step=25, χ²=32712.93, Ncg=3, α=0.013134)\n(step=26, χ²=32709.92, Ncg=3, α=0.034050)\n(step=27, χ²=32707.46, Ncg=3, α=0.011740)\n(step=28, χ²=32704.11, Ncg=3, α=0.045671)\n(step=29, χ²=32701.62, Ncg=3, α=0.010309)\n(step=30, χ²=32695.13, Ncg=4, α=0.117607)\n 52.152429 seconds (52.80 M allocations: 25.100 GiB, 13.27% gc time)","category":"page"},{"location":"03_joint_MAP_example/#Examine-results-1","page":"Joint maximum a posteriori estimate","title":"Examine results","text":"","category":"section"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"The expected value of the final best-fit chi^2 (=-2log mathcalP) is given by the number degrees of freedom in the data, i.e. the total number of pixels in T and/or EB.","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"χ² = -2tr[end][:lnPcur]","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"32695.131869109464","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"dof = getproperty((T=1, P=2, TP=3),use) * Nside^2","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"32768","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Here's how far away our final chi^2 is from this expectation, in units of sigma. We expect this should be somewhere in the range (-3,3) for about 99.7% of simulated datasets.","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(χ² - dof)/sqrt(2dof)","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"-0.2846411362911567","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Here's the best-fit phi relative to the truth,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"plot(10^6*[ϕ ϕbf], title=[\"true\" \"best-fit\"] .* raw\" $\\phi$\");","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"Here is the difference in terms of the power spectra. Note the best-fit has high-ell power suppressed, like a Wiener filter solution (in fact what we're doing here is akin to a non-linear Wiener filter). In the high S/N region (elllesssim1000), the difference is approixmately equal to the noise, which you can see is almost two orders of magnitude below the signal.","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"loglog(ℓ⁴ * Cℓ[:f][:ϕϕ], \"k\")\nloglog(ℓ⁴ * get_Cℓ(ϕ))\nloglog(ℓ⁴ * get_Cℓ(ϕbf))\nloglog(ℓ⁴ * get_Cℓ(ϕbf-ϕ))\nxlim(80,3000)\nylim(5e-9,2e-6)\nlegend([\"theory\",raw\"true $\\phi$\", raw\"best-fit $\\phi$\", \"difference\"])\nxlabel(raw\"$\\ell$\")\nylabel(raw\"$\\ell^4 C_\\ell$\");","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"The best-fit unlensed fields relative to truth,","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"plot([f,fbf], title = [\"true\", \"best-fit\"] .* \" unlensed \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"The best-fit lensed field (bottom row) relative to truth (top row),","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"plot([f̃, LenseFlow(ϕbf)*fbf], title = [\"true\", \"best-fit\"] .* \" lensed \" .* [\"E\" \"B\"]);","category":"page"},{"location":"03_joint_MAP_example/#","page":"Joint maximum a posteriori estimate","title":"Joint maximum a posteriori estimate","text":"(Image: png)","category":"page"},{"location":"04_from_python/#Calling-from-Python-1","page":"Calling from Python","title":"Calling from Python","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"If you predominantly use Python, it's very easy to call CMBLensing.jl directly from your Python session. This is made possible by the PyJulia package. You can install it into your Python environment with, e.g.:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"$ pip install --user julia","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Important: If your Python executable is statically-linked (this is quite often the case, e.g. its the default on Ubuntu and Conda) you need one extra step. Basically, instead of running python or ipython at the command line to launch your interpreter, run python-jl  or python-jl -m IPython, respectively. If you use Jupyter, you'll need to edit your kernel.json file (you can find its location via jupyter kernelspec list) and change it to use python-jl.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The wrapper script python-jl does some special initializion but otherwise drops you into the Python/IPython interpreter that you are familiar with. ","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The PyJulia docs also give instructions on how to install a dynamically-linked Python executable which is the most ideal solution, and only slightly more work than above.","category":"page"},{"location":"04_from_python/#Basics-of-calling-Julia-1","page":"Calling from Python","title":"Basics of calling Julia","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Once PyJulia is installed, you can access any Julia package Foo from the Python package julia.Foo, and everything pretty much works transparently.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"import julia.Base","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"julia.Base.cos(1) # <--- this is Julia's cosine function","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"0.5403023058681398","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"You can also run arbitrary Julia code with the %julia cell magic (this is helpful if you want to use Julia language features or syntax which don't exist in Python):","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%load_ext julia.magic","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Initializing Julia runtime. This may take some time...","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"For example, 1:10 is not valid Python syntax, but we can do:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%julia 1:10","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"range(1, 11)","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The cell magic lets you interpolate values from Python into the Julia expression, which can be a convenient way to pass values back and forth:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"x = %julia 1 + 2","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%julia 2 * $x","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"6","category":"page"},{"location":"04_from_python/#Calling-CMBLensing.jl-1","page":"Calling from Python","title":"Calling CMBLensing.jl","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"In Julia, using CMBLensing imports all of the CMBLensing symbols into the current namespace. In Python this is:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"from julia.CMBLensing import *","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Things then generally work the same as in Julia. For example, following this example, we load a simulated dataset:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"sim = load_sim_dataset(\n    θpix  = 2, \n    Nside = 256, \n    T     = julia.Base.Float32, \n    use   = \"P\"\n)","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Note however we did have to use julia.Base.Float32 instead of just Float32 since that is a Julia type and it's not exported in CMBLensing. ","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The next step in the example is to \"unpack\" the variables in the sim objects for convenience, i.e.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"# julia code:\n@unpack f, ϕ, ds = sim","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"There's two problems doing this in Python. First, there's no macro @unpack so we have to do it by hand. Second, Python does not differentiate between the characters ϕ (\\phi) and φ (\\varphi), and maps both of them back to φ (\\varphi) in Julia, which unfortunately is the wrong one for CMBLensing (which instead makes extensive use of the variable name ϕ (\\phi))","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"To get around this, we can wrap code which needs to access  ϕ (\\phi) in %julia magic. The whole thing thus looks like:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"f, ϕ, ds = %julia $sim.f, $sim.ϕ, $sim.ds","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Plotting works the same. We first enable inline plotting:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%pylab inline --no-import-all\n%config InlineBackend.rc = {\"figure.dpi\": 100} # this matches default Julia DPI","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Populating the interactive namespace from numpy and matplotlib","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"plot(ϕ);","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"(Image: png)","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"The call to from julia.CMBLensing import * only import CMBLensing into the Python namespace, if we want to use CMBLensing functions from %julia blocks we also need to load it there.","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"%julia using CMBLensing","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"Lϕ = %julia LenseFlow($ϕ)","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"In Julia you can do addition / multiplication / etc... with operators and fields. This does not work in PyJulia (yet), so you need to use %julia magic:","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"f̃ = %julia $Lϕ * $f","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"plot(f̃);","category":"page"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"(Image: png)","category":"page"},{"location":"04_from_python/#Beyond-1","page":"Calling from Python","title":"Beyond","text":"","category":"section"},{"location":"04_from_python/#","page":"Calling from Python","title":"Calling from Python","text":"This should give you all the tools needed to run any of the other examples in CMBLensing docs from Python. As a general rule, try doing things natively from Python, and if that doesn't work, wrap things in %julia magic to just call the Julia code directly.","category":"page"},{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [CMBLensing]\nOrder   = [:function, :type]","category":"page"},{"location":"api/#CMBLensing.Cℓ_to_cov-Union{Tuple{P}, Tuple{T}, Tuple{Type{T},Type{P},Type{S0},InterpolatedCℓs}} where P where T","page":"API","title":"CMBLensing.Cℓ_to_cov","text":"Convert power spectrum Cℓ to a flat sky diagonal covariance \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.MAP_joint-Tuple{Any}","page":"API","title":"CMBLensing.MAP_joint","text":"MAP_joint(ds::DataSet; L=LenseFlow, Nϕ=nothing, quasi_sample=nothing, nsteps=10, Ncg=500, cgtol=1e-1, αtol=1e-5, αmax=0.5, progress=false)\n\nCompute the maximum a posteri estimate (MAP) from the joint posterior (can also do a quasi-sample). \n\nThe ds argument stores the data and other relevant objects for the dataset being considered. L gives which type of lensing operator to use. \n\nϕstart can be used to specify the starting point of the minimizer, but this is not necessary and otherwise it will start at ϕ=0. \n\nNϕ can optionally specify an estimate of the ϕ effective noise, and if provided is used to estimate a Hessian which is used in the ϕ quasi-Newton-Rhapson step. Nϕ=:qe automatically uses the quadratic estimator noise. \n\nThis function can also be used to draw quasi-samples, wherein for the f step, we draw a sample from  P(f|ϕ) instead of maximizing it (ie instead of computing Wiener filter). quasi_sample can be set to an integer seed, in which case each time in the f step we draw a same-seeded sample. If quasi_sample is instead just true, then each iteration in the algorithm draws a different sample so the solution bounces around rather than asymptoting to a maximum. \n\nThe following arguments control the maximiation procedure, and can generally be left at their defaults:\n\nnsteps - The number of iteration steps to do (each iteration updates f then updates ϕ)\nNcg - Maximum number of conjugate gradient steps during the f update\ncgtol - Conjugrate gradient tolerance (will stop at cgtol or Ncg, whichever is first)\nαtol - Tolerance for the linesearch in the ϕ quasi-Newton-Rhapson step, x′ = x - α*H⁻¹*g\nαmax - Maximum value for α in the linesearch\nprogress - Whether to print out conjugate gradient progress.\n\nReturns a tuple (f, ϕ, tr) where f is the best-fit (or quasi-sample) field, ϕ is the lensing potential, and tr contains info about the run. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.MAP_marg-Tuple{Any}","page":"API","title":"CMBLensing.MAP_marg","text":"MAP_marg( ds; kwargs...)\n\nCompute the maximum a posteri estimate (MAP) of the marginl posterior.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.animate-Tuple{Union{AbstractArray{#s49,1}, AbstractArray{#s49,2}} where #s49<:Field}","page":"API","title":"CMBLensing.animate","text":"animate(fields::Vector{\\<:Vector{\\<:Field}}; interval=50, motionblur=false, kwargs...)\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.bcggd-Union{Tuple{LJ}, Tuple{L}, Tuple{Any,Any,Any,Type{L}}, Tuple{Any,Any,Any,Type{L},Type{LJ}}} where LJ<:LenseOp where L<:LenseOp","page":"API","title":"CMBLensing.bcggd","text":"Branching ConjugateGradient-GradientDescent\n\nAlgortihm:     In parallel do:     a) 2 steps of gradient descent with Ncg steps of conjugate gradient towards H⁻¹g at each iteration     b) 1 steps of gradient descent with β*Ncg steps of conjugate gradient towards H⁻¹g\n\nTake whichever is a lower lnP. If we take (b), then update Ncg = β*Ncg. \n\nβ is chosen such that (a) and (b) take roughly the same ammount of time to\ncompute (usually β≈2 but could be higher if there's alot of overhead for a GD step)\n\nArguments:\n\nt : which parametrization to use (i.e. t=0 for unlensed or t=1 for lensed)\nfₜϕ_start : fₜϕ to start at\nNsteps : how many iterations of the above algorithm to do\nNcg : the starting value of Ncg\nβ : scaling factor described above\nL : Lensing operator to use for gradient descent\nLJ : Lensing operator to use for the Hessian calculation\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.cg","page":"API","title":"CMBLensing.cg","text":"Simple generic conjugate gradient implementation that works on Vectors, Fields, etc... \n\n\n\n\n\n","category":"function"},{"location":"api/#CMBLensing.gdsteps-Union{Tuple{LJ}, Tuple{L}, Tuple{Any,Any,Any,Any,Any,Type{L}}, Tuple{Any,Any,Any,Any,Any,Type{L},Type{LJ}}} where LJ<:LenseOp where L<:LenseOp","page":"API","title":"CMBLensing.gdsteps","text":"Do Ngd gradient descent steps, with Ncg conjugate gradient steps towards solving H⁻¹g at each iteration.\n\nArguments:\n\nt : which parametrization to use (i.e. t=0 for unlensed or t=1 for lensed)\nfₜϕ_cur : fₜϕ to start at\nNgd, Ncg : number of gradient descent and conjugate gradient steps\nL : Lensing operator to use for gradient descent\nLJ : Lensing operator to use for the Hessian calculation\n\nReturns:\n\nlnP(fₜϕ), fₜϕ, trace\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.lensing_wiener_filter-Union{Tuple{F}, Tuple{DataSet{F,TCn,TCf,TCf̃,TCϕ,TCn̂,TB̂,TM,TB,TD,TG,TP} where TP where TG where TD where TB where TM where TB̂ where TCn̂ where TCϕ where TCf̃ where TCf where TCn,Any}, Tuple{DataSet{F,TCn,TCf,TCf̃,TCϕ,TCn̂,TB̂,TM,TB,TD,TG,TP} where TP where TG where TD where TB where TM where TB̂ where TCn̂ where TCϕ where TCf̃ where TCf where TCn,Any,Any}} where F","page":"API","title":"CMBLensing.lensing_wiener_filter","text":"lensing_wiener_filter(ds::DataSet, L, which=:wf)\n\nComputes either, \n\nthe Wiener filter at fixed phi, i.e. the best-fit of\n\nmathcalP(fphid)\n\na sample from mathcalP(fphid)\n\nThe data model assumed is, \n\nd = mathcalM mathcalB mathcalL  f + n\n\nNote that the noise is defined as un-debeamed and also unmasked (so it needs to be filled in outside the mask if using real data). The mask, mathcalM, can be any composition of real and/or fourier space diagonal operators.\n\nThe argument ds::DataSet stores the mask, mathcalM, the beam/instrumental transfer functions, mathcalB, as well as the various covariances which are needed.\n\nThe which parameter controls which operation to do and can be one of three things:\n\n:wf - Compute the Wiener filter\n:sample - Compute a sample from the posterior\n:fluctuation - Compute a fluctuation around the mean (i.e. a sample minus the Wiener filter)\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.load_sim_dataset-Tuple{}","page":"API","title":"CMBLensing.load_sim_dataset","text":"load_sim_dataset\n\nCreate a DataSet object with some simulated data. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.noisecls-Tuple{Any}","page":"API","title":"CMBLensing.noisecls","text":"μKarcminT: temperature noise in μK-arcmin\nbeamFWHM: beam-FWHM in arcmin\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.norm²-Tuple{Field,LinOp}","page":"API","title":"CMBLensing.norm²","text":"norm²(f::Field, L::LinOp)\n\nShorthand for f⋅(L\\f), i.e. the squared-norm of f w.r.t. the operator L.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.pcg","page":"API","title":"CMBLensing.pcg","text":"Preconditioned conjugate gradient. P should be symmetric and roughly √A⁻¹\n\n\n\n\n\n","category":"function"},{"location":"api/#CMBLensing.pcg2","page":"API","title":"CMBLensing.pcg2","text":"pcg2(M, A, b, x=M\\b; nsteps=length(b), tol=sqrt(eps()), progress=false, callback=nothing, hist=nothing, histmod=1)\n\nCompute x = A\\b (where A is positive definite) by conjugate gradient. M is the preconditioner and should approximate A, and M \\ x should be fast.\n\nThe solver will stop either after nsteps iterations or when dot(r,r)<tol (where r=A*x-b is the residual  at that step), whichever occurs first.\n\nInfo from the iterations of the solver can be returned if hist is specified. hist can be one or a tuple of:\n\n:i - current iteration number\n:x - current solution\n:r - current residual r=A*x-b\n:res - the norm of r\n:t - the time elapsed (in seconds) since the start of the algorithm\n\nhistmod can be used to include every N-th iteration only in hist. \n\n\n\n\n\n","category":"function"},{"location":"api/#CMBLensing.pixwin-Tuple{Any,Any}","page":"API","title":"CMBLensing.pixwin","text":"pixwin(θpix, ℓ)\n\nReturns the pixel window function for square flat-sky pixels of width θpix (in arcmin) evaluated at some ℓs. \n\nThe pixel window function is defined so that if you start with white noise at infinitely high resolution and pixelize it down a resolution θpix, its power spectrum will be given by pixwin(θpix, ℓ)^2. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.resimulate-Tuple{DataSet}","page":"API","title":"CMBLensing.resimulate","text":"resimulate(ds::DataSet; f=..., ϕ=...)\n\nResimulate the data in a given dataset, potentially at a fixed f and/or ϕ (both are resimulate if not provided)\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.sample_joint-Union{Tuple{DataSet{#s192,TCn,TCf,TCf̃,TCϕ,TCn̂,TB̂,TM,TB,TD,TG,TP} where TP where TG where TD where TB where TM where TB̂ where TCn̂ where TCϕ where TCf̃ where TCf where TCn where #s192<:Union{FlatS0Fourier{T,P}, FlatS0Map{T,P}, FlatS2EBFourier{T,P}, FlatS2EBMap{T,P}, FlatS2QUFourier{T,P}, FlatS2QUMap{T,P}, FieldTuple{#s53,B,S,P} where P<:CMBLensing.PixTuple where S<:CMBLensing.SpinTuple where B<:CMBLensing.BasisTuple where #s53<:Tuple{Union{FlatS0Fourier{T,P}, FlatS0Map{T,P}},Union{FlatS2EBFourier{T,P}, FlatS2EBMap{T,P}, FlatS2QUFourier{T,P}, FlatS2QUMap{T,P}}}}}, Tuple{P}, Tuple{T}} where P where T","page":"API","title":"CMBLensing.sample_joint","text":"sample_joint(ds::DataSet; kwargs...)\n\nSample from the joint PDF of P(f,ϕ,r). Runs nworkers() chains in parallel using pmap. \n\nPossible keyword arguments: \n\nnsamps_per_chain - the number of samples per chain\nnchunk - do nchunk steps in-between parallel chain communication\nnsavemaps - save maps into chain every nsavemaps steps\nnburnin_always_accept - the first nburnin_always_accept steps, always accept HMC steps independent of integration error\nnburnin_fixθ - the first nburnin_fixθ steps, fix θ at its starting point\nchains - resume an existing chain (starts a new one if nothing)\nθrange - range and density to grid sample parameters as a NamedTuple, e.g. (Aϕ=range(0.7,1.3,length=20),). \nθstart - starting values of parameters as a NamedTuple, e.g. (Aϕ=1.2,), or nothing to randomly sample from θrange\nϕstart - starting ϕ as a Field, or :quasi_sample or :best_fit\nmetadata - does nothing, but is saved into the chain file\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.sptlike_mask-Tuple{Any,Any}","page":"API","title":"CMBLensing.sptlike_mask","text":"An SPT-like mask, based mostly on,\n\nFor the boundary:\n\n\"[First we] calculate the distance from the nearest masked pixel, and this distance map is smoothed using a Gaussian beam of FWHM = 15'. This smoothing is applied to soften the corners of the mask. The distance map is then used to apodize the binary mask with a Gaussian beam of FWHM = 30'\" - Omori et al. 2017\n\nand for point sources: \n\n\"The SPTpol deep field contains a number of bright point sources, which we mask. We identify all sources detected at > 5σ at 150 GHz from Mocanu et al. (2013), which corresponds to a flux-cut of approximately 6 mJy; all pixels within 5' of each source are masked in both the TOD filtering and the final maps. We extend this mask to 10' for all very bright sources detected at > 75σ. We also use a 10' radius to mask all galaxy clusters de- tected in this field by Vanderlinde et al. (2010) using the Sunyaev-Zel’dovich effect. This masking removes ap- proximately 120 sources, cutting 5 deg² of the field. We additionally multiply the maps by a sky mask that down- weights the noisy edges of the maps.\" Story et al. 2015\n\nNote: some of the above numbers are very slightly tweaked.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.symplectic_integrate-NTuple{5,Any}","page":"API","title":"CMBLensing.symplectic_integrate","text":"symplectic_integrate(x₀, p₀, Λ, U, δUδx, N=50, ϵ=0.1, progress=false)\n\nDo a symplectic integration of the potential energy U (with gradient δUδx) starting from point x₀ with momentum p₀ and mass matrix Λ. The number of steps is N and the step size ϵ. \n\nReturns ΔH, xᵢ, pᵢ corresponding to change in Hamiltonian, and final position and momenta. If hist is specified a trace of requested variables throughout each step is also returned. \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.ud_grade-Union{Tuple{P}, Tuple{∂mode}, Tuple{N}, Tuple{θ}, Tuple{T}, Tuple{Union{FlatS0Fourier{T,P}, FlatS0Map{T,P}},Any}} where P<:Flat{θ,N,∂mode} where ∂mode where N where θ where T","page":"API","title":"CMBLensing.ud_grade","text":"ud_grade(f::Field, θnew, mode=:map, deconv_pixwin=true, anti_aliasing=true)\n\nUp- or down-grades field f to new resolution θnew (only in integer steps). Two modes are available specified by the mode argument: \n\n*`:map`     : Up/downgrade by replicating/averaging pixels in map-space\n*`:fourier` : Up/downgrade by extending/truncating the Fourier grid\n\nFor :map mode, two additional options are possible. If deconv_pixwin is true, deconvolves the pixel window function from the downgraded map so the spectrum of the new and old maps are the same. If anti_aliasing is true, filters out frequencies above Nyquist prior to down-sampling. \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.ϕqe","page":"API","title":"CMBLensing.ϕqe","text":"ϕqe(d, Cf, Cf̃, Cn, Cϕ=nothing)\n\nCompute quadratic estimate for ϕ given data. \n\nd - data\nCf, Cf̃ - unlensed and lensed beamed theory covariances\nCn - noise covariance (beam not deconvolved)\nCϕ - (optional) lensing potential theory covariance. if provided, the result        is Wiener filtered, otherwise the unbiased estimate is retured. \n\nReturns a tuple of (ϕqe, Nϕ) where ϕqe is the quadratic estimate and Nϕ is the N0 noise bias.\n\n\n\n\n\n","category":"function"},{"location":"api/#PyPlot.plot-Tuple{Field}","page":"API","title":"PyPlot.plot","text":"plot(f::Field; kwargs...)\nplot(fs::VecOrMat{\\<:Field}; kwarg...)\n\nPlotting fields. \n\n\n\n","category":"method"},{"location":"api/#CMBLensing.Mnyq-Union{Tuple{P}, Tuple{N}, Tuple{θ}, Tuple{T}, Tuple{Type{T},Type{P},Any}} where P<:(Flat{θ,N,∂mode} where ∂mode<:CMBLensing.∂modes) where N where θ where T","page":"API","title":"CMBLensing.Mnyq","text":"filter out the single row/column in the real FFT matrix M which corresponds to exactly the nyquist frequency \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.antilensing-Union{Tuple{PowerLens{N,F}}, Tuple{F}, Tuple{N}} where F where N","page":"API","title":"CMBLensing.antilensing","text":"Create from an existing PowerLens operator one that lenses by -ϕ instead. \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.camb_cl_files-Tuple{Any}","page":"API","title":"CMBLensing.camb_cl_files","text":"camb_cl_files(filename_root)\n\nLoads Cℓ's from some CAMB output files. filename_root should be such that $(filenameroot)scalCls.dat, etc... are the CAMB data files.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.fftsyms-Union{Tuple{n}, Tuple{m}, Tuple{Val{m},Val{n}}} where n where m","page":"API","title":"CMBLensing.fftsyms","text":"Arguments m and n refer to the sizes of an m×n matrix (call it A) that is the output of a real FFT (thus m=n÷2+1)\n\nReturns a tuple of (ireal, iimag, negks) where these are\n\n* ireal - m×n mask corrsponding to unique real entries of A\n* iimag - m×n mask corrsponding to unique imaginary entries of A\n* negks - m×n matrix of giving the index into A where the negative k-vector\n          is, s.t. A[i,j] = A[negks[i,j]]'\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.fieldvalues-Tuple{Any}","page":"API","title":"CMBLensing.fieldvalues","text":"Return the type's fields as a tuple\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.full-Union{Tuple{Fout}, Tuple{Fin}, Tuple{Type{Fin},Type{Fout},LinOp}} where Fout<:Field where Fin<:Field","page":"API","title":"CMBLensing.full","text":"full(::Type{Fin}, ::Type{Fout}, L::LinOp; progress=true)\nfull(::Type{F}, L::LinOp; progress=true)\n\nConstruct an explicit matrix representation of the linear operator L by applying it to a set of vectors which form a complete basis. The Fin and Fout types should be fields which specify the input and output bases for the representation (or just F if L is square and we want the same input/output bases)\n\nThe name full is to be consistent with Julia's SparseArrays where full builds a full matrix from a sparse one.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.rfft2vec-Tuple{AbstractArray{T,2} where T}","page":"API","title":"CMBLensing.rfft2vec","text":"Convert a matrix A which is the output of a real FFT to a real vector, keeping only unqiue real/imaginary entries of A\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.tmap-Tuple{Any,Vararg{Any,N} where N}","page":"API","title":"CMBLensing.tmap","text":"Threaded map, like pmap, but using @threads. \n\nIf Threads.nthreads()==1 then this macro-exapands to just use map, so there's zero overhead and no impact to type-stability. The threaded case however is not type-stable, although this is intentional b/c for some weird reason that actually makes my use-case slower.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.unfold-Union{Tuple{AbstractArray{Complex{T},2}}, Tuple{T}} where T","page":"API","title":"CMBLensing.unfold","text":"Convert an M×N matrix (with M=N÷2+1) which is the output a real FFT to a full N×N one via symmetries.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.vec2rfft-Tuple{AbstractArray{#s35,1} where #s35<:Real}","page":"API","title":"CMBLensing.vec2rfft","text":"Convert a vector produced by rfft2vec back into a complex matrix.\n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.Σ-Union{Tuple{L}, Tuple{Any,Any}, Tuple{Any,Any,Type{L}}} where L","page":"API","title":"CMBLensing.Σ","text":"Σ(ϕ, ds, ::Type{L}=LenseFlow) where {L}\nΣ(L::LenseOp, ds)\n\nOperator for the data covariance, Cn + PMBLCfL'B'M'P', which can applied and inverted.\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.δf̃_δf-Tuple{PowerLens,Any}","page":"API","title":"CMBLensing.δf̃_δf","text":"δf̃(f,ϕ)/δf * v \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.δf̃_δfᴴ-Union{Tuple{N}, Tuple{PowerLens{N,F} where F<:(Field{#s53,#s52,P} where P<:CMBLensing.Pix where #s52<:S0 where #s53),Field}} where N","page":"API","title":"CMBLensing.δf̃_δfᴴ","text":"(δf̃(f,ϕ)/δf)ᴴ * v \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.δf̃_δϕ-Union{Tuple{F}, Tuple{N}, Tuple{PowerLens{N,F} where F<:(Field{#s53,#s52,P} where P<:CMBLensing.Pix where #s52<:S0 where #s53),F,Field}} where F<:Field where N","page":"API","title":"CMBLensing.δf̃_δϕ","text":"δf̃(f,ϕ)/δϕ * v \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.δf̃_δϕᴴ-Union{Tuple{F}, Tuple{N}, Tuple{PowerLens{N,F},Field,Field}} where F where N","page":"API","title":"CMBLensing.δf̃_δϕᴴ","text":"(δf̃(f,ϕ)/δϕ)ᴴ * v \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.δ²f̃_δϕ²-Union{Tuple{F}, Tuple{N}, Tuple{PowerLens{N,F},Field,Field,Field}} where F where N","page":"API","title":"CMBLensing.δ²f̃_δϕ²","text":"Compute wᴴ * δ²f̃(f,ϕ)/δϕ² * v \n\n\n\n\n\n","category":"method"},{"location":"api/#CMBLensing.jrk4-Tuple{Function,Any,Any,Any,Any}","page":"API","title":"CMBLensing.jrk4","text":"Solve for y(t₁) with 4th order Runge-Kutta assuming dy/dt = F(t,y) and y(t₀) = y₀\n\nArguments\n\nF! : a function F!(v,t,y) which sets v=F(t,y)\n\n\n\n\n\n","category":"method"}]
}
